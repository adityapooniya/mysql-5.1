
/* A Bison parser, made by GNU Bison 2.4.1.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C
   
      Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.4.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 189 of yacc.c  */
#line 23 "sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "mysql_priv.h"
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

const LEX_STRING null_lex_str= {0,0};

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  /* Push an error into the error stack */
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  (yytext ? yytext : ""),
                  lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}



/* Line 189 of yacc.c  */
#line 528 "sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CHAIN_SYM = 309,
     CHANGE = 310,
     CHANGED = 311,
     CHARSET = 312,
     CHAR_SYM = 313,
     CHECKSUM_SYM = 314,
     CHECK_SYM = 315,
     CIPHER_SYM = 316,
     CLIENT_SYM = 317,
     CLOSE_SYM = 318,
     COALESCE = 319,
     CODE_SYM = 320,
     COLLATE_SYM = 321,
     COLLATION_SYM = 322,
     COLUMNS = 323,
     COLUMN_SYM = 324,
     COMMENT_SYM = 325,
     COMMITTED_SYM = 326,
     COMMIT_SYM = 327,
     COMPACT_SYM = 328,
     COMPLETION_SYM = 329,
     COMPRESSED_SYM = 330,
     CONCURRENT = 331,
     CONDITION_SYM = 332,
     CONNECTION_SYM = 333,
     CONSISTENT_SYM = 334,
     CONSTRAINT = 335,
     CONTAINS_SYM = 336,
     CONTEXT_SYM = 337,
     CONTINUE_SYM = 338,
     CONTRIBUTORS_SYM = 339,
     CONVERT_SYM = 340,
     COUNT_SYM = 341,
     CPU_SYM = 342,
     CREATE = 343,
     CROSS = 344,
     CUBE_SYM = 345,
     CURDATE = 346,
     CURRENT_USER = 347,
     CURSOR_SYM = 348,
     CURTIME = 349,
     DATABASE = 350,
     DATABASES = 351,
     DATAFILE_SYM = 352,
     DATA_SYM = 353,
     DATETIME = 354,
     DATE_ADD_INTERVAL = 355,
     DATE_SUB_INTERVAL = 356,
     DATE_SYM = 357,
     DAY_HOUR_SYM = 358,
     DAY_MICROSECOND_SYM = 359,
     DAY_MINUTE_SYM = 360,
     DAY_SECOND_SYM = 361,
     DAY_SYM = 362,
     DEALLOCATE_SYM = 363,
     DECIMAL_NUM = 364,
     DECIMAL_SYM = 365,
     DECLARE_SYM = 366,
     DEFAULT = 367,
     DEFINER_SYM = 368,
     DELAYED_SYM = 369,
     DELAY_KEY_WRITE_SYM = 370,
     DELETE_SYM = 371,
     DESC = 372,
     DESCRIBE = 373,
     DES_KEY_FILE = 374,
     DETERMINISTIC_SYM = 375,
     DIRECTORY_SYM = 376,
     DISABLE_SYM = 377,
     DISCARD = 378,
     DISK_SYM = 379,
     DISTINCT = 380,
     DIV_SYM = 381,
     DOUBLE_SYM = 382,
     DO_SYM = 383,
     DROP = 384,
     DUAL_SYM = 385,
     DUMPFILE = 386,
     DUPLICATE_SYM = 387,
     DYNAMIC_SYM = 388,
     EACH_SYM = 389,
     ELSE = 390,
     ELSEIF_SYM = 391,
     ENABLE_SYM = 392,
     ENCLOSED = 393,
     END = 394,
     ENDS_SYM = 395,
     END_OF_INPUT = 396,
     ENGINES_SYM = 397,
     ENGINE_SYM = 398,
     ENUM = 399,
     EQ = 400,
     EQUAL_SYM = 401,
     ERRORS = 402,
     ESCAPED = 403,
     ESCAPE_SYM = 404,
     EVENTS_SYM = 405,
     EVENT_SYM = 406,
     EVERY_SYM = 407,
     EXECUTE_SYM = 408,
     EXISTS = 409,
     EXIT_SYM = 410,
     EXPANSION_SYM = 411,
     EXTENDED_SYM = 412,
     EXTENT_SIZE_SYM = 413,
     EXTRACT_SYM = 414,
     FALSE_SYM = 415,
     FAST_SYM = 416,
     FAULTS_SYM = 417,
     FETCH_SYM = 418,
     FILE_SYM = 419,
     FIRST_SYM = 420,
     FIXED_SYM = 421,
     FLOAT_NUM = 422,
     FLOAT_SYM = 423,
     FLUSH_SYM = 424,
     FORCE_SYM = 425,
     FOREIGN = 426,
     FOR_SYM = 427,
     FOUND_SYM = 428,
     FRAC_SECOND_SYM = 429,
     FROM = 430,
     FULL = 431,
     FULLTEXT_SYM = 432,
     FUNCTION_SYM = 433,
     GE = 434,
     GEOMETRYCOLLECTION = 435,
     GEOMETRY_SYM = 436,
     GET_FORMAT = 437,
     GLOBAL_SYM = 438,
     GRANT = 439,
     GRANTS = 440,
     GROUP_SYM = 441,
     GROUP_CONCAT_SYM = 442,
     GT_SYM = 443,
     HANDLER_SYM = 444,
     HASH_SYM = 445,
     HAVING = 446,
     HELP_SYM = 447,
     HEX_NUM = 448,
     HIGH_PRIORITY = 449,
     HOST_SYM = 450,
     HOSTS_SYM = 451,
     HOUR_MICROSECOND_SYM = 452,
     HOUR_MINUTE_SYM = 453,
     HOUR_SECOND_SYM = 454,
     HOUR_SYM = 455,
     IDENT = 456,
     IDENTIFIED_SYM = 457,
     IDENT_QUOTED = 458,
     IF = 459,
     IGNORE_SYM = 460,
     IMPORT = 461,
     INDEXES = 462,
     INDEX_SYM = 463,
     INFILE = 464,
     INITIAL_SIZE_SYM = 465,
     INNER_SYM = 466,
     INNOBASE_SYM = 467,
     INOUT_SYM = 468,
     INSENSITIVE_SYM = 469,
     INSERT = 470,
     INSERT_METHOD = 471,
     INSTALL_SYM = 472,
     INTERVAL_SYM = 473,
     INTO = 474,
     INT_SYM = 475,
     INVOKER_SYM = 476,
     IN_SYM = 477,
     IO_SYM = 478,
     IPC_SYM = 479,
     IS = 480,
     ISOLATION = 481,
     ISSUER_SYM = 482,
     ITERATE_SYM = 483,
     JOIN_SYM = 484,
     KEYS = 485,
     KEY_BLOCK_SIZE = 486,
     KEY_SYM = 487,
     KILL_SYM = 488,
     LANGUAGE_SYM = 489,
     LAST_SYM = 490,
     LE = 491,
     LEADING = 492,
     LEAVES = 493,
     LEAVE_SYM = 494,
     LEFT = 495,
     LESS_SYM = 496,
     LEVEL_SYM = 497,
     LEX_HOSTNAME = 498,
     LIKE = 499,
     LIMIT = 500,
     LINEAR_SYM = 501,
     LINES = 502,
     LINESTRING = 503,
     LIST_SYM = 504,
     LOAD = 505,
     LOCAL_SYM = 506,
     LOCATOR_SYM = 507,
     LOCKS_SYM = 508,
     LOCK_SYM = 509,
     LOGFILE_SYM = 510,
     LOGS_SYM = 511,
     LONGBLOB = 512,
     LONGTEXT = 513,
     LONG_NUM = 514,
     LONG_SYM = 515,
     LOOP_SYM = 516,
     LOW_PRIORITY = 517,
     LT = 518,
     MASTER_CONNECT_RETRY_SYM = 519,
     MASTER_HOST_SYM = 520,
     MASTER_LOG_FILE_SYM = 521,
     MASTER_LOG_POS_SYM = 522,
     MASTER_PASSWORD_SYM = 523,
     MASTER_PORT_SYM = 524,
     MASTER_SERVER_ID_SYM = 525,
     MASTER_SSL_CAPATH_SYM = 526,
     MASTER_SSL_CA_SYM = 527,
     MASTER_SSL_CERT_SYM = 528,
     MASTER_SSL_CIPHER_SYM = 529,
     MASTER_SSL_KEY_SYM = 530,
     MASTER_SSL_SYM = 531,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 532,
     MASTER_SYM = 533,
     MASTER_USER_SYM = 534,
     MATCH = 535,
     MAX_CONNECTIONS_PER_HOUR = 536,
     MAX_QUERIES_PER_HOUR = 537,
     MAX_ROWS = 538,
     MAX_SIZE_SYM = 539,
     MAX_SYM = 540,
     MAX_UPDATES_PER_HOUR = 541,
     MAX_USER_CONNECTIONS_SYM = 542,
     MAX_VALUE_SYM = 543,
     MEDIUMBLOB = 544,
     MEDIUMINT = 545,
     MEDIUMTEXT = 546,
     MEDIUM_SYM = 547,
     MEMORY_SYM = 548,
     MERGE_SYM = 549,
     MICROSECOND_SYM = 550,
     MIGRATE_SYM = 551,
     MINUTE_MICROSECOND_SYM = 552,
     MINUTE_SECOND_SYM = 553,
     MINUTE_SYM = 554,
     MIN_ROWS = 555,
     MIN_SYM = 556,
     MODE_SYM = 557,
     MODIFIES_SYM = 558,
     MODIFY_SYM = 559,
     MOD_SYM = 560,
     MONTH_SYM = 561,
     MULTILINESTRING = 562,
     MULTIPOINT = 563,
     MULTIPOLYGON = 564,
     MUTEX_SYM = 565,
     NAMES_SYM = 566,
     NAME_SYM = 567,
     NATIONAL_SYM = 568,
     NATURAL = 569,
     NCHAR_STRING = 570,
     NCHAR_SYM = 571,
     NDBCLUSTER_SYM = 572,
     NE = 573,
     NEG = 574,
     NEW_SYM = 575,
     NEXT_SYM = 576,
     NODEGROUP_SYM = 577,
     NONE_SYM = 578,
     NOT2_SYM = 579,
     NOT_SYM = 580,
     NOW_SYM = 581,
     NO_SYM = 582,
     NO_WAIT_SYM = 583,
     NO_WRITE_TO_BINLOG = 584,
     NULL_SYM = 585,
     NUM = 586,
     NUMERIC_SYM = 587,
     NVARCHAR_SYM = 588,
     OFFSET_SYM = 589,
     OLD_PASSWORD = 590,
     ON = 591,
     ONE_SHOT_SYM = 592,
     ONE_SYM = 593,
     OPEN_SYM = 594,
     OPTIMIZE = 595,
     OPTIONS_SYM = 596,
     OPTION = 597,
     OPTIONALLY = 598,
     OR2_SYM = 599,
     ORDER_SYM = 600,
     OR_OR_SYM = 601,
     OR_SYM = 602,
     OUTER = 603,
     OUTFILE = 604,
     OUT_SYM = 605,
     OWNER_SYM = 606,
     PACK_KEYS_SYM = 607,
     PAGE_SYM = 608,
     PARAM_MARKER = 609,
     PARSER_SYM = 610,
     PARTIAL = 611,
     PARTITIONING_SYM = 612,
     PARTITIONS_SYM = 613,
     PARTITION_SYM = 614,
     PASSWORD = 615,
     PHASE_SYM = 616,
     PLUGINS_SYM = 617,
     PLUGIN_SYM = 618,
     POINT_SYM = 619,
     POLYGON = 620,
     PORT_SYM = 621,
     POSITION_SYM = 622,
     PRECISION = 623,
     PREPARE_SYM = 624,
     PRESERVE_SYM = 625,
     PREV_SYM = 626,
     PRIMARY_SYM = 627,
     PRIVILEGES = 628,
     PROCEDURE = 629,
     PROCESS = 630,
     PROCESSLIST_SYM = 631,
     PROFILE_SYM = 632,
     PROFILES_SYM = 633,
     PURGE = 634,
     QUARTER_SYM = 635,
     QUERY_SYM = 636,
     QUICK = 637,
     RANGE_SYM = 638,
     READS_SYM = 639,
     READ_ONLY_SYM = 640,
     READ_SYM = 641,
     READ_WRITE_SYM = 642,
     REAL = 643,
     REBUILD_SYM = 644,
     RECOVER_SYM = 645,
     REDOFILE_SYM = 646,
     REDO_BUFFER_SIZE_SYM = 647,
     REDUNDANT_SYM = 648,
     REFERENCES = 649,
     REGEXP = 650,
     RELAY_LOG_FILE_SYM = 651,
     RELAY_LOG_POS_SYM = 652,
     RELAY_THREAD = 653,
     RELEASE_SYM = 654,
     RELOAD = 655,
     REMOVE_SYM = 656,
     RENAME = 657,
     REORGANIZE_SYM = 658,
     REPAIR = 659,
     REPEATABLE_SYM = 660,
     REPEAT_SYM = 661,
     REPLACE = 662,
     REPLICATION = 663,
     REQUIRE_SYM = 664,
     RESET_SYM = 665,
     RESOURCES = 666,
     RESTORE_SYM = 667,
     RESTRICT = 668,
     RESUME_SYM = 669,
     RETURNS_SYM = 670,
     RETURN_SYM = 671,
     REVOKE = 672,
     RIGHT = 673,
     ROLLBACK_SYM = 674,
     ROLLUP_SYM = 675,
     ROUTINE_SYM = 676,
     ROWS_SYM = 677,
     ROW_FORMAT_SYM = 678,
     ROW_SYM = 679,
     RTREE_SYM = 680,
     SAVEPOINT_SYM = 681,
     SCHEDULE_SYM = 682,
     SECOND_MICROSECOND_SYM = 683,
     SECOND_SYM = 684,
     SECURITY_SYM = 685,
     SELECT_SYM = 686,
     SENSITIVE_SYM = 687,
     SEPARATOR_SYM = 688,
     SERIALIZABLE_SYM = 689,
     SERIAL_SYM = 690,
     SESSION_SYM = 691,
     SERVER_SYM = 692,
     SERVER_OPTIONS = 693,
     SET = 694,
     SET_VAR = 695,
     SHARE_SYM = 696,
     SHIFT_LEFT = 697,
     SHIFT_RIGHT = 698,
     SHOW = 699,
     SHUTDOWN = 700,
     SIGNED_SYM = 701,
     SIMPLE_SYM = 702,
     SLAVE = 703,
     SMALLINT = 704,
     SNAPSHOT_SYM = 705,
     SOCKET_SYM = 706,
     SONAME_SYM = 707,
     SOUNDS_SYM = 708,
     SOURCE_SYM = 709,
     SPATIAL_SYM = 710,
     SPECIFIC_SYM = 711,
     SQLEXCEPTION_SYM = 712,
     SQLSTATE_SYM = 713,
     SQLWARNING_SYM = 714,
     SQL_BIG_RESULT = 715,
     SQL_BUFFER_RESULT = 716,
     SQL_CACHE_SYM = 717,
     SQL_CALC_FOUND_ROWS = 718,
     SQL_NO_CACHE_SYM = 719,
     SQL_SMALL_RESULT = 720,
     SQL_SYM = 721,
     SQL_THREAD = 722,
     SSL_SYM = 723,
     STARTING = 724,
     STARTS_SYM = 725,
     START_SYM = 726,
     STATUS_SYM = 727,
     STDDEV_SAMP_SYM = 728,
     STD_SYM = 729,
     STOP_SYM = 730,
     STORAGE_SYM = 731,
     STRAIGHT_JOIN = 732,
     STRING_SYM = 733,
     SUBDATE_SYM = 734,
     SUBJECT_SYM = 735,
     SUBPARTITIONS_SYM = 736,
     SUBPARTITION_SYM = 737,
     SUBSTRING = 738,
     SUM_SYM = 739,
     SUPER_SYM = 740,
     SUSPEND_SYM = 741,
     SWAPS_SYM = 742,
     SWITCHES_SYM = 743,
     SYSDATE = 744,
     TABLES = 745,
     TABLESPACE = 746,
     TABLE_REF_PRIORITY = 747,
     TABLE_SYM = 748,
     TABLE_CHECKSUM_SYM = 749,
     TEMPORARY = 750,
     TEMPTABLE_SYM = 751,
     TERMINATED = 752,
     TEXT_STRING = 753,
     TEXT_SYM = 754,
     THAN_SYM = 755,
     THEN_SYM = 756,
     TIMESTAMP = 757,
     TIMESTAMP_ADD = 758,
     TIMESTAMP_DIFF = 759,
     TIME_SYM = 760,
     TINYBLOB = 761,
     TINYINT = 762,
     TINYTEXT = 763,
     TO_SYM = 764,
     TRAILING = 765,
     TRANSACTION_SYM = 766,
     TRIGGERS_SYM = 767,
     TRIGGER_SYM = 768,
     TRIM = 769,
     TRUE_SYM = 770,
     TRUNCATE_SYM = 771,
     TYPES_SYM = 772,
     TYPE_SYM = 773,
     UDF_RETURNS_SYM = 774,
     ULONGLONG_NUM = 775,
     UNCOMMITTED_SYM = 776,
     UNDEFINED_SYM = 777,
     UNDERSCORE_CHARSET = 778,
     UNDOFILE_SYM = 779,
     UNDO_BUFFER_SIZE_SYM = 780,
     UNDO_SYM = 781,
     UNICODE_SYM = 782,
     UNINSTALL_SYM = 783,
     UNION_SYM = 784,
     UNIQUE_SYM = 785,
     UNKNOWN_SYM = 786,
     UNLOCK_SYM = 787,
     UNSIGNED = 788,
     UNTIL_SYM = 789,
     UPDATE_SYM = 790,
     UPGRADE_SYM = 791,
     USAGE = 792,
     USER = 793,
     USE_FRM = 794,
     USE_SYM = 795,
     USING = 796,
     UTC_DATE_SYM = 797,
     UTC_TIMESTAMP_SYM = 798,
     UTC_TIME_SYM = 799,
     VALUES = 800,
     VALUE_SYM = 801,
     VARBINARY = 802,
     VARCHAR = 803,
     VARIABLES = 804,
     VARIANCE_SYM = 805,
     VARYING = 806,
     VAR_SAMP_SYM = 807,
     VIEW_SYM = 808,
     WAIT_SYM = 809,
     WARNINGS = 810,
     WEEK_SYM = 811,
     WHEN_SYM = 812,
     WHERE = 813,
     WHILE_SYM = 814,
     WITH = 815,
     WORK_SYM = 816,
     WRAPPER_SYM = 817,
     WRITE_SYM = 818,
     X509_SYM = 819,
     XA_SYM = 820,
     XOR = 821,
     YEAR_MONTH_SYM = 822,
     YEAR_SYM = 823,
     ZEROFILL = 824
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CHAIN_SYM 309
#define CHANGE 310
#define CHANGED 311
#define CHARSET 312
#define CHAR_SYM 313
#define CHECKSUM_SYM 314
#define CHECK_SYM 315
#define CIPHER_SYM 316
#define CLIENT_SYM 317
#define CLOSE_SYM 318
#define COALESCE 319
#define CODE_SYM 320
#define COLLATE_SYM 321
#define COLLATION_SYM 322
#define COLUMNS 323
#define COLUMN_SYM 324
#define COMMENT_SYM 325
#define COMMITTED_SYM 326
#define COMMIT_SYM 327
#define COMPACT_SYM 328
#define COMPLETION_SYM 329
#define COMPRESSED_SYM 330
#define CONCURRENT 331
#define CONDITION_SYM 332
#define CONNECTION_SYM 333
#define CONSISTENT_SYM 334
#define CONSTRAINT 335
#define CONTAINS_SYM 336
#define CONTEXT_SYM 337
#define CONTINUE_SYM 338
#define CONTRIBUTORS_SYM 339
#define CONVERT_SYM 340
#define COUNT_SYM 341
#define CPU_SYM 342
#define CREATE 343
#define CROSS 344
#define CUBE_SYM 345
#define CURDATE 346
#define CURRENT_USER 347
#define CURSOR_SYM 348
#define CURTIME 349
#define DATABASE 350
#define DATABASES 351
#define DATAFILE_SYM 352
#define DATA_SYM 353
#define DATETIME 354
#define DATE_ADD_INTERVAL 355
#define DATE_SUB_INTERVAL 356
#define DATE_SYM 357
#define DAY_HOUR_SYM 358
#define DAY_MICROSECOND_SYM 359
#define DAY_MINUTE_SYM 360
#define DAY_SECOND_SYM 361
#define DAY_SYM 362
#define DEALLOCATE_SYM 363
#define DECIMAL_NUM 364
#define DECIMAL_SYM 365
#define DECLARE_SYM 366
#define DEFAULT 367
#define DEFINER_SYM 368
#define DELAYED_SYM 369
#define DELAY_KEY_WRITE_SYM 370
#define DELETE_SYM 371
#define DESC 372
#define DESCRIBE 373
#define DES_KEY_FILE 374
#define DETERMINISTIC_SYM 375
#define DIRECTORY_SYM 376
#define DISABLE_SYM 377
#define DISCARD 378
#define DISK_SYM 379
#define DISTINCT 380
#define DIV_SYM 381
#define DOUBLE_SYM 382
#define DO_SYM 383
#define DROP 384
#define DUAL_SYM 385
#define DUMPFILE 386
#define DUPLICATE_SYM 387
#define DYNAMIC_SYM 388
#define EACH_SYM 389
#define ELSE 390
#define ELSEIF_SYM 391
#define ENABLE_SYM 392
#define ENCLOSED 393
#define END 394
#define ENDS_SYM 395
#define END_OF_INPUT 396
#define ENGINES_SYM 397
#define ENGINE_SYM 398
#define ENUM 399
#define EQ 400
#define EQUAL_SYM 401
#define ERRORS 402
#define ESCAPED 403
#define ESCAPE_SYM 404
#define EVENTS_SYM 405
#define EVENT_SYM 406
#define EVERY_SYM 407
#define EXECUTE_SYM 408
#define EXISTS 409
#define EXIT_SYM 410
#define EXPANSION_SYM 411
#define EXTENDED_SYM 412
#define EXTENT_SIZE_SYM 413
#define EXTRACT_SYM 414
#define FALSE_SYM 415
#define FAST_SYM 416
#define FAULTS_SYM 417
#define FETCH_SYM 418
#define FILE_SYM 419
#define FIRST_SYM 420
#define FIXED_SYM 421
#define FLOAT_NUM 422
#define FLOAT_SYM 423
#define FLUSH_SYM 424
#define FORCE_SYM 425
#define FOREIGN 426
#define FOR_SYM 427
#define FOUND_SYM 428
#define FRAC_SECOND_SYM 429
#define FROM 430
#define FULL 431
#define FULLTEXT_SYM 432
#define FUNCTION_SYM 433
#define GE 434
#define GEOMETRYCOLLECTION 435
#define GEOMETRY_SYM 436
#define GET_FORMAT 437
#define GLOBAL_SYM 438
#define GRANT 439
#define GRANTS 440
#define GROUP_SYM 441
#define GROUP_CONCAT_SYM 442
#define GT_SYM 443
#define HANDLER_SYM 444
#define HASH_SYM 445
#define HAVING 446
#define HELP_SYM 447
#define HEX_NUM 448
#define HIGH_PRIORITY 449
#define HOST_SYM 450
#define HOSTS_SYM 451
#define HOUR_MICROSECOND_SYM 452
#define HOUR_MINUTE_SYM 453
#define HOUR_SECOND_SYM 454
#define HOUR_SYM 455
#define IDENT 456
#define IDENTIFIED_SYM 457
#define IDENT_QUOTED 458
#define IF 459
#define IGNORE_SYM 460
#define IMPORT 461
#define INDEXES 462
#define INDEX_SYM 463
#define INFILE 464
#define INITIAL_SIZE_SYM 465
#define INNER_SYM 466
#define INNOBASE_SYM 467
#define INOUT_SYM 468
#define INSENSITIVE_SYM 469
#define INSERT 470
#define INSERT_METHOD 471
#define INSTALL_SYM 472
#define INTERVAL_SYM 473
#define INTO 474
#define INT_SYM 475
#define INVOKER_SYM 476
#define IN_SYM 477
#define IO_SYM 478
#define IPC_SYM 479
#define IS 480
#define ISOLATION 481
#define ISSUER_SYM 482
#define ITERATE_SYM 483
#define JOIN_SYM 484
#define KEYS 485
#define KEY_BLOCK_SIZE 486
#define KEY_SYM 487
#define KILL_SYM 488
#define LANGUAGE_SYM 489
#define LAST_SYM 490
#define LE 491
#define LEADING 492
#define LEAVES 493
#define LEAVE_SYM 494
#define LEFT 495
#define LESS_SYM 496
#define LEVEL_SYM 497
#define LEX_HOSTNAME 498
#define LIKE 499
#define LIMIT 500
#define LINEAR_SYM 501
#define LINES 502
#define LINESTRING 503
#define LIST_SYM 504
#define LOAD 505
#define LOCAL_SYM 506
#define LOCATOR_SYM 507
#define LOCKS_SYM 508
#define LOCK_SYM 509
#define LOGFILE_SYM 510
#define LOGS_SYM 511
#define LONGBLOB 512
#define LONGTEXT 513
#define LONG_NUM 514
#define LONG_SYM 515
#define LOOP_SYM 516
#define LOW_PRIORITY 517
#define LT 518
#define MASTER_CONNECT_RETRY_SYM 519
#define MASTER_HOST_SYM 520
#define MASTER_LOG_FILE_SYM 521
#define MASTER_LOG_POS_SYM 522
#define MASTER_PASSWORD_SYM 523
#define MASTER_PORT_SYM 524
#define MASTER_SERVER_ID_SYM 525
#define MASTER_SSL_CAPATH_SYM 526
#define MASTER_SSL_CA_SYM 527
#define MASTER_SSL_CERT_SYM 528
#define MASTER_SSL_CIPHER_SYM 529
#define MASTER_SSL_KEY_SYM 530
#define MASTER_SSL_SYM 531
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 532
#define MASTER_SYM 533
#define MASTER_USER_SYM 534
#define MATCH 535
#define MAX_CONNECTIONS_PER_HOUR 536
#define MAX_QUERIES_PER_HOUR 537
#define MAX_ROWS 538
#define MAX_SIZE_SYM 539
#define MAX_SYM 540
#define MAX_UPDATES_PER_HOUR 541
#define MAX_USER_CONNECTIONS_SYM 542
#define MAX_VALUE_SYM 543
#define MEDIUMBLOB 544
#define MEDIUMINT 545
#define MEDIUMTEXT 546
#define MEDIUM_SYM 547
#define MEMORY_SYM 548
#define MERGE_SYM 549
#define MICROSECOND_SYM 550
#define MIGRATE_SYM 551
#define MINUTE_MICROSECOND_SYM 552
#define MINUTE_SECOND_SYM 553
#define MINUTE_SYM 554
#define MIN_ROWS 555
#define MIN_SYM 556
#define MODE_SYM 557
#define MODIFIES_SYM 558
#define MODIFY_SYM 559
#define MOD_SYM 560
#define MONTH_SYM 561
#define MULTILINESTRING 562
#define MULTIPOINT 563
#define MULTIPOLYGON 564
#define MUTEX_SYM 565
#define NAMES_SYM 566
#define NAME_SYM 567
#define NATIONAL_SYM 568
#define NATURAL 569
#define NCHAR_STRING 570
#define NCHAR_SYM 571
#define NDBCLUSTER_SYM 572
#define NE 573
#define NEG 574
#define NEW_SYM 575
#define NEXT_SYM 576
#define NODEGROUP_SYM 577
#define NONE_SYM 578
#define NOT2_SYM 579
#define NOT_SYM 580
#define NOW_SYM 581
#define NO_SYM 582
#define NO_WAIT_SYM 583
#define NO_WRITE_TO_BINLOG 584
#define NULL_SYM 585
#define NUM 586
#define NUMERIC_SYM 587
#define NVARCHAR_SYM 588
#define OFFSET_SYM 589
#define OLD_PASSWORD 590
#define ON 591
#define ONE_SHOT_SYM 592
#define ONE_SYM 593
#define OPEN_SYM 594
#define OPTIMIZE 595
#define OPTIONS_SYM 596
#define OPTION 597
#define OPTIONALLY 598
#define OR2_SYM 599
#define ORDER_SYM 600
#define OR_OR_SYM 601
#define OR_SYM 602
#define OUTER 603
#define OUTFILE 604
#define OUT_SYM 605
#define OWNER_SYM 606
#define PACK_KEYS_SYM 607
#define PAGE_SYM 608
#define PARAM_MARKER 609
#define PARSER_SYM 610
#define PARTIAL 611
#define PARTITIONING_SYM 612
#define PARTITIONS_SYM 613
#define PARTITION_SYM 614
#define PASSWORD 615
#define PHASE_SYM 616
#define PLUGINS_SYM 617
#define PLUGIN_SYM 618
#define POINT_SYM 619
#define POLYGON 620
#define PORT_SYM 621
#define POSITION_SYM 622
#define PRECISION 623
#define PREPARE_SYM 624
#define PRESERVE_SYM 625
#define PREV_SYM 626
#define PRIMARY_SYM 627
#define PRIVILEGES 628
#define PROCEDURE 629
#define PROCESS 630
#define PROCESSLIST_SYM 631
#define PROFILE_SYM 632
#define PROFILES_SYM 633
#define PURGE 634
#define QUARTER_SYM 635
#define QUERY_SYM 636
#define QUICK 637
#define RANGE_SYM 638
#define READS_SYM 639
#define READ_ONLY_SYM 640
#define READ_SYM 641
#define READ_WRITE_SYM 642
#define REAL 643
#define REBUILD_SYM 644
#define RECOVER_SYM 645
#define REDOFILE_SYM 646
#define REDO_BUFFER_SIZE_SYM 647
#define REDUNDANT_SYM 648
#define REFERENCES 649
#define REGEXP 650
#define RELAY_LOG_FILE_SYM 651
#define RELAY_LOG_POS_SYM 652
#define RELAY_THREAD 653
#define RELEASE_SYM 654
#define RELOAD 655
#define REMOVE_SYM 656
#define RENAME 657
#define REORGANIZE_SYM 658
#define REPAIR 659
#define REPEATABLE_SYM 660
#define REPEAT_SYM 661
#define REPLACE 662
#define REPLICATION 663
#define REQUIRE_SYM 664
#define RESET_SYM 665
#define RESOURCES 666
#define RESTORE_SYM 667
#define RESTRICT 668
#define RESUME_SYM 669
#define RETURNS_SYM 670
#define RETURN_SYM 671
#define REVOKE 672
#define RIGHT 673
#define ROLLBACK_SYM 674
#define ROLLUP_SYM 675
#define ROUTINE_SYM 676
#define ROWS_SYM 677
#define ROW_FORMAT_SYM 678
#define ROW_SYM 679
#define RTREE_SYM 680
#define SAVEPOINT_SYM 681
#define SCHEDULE_SYM 682
#define SECOND_MICROSECOND_SYM 683
#define SECOND_SYM 684
#define SECURITY_SYM 685
#define SELECT_SYM 686
#define SENSITIVE_SYM 687
#define SEPARATOR_SYM 688
#define SERIALIZABLE_SYM 689
#define SERIAL_SYM 690
#define SESSION_SYM 691
#define SERVER_SYM 692
#define SERVER_OPTIONS 693
#define SET 694
#define SET_VAR 695
#define SHARE_SYM 696
#define SHIFT_LEFT 697
#define SHIFT_RIGHT 698
#define SHOW 699
#define SHUTDOWN 700
#define SIGNED_SYM 701
#define SIMPLE_SYM 702
#define SLAVE 703
#define SMALLINT 704
#define SNAPSHOT_SYM 705
#define SOCKET_SYM 706
#define SONAME_SYM 707
#define SOUNDS_SYM 708
#define SOURCE_SYM 709
#define SPATIAL_SYM 710
#define SPECIFIC_SYM 711
#define SQLEXCEPTION_SYM 712
#define SQLSTATE_SYM 713
#define SQLWARNING_SYM 714
#define SQL_BIG_RESULT 715
#define SQL_BUFFER_RESULT 716
#define SQL_CACHE_SYM 717
#define SQL_CALC_FOUND_ROWS 718
#define SQL_NO_CACHE_SYM 719
#define SQL_SMALL_RESULT 720
#define SQL_SYM 721
#define SQL_THREAD 722
#define SSL_SYM 723
#define STARTING 724
#define STARTS_SYM 725
#define START_SYM 726
#define STATUS_SYM 727
#define STDDEV_SAMP_SYM 728
#define STD_SYM 729
#define STOP_SYM 730
#define STORAGE_SYM 731
#define STRAIGHT_JOIN 732
#define STRING_SYM 733
#define SUBDATE_SYM 734
#define SUBJECT_SYM 735
#define SUBPARTITIONS_SYM 736
#define SUBPARTITION_SYM 737
#define SUBSTRING 738
#define SUM_SYM 739
#define SUPER_SYM 740
#define SUSPEND_SYM 741
#define SWAPS_SYM 742
#define SWITCHES_SYM 743
#define SYSDATE 744
#define TABLES 745
#define TABLESPACE 746
#define TABLE_REF_PRIORITY 747
#define TABLE_SYM 748
#define TABLE_CHECKSUM_SYM 749
#define TEMPORARY 750
#define TEMPTABLE_SYM 751
#define TERMINATED 752
#define TEXT_STRING 753
#define TEXT_SYM 754
#define THAN_SYM 755
#define THEN_SYM 756
#define TIMESTAMP 757
#define TIMESTAMP_ADD 758
#define TIMESTAMP_DIFF 759
#define TIME_SYM 760
#define TINYBLOB 761
#define TINYINT 762
#define TINYTEXT 763
#define TO_SYM 764
#define TRAILING 765
#define TRANSACTION_SYM 766
#define TRIGGERS_SYM 767
#define TRIGGER_SYM 768
#define TRIM 769
#define TRUE_SYM 770
#define TRUNCATE_SYM 771
#define TYPES_SYM 772
#define TYPE_SYM 773
#define UDF_RETURNS_SYM 774
#define ULONGLONG_NUM 775
#define UNCOMMITTED_SYM 776
#define UNDEFINED_SYM 777
#define UNDERSCORE_CHARSET 778
#define UNDOFILE_SYM 779
#define UNDO_BUFFER_SIZE_SYM 780
#define UNDO_SYM 781
#define UNICODE_SYM 782
#define UNINSTALL_SYM 783
#define UNION_SYM 784
#define UNIQUE_SYM 785
#define UNKNOWN_SYM 786
#define UNLOCK_SYM 787
#define UNSIGNED 788
#define UNTIL_SYM 789
#define UPDATE_SYM 790
#define UPGRADE_SYM 791
#define USAGE 792
#define USER 793
#define USE_FRM 794
#define USE_SYM 795
#define USING 796
#define UTC_DATE_SYM 797
#define UTC_TIMESTAMP_SYM 798
#define UTC_TIME_SYM 799
#define VALUES 800
#define VALUE_SYM 801
#define VARBINARY 802
#define VARCHAR 803
#define VARIABLES 804
#define VARIANCE_SYM 805
#define VARYING 806
#define VAR_SAMP_SYM 807
#define VIEW_SYM 808
#define WAIT_SYM 809
#define WARNINGS 810
#define WEEK_SYM 811
#define WHEN_SYM 812
#define WHERE 813
#define WHILE_SYM 814
#define WITH 815
#define WORK_SYM 816
#define WRAPPER_SYM 817
#define WRITE_SYM 818
#define X509_SYM 819
#define XA_SYM 820
#define XOR 821
#define YEAR_MONTH_SYM 822
#define YEAR_SYM 823
#define ZEROFILL 824




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 214 of yacc.c  */
#line 468 "sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  struct st_lex *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;



/* Line 214 of yacc.c  */
#line 1749 "sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 264 of yacc.c  */
#line 513 "sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 264 of yacc.c  */
#line 1766 "sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  548
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   46832

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  589
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  827
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2364
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4036

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   824

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   582,     2,     2,     2,   576,   571,     2,
     579,   580,   574,   573,   581,   572,   587,   575,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   588,   585,
       2,     2,     2,     2,   586,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   577,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   583,   570,   584,   578,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   228,   232,   236,   240,   244,   245,   253,
     254,   267,   268,   275,   276,   280,   285,   290,   294,   297,
     308,   310,   314,   317,   320,   323,   326,   329,   332,   335,
     336,   349,   350,   357,   360,   361,   363,   367,   369,   370,
     373,   374,   377,   378,   380,   384,   389,   390,   393,   394,
     397,   399,   401,   403,   405,   407,   409,   411,   413,   415,
     417,   419,   421,   423,   424,   428,   430,   431,   434,   435,
     438,   441,   444,   447,   450,   454,   458,   460,   462,   464,
     467,   471,   475,   476,   481,   482,   486,   487,   489,   493,
     495,   496,   498,   502,   504,   505,   509,   510,   512,   516,
     518,   523,   524,   526,   528,   530,   531,   535,   538,   542,
     543,   547,   548,   554,   560,   561,   569,   575,   576,   579,
     581,   583,   585,   589,   591,   593,   597,   598,   600,   602,
     604,   606,   609,   611,   613,   617,   618,   621,   623,   625,
     627,   629,   631,   633,   635,   637,   639,   641,   643,   645,
     647,   648,   654,   655,   658,   659,   663,   664,   667,   670,
     673,   676,   677,   684,   687,   688,   691,   693,   695,   699,
     700,   701,   702,   710,   711,   714,   717,   719,   721,   722,
     723,   732,   733,   740,   742,   745,   747,   750,   751,   752,
     759,   760,   761,   768,   769,   772,   773,   779,   780,   782,
     783,   789,   790,   793,   794,   800,   805,   806,   807,   816,
     817,   825,   827,   829,   831,   833,   835,   838,   843,   849,
     850,   855,   860,   865,   869,   873,   876,   879,   880,   883,
     885,   888,   892,   894,   896,   898,   900,   902,   905,   909,
     911,   913,   915,   917,   919,   921,   923,   925,   927,   929,
     932,   936,   938,   940,   942,   944,   946,   948,   950,   953,
     957,   959,   961,   963,   965,   967,   969,   971,   973,   975,
     978,   982,   984,   986,   988,   991,   994,   997,   999,  1001,
    1003,  1005,  1008,  1012,  1016,  1020,  1024,  1028,  1032,  1036,
    1040,  1045,  1046,  1048,  1050,  1052,  1054,  1056,  1059,  1063,
    1066,  1071,  1077,  1078,  1084,  1085,  1086,  1092,  1093,  1101,
    1102,  1104,  1105,  1109,  1110,  1114,  1120,  1126,  1127,  1132,
    1133,  1137,  1138,  1142,  1143,  1145,  1146,  1148,  1150,  1154,
    1156,  1162,  1168,  1169,  1172,  1173,  1174,  1182,  1183,  1193,
    1195,  1199,  1201,  1203,  1204,  1207,  1208,  1212,  1214,  1218,
    1219,  1226,  1228,  1229,  1234,  1240,  1242,  1244,  1246,  1250,
    1254,  1256,  1260,  1262,  1264,  1265,  1269,  1271,  1275,  1276,
    1281,  1283,  1284,  1286,  1289,  1291,  1295,  1300,  1304,  1308,
    1312,  1317,  1322,  1326,  1327,  1328,  1335,  1336,  1338,  1339,
    1341,  1343,  1346,  1348,  1350,  1351,  1353,  1355,  1358,  1360,
    1361,  1365,  1366,  1368,  1370,  1373,  1375,  1378,  1382,  1386,
    1390,  1394,  1398,  1402,  1406,  1410,  1414,  1418,  1422,  1426,
    1430,  1434,  1438,  1444,  1446,  1448,  1452,  1457,  1462,  1465,
    1468,  1471,  1475,  1479,  1484,  1489,  1491,  1493,  1495,  1497,
    1499,  1501,  1503,  1505,  1507,  1509,  1511,  1513,  1516,  1518,
    1520,  1522,  1524,  1526,  1530,  1532,  1534,  1537,  1540,  1548,
    1557,  1566,  1569,  1572,  1573,  1575,  1578,  1579,  1581,  1584,
    1585,  1590,  1594,  1598,  1602,  1604,  1607,  1609,  1611,  1615,
    1618,  1622,  1625,  1628,  1630,  1634,  1638,  1641,  1645,  1647,
    1649,  1652,  1654,  1656,  1659,  1661,  1663,  1665,  1668,  1672,
    1675,  1679,  1682,  1685,  1689,  1693,  1697,  1698,  1705,  1706,
    1713,  1716,  1718,  1720,  1722,  1724,  1726,  1728,  1730,  1732,
    1734,  1736,  1738,  1741,  1744,  1746,  1749,  1751,  1754,  1758,
    1761,  1763,  1765,  1767,  1769,  1771,  1773,  1775,  1778,  1779,
    1781,  1783,  1789,  1790,  1792,  1795,  1797,  1799,  1801,  1803,
    1807,  1811,  1815,  1819,  1820,  1822,  1823,  1825,  1826,  1828,
    1831,  1833,  1835,  1838,  1841,  1846,  1848,  1852,  1855,  1857,
    1860,  1863,  1866,  1869,  1871,  1874,  1876,  1878,  1880,  1882,
    1884,  1885,  1888,  1890,  1892,  1894,  1896,  1898,  1899,  1902,
    1904,  1906,  1907,  1909,  1910,  1913,  1915,  1918,  1922,  1925,
    1926,  1928,  1929,  1931,  1933,  1936,  1937,  1939,  1940,  1945,
    1947,  1952,  1956,  1958,  1959,  1961,  1964,  1966,  1970,  1974,
    1977,  1980,  1983,  1985,  1987,  1990,  1993,  1996,  1998,  2001,
    2004,  2007,  2010,  2012,  2014,  2015,  2017,  2019,  2021,  2023,
    2024,  2026,  2028,  2030,  2031,  2033,  2036,  2037,  2039,  2041,
    2044,  2047,  2050,  2052,  2056,  2060,  2062,  2064,  2066,  2071,
    2074,  2076,  2081,  2082,  2084,  2085,  2088,  2090,  2094,  2095,
    2102,  2103,  2109,  2117,  2118,  2124,  2125,  2131,  2132,  2138,
    2139,  2144,  2145,  2156,  2160,  2165,  2169,  2173,  2181,  2182,
    2186,  2188,  2193,  2194,  2198,  2199,  2202,  2203,  2205,  2206,
    2209,  2212,  2215,  2218,  2220,  2222,  2224,  2228,  2233,  2234,
    2241,  2246,  2247,  2253,  2254,  2261,  2266,  2268,  2271,  2273,
    2275,  2276,  2282,  2283,  2287,  2290,  2291,  2297,  2298,  2299,
    2306,  2308,  2312,  2314,  2316,  2320,  2323,  2327,  2330,  2335,
    2336,  2343,  2344,  2345,  2354,  2359,  2364,  2368,  2372,  2375,
    2378,  2385,  2391,  2395,  2401,  2403,  2405,  2407,  2408,  2410,
    2411,  2413,  2414,  2416,  2418,  2419,  2422,  2424,  2425,  2427,
    2429,  2431,  2432,  2438,  2442,  2443,  2449,  2453,  2457,  2458,
    2462,  2463,  2466,  2468,  2472,  2473,  2475,  2477,  2478,  2481,
    2483,  2487,  2488,  2495,  2496,  2503,  2504,  2510,  2511,  2513,
    2515,  2516,  2523,  2524,  2526,  2528,  2531,  2533,  2535,  2537,
    2538,  2544,  2547,  2548,  2554,  2555,  2557,  2559,  2562,  2564,
    2566,  2568,  2570,  2572,  2575,  2576,  2582,  2583,  2585,  2587,
    2588,  2593,  2598,  2602,  2608,  2610,  2614,  2618,  2624,  2626,
    2630,  2633,  2635,  2637,  2638,  2645,  2647,  2651,  2655,  2656,
    2659,  2660,  2665,  2666,  2669,  2671,  2674,  2679,  2682,  2686,
    2687,  2691,  2692,  2693,  2700,  2703,  2705,  2707,  2710,  2713,
    2722,  2727,  2728,  2730,  2733,  2735,  2737,  2739,  2741,  2743,
    2745,  2747,  2749,  2751,  2753,  2755,  2756,  2759,  2764,  2768,
    2770,  2772,  2777,  2778,  2779,  2781,  2783,  2784,  2787,  2790,
    2792,  2794,  2795,  2798,  2802,  2806,  2810,  2813,  2817,  2822,
    2826,  2831,  2835,  2840,  2842,  2846,  2851,  2855,  2859,  2866,
    2868,  2874,  2881,  2887,  2895,  2902,  2911,  2917,  2924,  2929,
    2934,  2940,  2944,  2949,  2951,  2955,  2959,  2963,  2967,  2971,
    2975,  2981,  2987,  2991,  2995,  2999,  3003,  3007,  3011,  3013,
    3015,  3017,  3019,  3021,  3023,  3025,  3027,  3029,  3031,  3033,
    3035,  3037,  3039,  3041,  3043,  3045,  3047,  3049,  3051,  3053,
    3055,  3059,  3061,  3063,  3065,  3067,  3071,  3074,  3077,  3080,
    3083,  3087,  3091,  3097,  3104,  3109,  3114,  3122,  3125,  3132,
    3138,  3145,  3152,  3157,  3162,  3168,  3173,  3180,  3183,  3188,
    3193,  3198,  3209,  3216,  3225,  3232,  3237,  3242,  3249,  3254,
    3259,  3264,  3271,  3276,  3284,  3292,  3300,  3307,  3314,  3321,
    3328,  3332,  3337,  3344,  3353,  3356,  3359,  3364,  3373,  3382,
    3389,  3396,  3399,  3404,  3411,  3418,  3427,  3436,  3443,  3452,
    3459,  3462,  3467,  3476,  3485,  3488,  3491,  3494,  3499,  3504,
    3509,  3514,  3518,  3527,  3532,  3539,  3544,  3549,  3554,  3561,
    3570,  3577,  3582,  3589,  3591,  3598,  3603,  3608,  3613,  3618,
    3623,  3630,  3635,  3636,  3642,  3649,  3652,  3656,  3657,  3662,
    3663,  3667,  3668,  3670,  3672,  3676,  3681,  3686,  3692,  3697,
    3702,  3707,  3713,  3718,  3719,  3720,  3728,  3733,  3739,  3744,
    3750,  3755,  3760,  3765,  3770,  3775,  3781,  3782,  3791,  3792,
    3796,  3800,  3802,  3807,  3808,  3810,  3811,  3814,  3815,  3817,
    3818,  3822,  3825,  3829,  3832,  3834,  3837,  3839,  3842,  3844,
    3846,  3848,  3851,  3852,  3854,  3856,  3860,  3862,  3866,  3868,
    3872,  3873,  3875,  3876,  3879,  3884,  3890,  3892,  3894,  3896,
    3898,  3903,  3905,  3909,  3913,  3917,  3918,  3925,  3926,  3933,
    3934,  3943,  3948,  3949,  3958,  3959,  3970,  3977,  3978,  3987,
    3988,  3999,  4006,  4008,  4011,  4014,  4015,  4020,  4024,  4031,
    4032,  4036,  4037,  4038,  4044,  4045,  4047,  4048,  4050,  4051,
    4054,  4058,  4062,  4064,  4066,  4067,  4075,  4076,  4084,  4086,
    4089,  4090,  4091,  4094,  4095,  4098,  4099,  4101,  4103,  4105,
    4107,  4111,  4113,  4117,  4119,  4121,  4123,  4125,  4127,  4129,
    4131,  4133,  4135,  4137,  4139,  4141,  4143,  4145,  4147,  4149,
    4151,  4153,  4155,  4157,  4159,  4161,  4163,  4165,  4167,  4169,
    4171,  4172,  4174,  4176,  4177,  4180,  4181,  4183,  4184,  4185,
    4189,  4190,  4191,  4195,  4198,  4199,  4200,  4205,  4210,  4213,
    4214,  4217,  4220,  4224,  4228,  4230,  4233,  4234,  4236,  4237,
    4242,  4247,  4250,  4251,  4253,  4255,  4256,  4258,  4259,  4261,
    4264,  4266,  4270,  4274,  4276,  4278,  4280,  4282,  4283,  4286,
    4288,  4290,  4292,  4294,  4296,  4298,  4300,  4302,  4304,  4306,
    4308,  4310,  4312,  4314,  4316,  4318,  4320,  4322,  4324,  4326,
    4328,  4330,  4332,  4333,  4334,  4341,  4342,  4344,  4348,  4350,
    4354,  4355,  4358,  4362,  4364,  4367,  4369,  4370,  4374,  4375,
    4376,  4384,  4387,  4389,  4390,  4394,  4401,  4402,  4409,  4414,
    4421,  4426,  4431,  4436,  4442,  4447,  4452,  4458,  4465,  4470,
    4472,  4476,  4478,  4480,  4484,  4486,  4487,  4490,  4491,  4493,
    4494,  4495,  4504,  4505,  4506,  4513,  4514,  4516,  4518,  4520,
    4522,  4524,  4527,  4529,  4531,  4533,  4537,  4542,  4543,  4547,
    4551,  4553,  4556,  4559,  4560,  4564,  4565,  4571,  4575,  4577,
    4581,  4583,  4587,  4589,  4591,  4592,  4594,  4595,  4600,  4601,
    4603,  4607,  4609,  4611,  4613,  4614,  4615,  4622,  4623,  4624,
    4636,  4640,  4642,  4646,  4650,  4652,  4656,  4657,  4659,  4660,
    4665,  4666,  4673,  4674,  4680,  4681,  4688,  4690,  4694,  4698,
    4704,  4705,  4708,  4709,  4712,  4714,  4716,  4718,  4722,  4723,
    4725,  4726,  4728,  4730,  4734,  4736,  4738,  4741,  4744,  4747,
    4749,  4751,  4753,  4755,  4756,  4760,  4761,  4765,  4768,  4773,
    4778,  4782,  4787,  4792,  4795,  4797,  4801,  4805,  4812,  4829,
    4832,  4835,  4836,  4843,  4849,  4852,  4855,  4858,  4860,  4862,
    4864,  4870,  4876,  4879,  4882,  4884,  4889,  4893,  4896,  4899,
    4902,  4906,  4909,  4912,  4914,  4918,  4923,  4927,  4931,  4934,
    4937,  4941,  4945,  4949,  4953,  4957,  4961,  4965,  4969,  4971,
    4973,  4975,  4977,  4979,  4980,  4982,  4983,  4986,  4987,  4989,
    4991,  4993,  4994,  4997,  4998,  5001,  5002,  5005,  5008,  5009,
    5014,  5015,  5020,  5022,  5024,  5025,  5027,  5029,  5030,  5032,
    5034,  5035,  5040,  5044,  5046,  5047,  5051,  5056,  5059,  5061,
    5063,  5065,  5067,  5069,  5071,  5073,  5075,  5076,  5078,  5079,
    5083,  5087,  5089,  5091,  5093,  5096,  5097,  5101,  5105,  5108,
    5111,  5115,  5116,  5118,  5120,  5123,  5124,  5129,  5135,  5136,
    5137,  5138,  5139,  5158,  5161,  5162,  5164,  5165,  5167,  5169,
    5170,  5172,  5174,  5175,  5178,  5181,  5183,  5187,  5192,  5196,
    5200,  5201,  5204,  5207,  5209,  5213,  5217,  5218,  5222,  5223,
    5227,  5230,  5234,  5236,  5238,  5241,  5242,  5245,  5247,  5249,
    5252,  5255,  5257,  5259,  5261,  5263,  5265,  5268,  5271,  5273,
    5275,  5277,  5279,  5281,  5283,  5285,  5288,  5291,  5294,  5297,
    5300,  5302,  5304,  5306,  5308,  5310,  5312,  5314,  5318,  5324,
    5326,  5328,  5330,  5332,  5334,  5338,  5343,  5349,  5351,  5357,
    5361,  5364,  5366,  5370,  5373,  5375,  5377,  5379,  5381,  5383,
    5385,  5387,  5389,  5391,  5393,  5395,  5397,  5399,  5401,  5405,
    5408,  5410,  5412,  5414,  5416,  5418,  5420,  5422,  5424,  5426,
    5428,  5430,  5432,  5434,  5436,  5438,  5440,  5442,  5444,  5446,
    5448,  5450,  5452,  5454,  5456,  5458,  5460,  5462,  5464,  5466,
    5468,  5470,  5472,  5474,  5476,  5478,  5480,  5482,  5484,  5486,
    5488,  5490,  5492,  5494,  5496,  5498,  5500,  5502,  5504,  5506,
    5508,  5510,  5512,  5514,  5516,  5518,  5520,  5522,  5524,  5526,
    5528,  5530,  5532,  5534,  5536,  5538,  5540,  5542,  5544,  5546,
    5548,  5550,  5552,  5554,  5556,  5558,  5560,  5562,  5564,  5566,
    5568,  5570,  5572,  5574,  5576,  5578,  5580,  5582,  5584,  5586,
    5588,  5590,  5592,  5594,  5596,  5598,  5600,  5602,  5604,  5606,
    5608,  5610,  5612,  5614,  5616,  5618,  5620,  5622,  5624,  5626,
    5628,  5630,  5632,  5634,  5636,  5638,  5640,  5642,  5644,  5646,
    5648,  5650,  5652,  5654,  5656,  5658,  5660,  5662,  5664,  5666,
    5668,  5670,  5672,  5674,  5676,  5678,  5680,  5682,  5684,  5686,
    5688,  5690,  5692,  5694,  5696,  5698,  5700,  5702,  5704,  5706,
    5708,  5710,  5712,  5714,  5716,  5718,  5720,  5722,  5724,  5726,
    5728,  5730,  5732,  5734,  5736,  5738,  5740,  5742,  5744,  5746,
    5748,  5750,  5752,  5754,  5756,  5758,  5760,  5762,  5764,  5766,
    5768,  5770,  5772,  5774,  5776,  5778,  5780,  5782,  5784,  5786,
    5788,  5790,  5792,  5794,  5796,  5798,  5800,  5802,  5804,  5806,
    5808,  5810,  5812,  5814,  5816,  5818,  5820,  5822,  5824,  5826,
    5828,  5830,  5832,  5834,  5836,  5838,  5840,  5842,  5844,  5846,
    5848,  5850,  5852,  5854,  5856,  5858,  5860,  5862,  5864,  5866,
    5868,  5870,  5872,  5874,  5876,  5878,  5880,  5882,  5884,  5886,
    5888,  5890,  5892,  5894,  5896,  5898,  5900,  5902,  5904,  5906,
    5908,  5910,  5912,  5914,  5916,  5918,  5920,  5922,  5924,  5926,
    5928,  5930,  5932,  5934,  5936,  5938,  5940,  5942,  5944,  5946,
    5948,  5950,  5952,  5954,  5956,  5958,  5960,  5962,  5964,  5966,
    5968,  5970,  5972,  5974,  5976,  5978,  5980,  5982,  5984,  5986,
    5988,  5990,  5992,  5994,  5996,  5998,  6000,  6002,  6004,  6006,
    6008,  6010,  6012,  6014,  6016,  6018,  6020,  6022,  6024,  6026,
    6028,  6029,  6034,  6035,  6037,  6039,  6043,  6044,  6047,  6049,
    6051,  6053,  6055,  6056,  6058,  6059,  6061,  6063,  6065,  6066,
    6069,  6072,  6075,  6077,  6080,  6085,  6091,  6096,  6103,  6106,
    6110,  6114,  6118,  6124,  6126,  6130,  6134,  6137,  6140,  6143,
    6145,  6147,  6152,  6157,  6159,  6161,  6163,  6165,  6167,  6168,
    6173,  6175,  6177,  6179,  6183,  6187,  6189,  6191,  6194,  6197,
    6198,  6202,  6207,  6211,  6212,  6220,  6222,  6225,  6227,  6229,
    6231,  6233,  6235,  6237,  6238,  6244,  6246,  6248,  6250,  6252,
    6254,  6258,  6265,  6272,  6279,  6287,  6291,  6300,  6309,  6318,
    6319,  6321,  6323,  6326,  6327,  6329,  6331,  6335,  6336,  6340,
    6341,  6345,  6346,  6350,  6351,  6355,  6357,  6359,  6361,  6363,
    6365,  6367,  6369,  6371,  6373,  6375,  6377,  6380,  6383,  6385,
    6389,  6392,  6395,  6398,  6401,  6404,  6407,  6410,  6413,  6415,
    6417,  6418,  6420,  6424,  6426,  6429,  6432,  6435,  6437,  6441,
    6445,  6447,  6449,  6453,  6455,  6459,  6464,  6470,  6472,  6473,
    6477,  6481,  6483,  6485,  6486,  6489,  6492,  6495,  6498,  6499,
    6502,  6505,  6507,  6510,  6513,  6516,  6519,  6522,  6523,  6527,
    6528,  6530,  6531,  6535,  6538,  6539,  6541,  6544,  6545,  6547,
    6552,  6557,  6563,  6566,  6570,  6571,  6573,  6574,  6579,  6580,
    6582,  6584,  6585,  6588,  6591,  6593,  6594,  6596,  6598,  6599,
    6605,  6612,  6613,  6614,  6617,  6620,  6624,  6626,  6628,  6630,
    6632,  6634,  6636,  6638,  6640,  6642,  6644,  6646,  6648,  6650,
    6651,  6655,  6657,  6660,  6662,  6665,  6669,  6673,  6677,  6678,
    6682,  6686,  6687,  6695,  6696,  6700,  6702,  6706,  6707,  6711,
    6714,  6719,  6720,  6724,  6729,  6734,  6735,  6736,  6737,  6754,
    6763,  6771,  6772,  6773,  6774,  6775,  6776,  6792,  6793,  6794,
    6795,  6796,  6809,  6814,  6819,  6823,  6828,  6832,  6835,  6837,
    6841,  6847,  6849,  6851,  6852,  6854,  6856,  6857,  6860,  6861,
    6862,  6866,  6867,  6870,  6876
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     590,     0,    -1,   141,    -1,    -1,   593,   591,   585,   592,
      -1,   593,   141,    -1,    -1,   141,    -1,   594,    -1,  1350,
      -1,   907,    -1,   968,    -1,   958,    -1,   970,    -1,   639,
      -1,   606,    -1,   971,    -1,   960,    -1,  1356,    -1,   611,
      -1,   595,    -1,  1192,    -1,  1222,    -1,  1146,    -1,  1148,
      -1,   599,    -1,  1228,    -1,  1325,    -1,  1316,    -1,   604,
      -1,  1156,    -1,  1414,    -1,  1242,    -1,  1245,    -1,  1308,
      -1,   976,    -1,   984,    -1,   771,    -1,   988,    -1,   597,
      -1,  1238,    -1,  1359,    -1,   979,    -1,   963,    -1,  1159,
      -1,  1234,    -1,   956,    -1,  1323,    -1,  1357,    -1,  1358,
      -1,   996,    -1,  1291,    -1,  1209,    -1,   945,    -1,   948,
      -1,  1203,    -1,  1415,    -1,  1314,    -1,  1184,    -1,  1244,
      -1,  1406,    -1,   596,   369,  1285,    -1,   108,    -1,   129,
      -1,   369,  1285,   175,   598,    -1,  1282,    -1,   586,  1287,
      -1,    -1,   153,  1285,   600,   601,    -1,    -1,   541,   602,
      -1,   602,   581,   603,    -1,   603,    -1,   586,  1287,    -1,
      -1,   192,   605,  1287,    -1,    -1,    55,   278,   509,   607,
     608,    -1,   609,    -1,   608,   581,   609,    -1,   265,   145,
    1282,    -1,   279,   145,  1282,    -1,   268,   145,  1282,    -1,
     269,   145,  1126,    -1,   264,   145,  1126,    -1,   276,   145,
    1126,    -1,   272,   145,  1282,    -1,   271,   145,  1282,    -1,
     273,   145,  1282,    -1,   274,   145,  1282,    -1,   275,   145,
    1282,    -1,   277,   145,  1126,    -1,   610,    -1,   266,   145,
    1282,    -1,   267,   145,  1128,    -1,   396,   145,  1282,    -1,
     397,   145,  1126,    -1,    -1,    88,   819,   493,   822,  1279,
     612,   762,    -1,    -1,    88,   894,   208,  1285,   896,   336,
    1279,   613,   579,   902,   580,   897,    -1,    -1,    88,    95,
     822,  1285,   614,   816,    -1,    -1,    88,   615,  1372,    -1,
      88,   538,   632,  1341,    -1,    88,   255,   186,   725,    -1,
      88,   491,   722,    -1,    88,   616,    -1,   437,  1287,   171,
      98,   562,  1287,   341,   579,   617,   580,    -1,   618,    -1,
     617,   581,   618,    -1,   538,  1282,    -1,   195,  1282,    -1,
      95,  1282,    -1,   351,  1282,    -1,   360,  1282,    -1,   451,
    1282,    -1,   366,  1126,    -1,    -1,   151,   822,   633,   620,
     336,   427,   621,   626,   623,   628,   128,   629,    -1,    -1,
     152,  1017,  1097,   622,   624,   625,    -1,    22,  1017,    -1,
      -1,   137,    -1,   122,   336,   448,    -1,   122,    -1,    -1,
     470,  1017,    -1,    -1,   140,  1017,    -1,    -1,   627,    -1,
     336,    74,   370,    -1,   336,    74,   325,   370,    -1,    -1,
      70,  1282,    -1,    -1,   630,   631,    -1,   671,    -1,   673,
      -1,   669,    -1,   690,    -1,   708,    -1,   710,    -1,   705,
      -1,   675,    -1,   677,    -1,   678,    -1,   679,    -1,   680,
      -1,   682,    -1,    -1,  1285,   587,  1285,    -1,  1285,    -1,
      -1,   634,   636,    -1,    -1,   635,   637,    -1,    70,  1282,
      -1,   234,   466,    -1,   327,   466,    -1,    81,   466,    -1,
     384,   466,    98,    -1,   303,   466,    98,    -1,   638,    -1,
     636,    -1,   120,    -1,  1023,   120,    -1,   466,   430,   113,
      -1,   466,   430,   221,    -1,    -1,    49,   633,   640,   641,
      -1,    -1,   579,   642,   580,    -1,    -1,   643,    -1,   643,
     581,  1017,    -1,  1017,    -1,    -1,   645,    -1,   645,   581,
     647,    -1,   647,    -1,    -1,  1285,   646,   845,    -1,    -1,
     649,    -1,   649,   581,   650,    -1,   650,    -1,   651,   646,
    1285,   845,    -1,    -1,   222,    -1,   350,    -1,   213,    -1,
      -1,   652,   668,   585,    -1,   668,   585,    -1,   653,   668,
     585,    -1,    -1,   654,   655,   585,    -1,    -1,   111,   666,
     656,   845,   667,    -1,   111,  1285,    77,   172,   663,    -1,
      -1,   111,   660,   189,   172,   657,   661,   668,    -1,   111,
    1285,    93,   172,   658,    -1,    -1,   659,   996,    -1,   155,
      -1,    83,    -1,   662,    -1,   661,   581,   662,    -1,   665,
      -1,  1126,    -1,   458,   664,  1283,    -1,    -1,   546,    -1,
     663,    -1,  1285,    -1,   459,    -1,  1023,   173,    -1,   457,
      -1,  1285,    -1,   666,   581,  1285,    -1,    -1,   112,  1017,
      -1,   671,    -1,   673,    -1,   669,    -1,   690,    -1,   708,
      -1,   710,    -1,   705,    -1,   675,    -1,   677,    -1,   678,
      -1,   679,    -1,   680,    -1,   682,    -1,    -1,   204,   670,
     685,   139,   204,    -1,    -1,   672,   594,    -1,    -1,   416,
     674,  1017,    -1,    -1,   676,   714,    -1,   239,  1286,    -1,
     228,  1286,    -1,   339,  1285,    -1,    -1,   163,   683,  1285,
     219,   681,   684,    -1,    63,  1285,    -1,    -1,   321,   175,
      -1,   175,    -1,  1285,    -1,   684,   581,  1285,    -1,    -1,
      -1,    -1,   686,  1017,   501,   687,   653,   688,   689,    -1,
      -1,   136,   685,    -1,   135,   653,    -1,   691,    -1,   694,
      -1,    -1,    -1,    52,   692,  1017,   693,   696,   704,   139,
      52,    -1,    -1,    52,   695,   697,   704,   139,    52,    -1,
     698,    -1,   696,   698,    -1,   701,    -1,   697,   701,    -1,
      -1,    -1,   557,   699,  1017,   700,   501,   653,    -1,    -1,
      -1,   557,   702,  1017,   703,   501,   653,    -1,    -1,   135,
     653,    -1,    -1,  1286,   588,   706,   714,   707,    -1,    -1,
    1286,    -1,    -1,  1286,   588,   709,   712,   707,    -1,    -1,
     711,   712,    -1,    -1,    30,   713,   654,   652,   139,    -1,
     261,   653,   139,   261,    -1,    -1,    -1,   559,   715,  1017,
     128,   716,   653,   139,   559,    -1,    -1,   406,   653,   534,
     717,  1017,   139,   406,    -1,    29,    -1,     8,    -1,   215,
      -1,   535,    -1,   116,    -1,   747,   749,    -1,   747,    55,
     744,   728,    -1,   747,     6,   744,   723,   732,    -1,    -1,
     540,   255,   186,  1285,    -1,   747,     6,   744,   735,    -1,
     747,   129,   744,   735,    -1,   748,   727,   738,    -1,   748,
     727,   741,    -1,     6,   745,    -1,     6,   746,    -1,    -1,
     729,   730,    -1,   731,    -1,   730,   731,    -1,   730,   581,
     731,    -1,   750,    -1,   751,    -1,   752,    -1,   733,    -1,
     734,    -1,   733,   734,    -1,   733,   581,   734,    -1,   750,
      -1,   751,    -1,   752,    -1,   753,    -1,   756,    -1,   758,
      -1,   760,    -1,   757,    -1,   736,    -1,   737,    -1,   736,
     737,    -1,   736,   581,   737,    -1,   750,    -1,   751,    -1,
     752,    -1,   758,    -1,   760,    -1,   739,    -1,   740,    -1,
     739,   740,    -1,   739,   581,   740,    -1,   750,    -1,   754,
      -1,   755,    -1,   756,    -1,   758,    -1,   760,    -1,   757,
      -1,   742,    -1,   743,    -1,   742,   743,    -1,   742,   581,
     743,    -1,   750,    -1,   758,    -1,   760,    -1,    97,  1282,
      -1,   524,  1282,    -1,   391,  1282,    -1,  1285,    -1,  1285,
      -1,   385,    -1,   387,    -1,   325,     4,    -1,   210,  1176,
     761,    -1,    24,  1176,   761,    -1,   284,  1176,   761,    -1,
     158,  1176,   761,    -1,   525,  1176,   761,    -1,   392,  1176,
     761,    -1,   322,  1176,  1127,    -1,    70,  1176,  1282,    -1,
    1215,   143,  1176,   829,    -1,    -1,   760,    -1,   554,    -1,
     328,    -1,  1127,    -1,   201,    -1,   579,   763,    -1,   823,
     768,   765,    -1,   244,  1279,    -1,   579,   244,  1279,   580,
      -1,   835,   580,   823,   768,   765,    -1,    -1,   768,   812,
     580,   764,  1363,    -1,    -1,    -1,  1254,   815,   812,   766,
    1360,    -1,    -1,  1254,   815,   579,   812,   580,   767,  1363,
      -1,    -1,   769,    -1,    -1,   359,   770,   773,    -1,    -1,
     359,   772,   773,    -1,    46,   774,   784,   785,   792,    -1,
     778,   232,   579,   779,   580,    -1,    -1,   778,   190,   775,
     782,    -1,    -1,   383,   776,   782,    -1,    -1,   249,   777,
     782,    -1,    -1,   246,    -1,    -1,   780,    -1,   781,    -1,
     780,   581,   781,    -1,  1285,    -1,   579,  1012,   790,  1013,
     580,    -1,   579,  1012,   790,  1013,   580,    -1,    -1,   358,
    1127,    -1,    -1,    -1,   482,    46,   778,   190,   783,   786,
     791,    -1,    -1,   482,    46,   778,   232,   579,   788,   580,
     787,   791,    -1,   789,    -1,   788,   581,   789,    -1,  1285,
      -1,  1020,    -1,    -1,   481,  1127,    -1,    -1,   579,   793,
     580,    -1,   794,    -1,   793,   581,   794,    -1,    -1,   359,
     795,   796,   797,   809,   804,    -1,  1285,    -1,    -1,   545,
     241,   500,   798,    -1,   545,   222,   579,   801,   580,    -1,
     799,    -1,   800,    -1,   288,    -1,   579,   288,   580,    -1,
     579,   803,   580,    -1,   802,    -1,   801,   581,   802,    -1,
     803,    -1,  1020,    -1,    -1,   579,   805,   580,    -1,   806,
      -1,   805,   581,   806,    -1,    -1,   482,   807,   808,   809,
      -1,  1287,    -1,    -1,   810,    -1,   810,   811,    -1,   811,
      -1,   491,  1176,  1287,    -1,  1215,   143,  1176,   829,    -1,
     322,  1176,  1127,    -1,   283,  1176,  1129,    -1,   300,  1176,
    1129,    -1,    98,   121,  1176,  1282,    -1,   208,   121,  1176,
    1282,    -1,    70,  1176,  1282,    -1,    -1,    -1,   431,   813,
    1006,  1010,   814,   833,    -1,    -1,    18,    -1,    -1,   817,
      -1,   818,    -1,   817,   818,    -1,   828,    -1,   827,    -1,
      -1,   820,    -1,   821,    -1,   821,   820,    -1,   495,    -1,
      -1,   204,  1023,   154,    -1,    -1,   825,    -1,   826,    -1,
     826,   824,    -1,   826,    -1,   826,   825,    -1,   826,   581,
     825,    -1,   143,  1176,   829,    -1,   518,  1176,   829,    -1,
     283,  1176,  1128,    -1,   300,  1176,  1128,    -1,    26,  1176,
    1126,    -1,   360,  1176,  1282,    -1,    70,  1176,  1282,    -1,
      25,  1176,  1128,    -1,   352,  1176,  1126,    -1,   352,  1176,
     112,    -1,    59,  1176,  1126,    -1,   494,  1176,  1126,    -1,
     115,  1176,  1126,    -1,   423,  1176,   831,    -1,   529,  1176,
     579,  1233,   580,    -1,   827,    -1,   828,    -1,   216,  1176,
     832,    -1,    98,   121,  1176,  1282,    -1,   208,   121,  1176,
    1282,    -1,   491,  1285,    -1,   476,   124,    -1,   476,   293,
      -1,    78,  1176,  1282,    -1,   231,  1176,  1126,    -1,   876,
     867,  1176,   869,    -1,   876,    66,  1176,   875,    -1,  1287,
      -1,  1287,    -1,   112,    -1,   166,    -1,   133,    -1,    75,
      -1,   393,    -1,    73,    -1,   327,    -1,   165,    -1,   235,
      -1,  1121,    -1,  1005,  1009,    -1,   478,    -1,   388,    -1,
     110,    -1,   220,    -1,   836,    -1,   835,   581,   836,    -1,
     837,    -1,   838,    -1,   843,   839,    -1,   843,   881,    -1,
     889,   904,   896,   579,   902,   580,   897,    -1,   841,   890,
     904,   896,   579,   902,   580,   897,    -1,   841,   171,   232,
     904,   579,   902,   580,   881,    -1,   842,   839,    -1,   841,
     840,    -1,    -1,   840,    -1,    60,  1017,    -1,    -1,   842,
      -1,    80,   904,    -1,    -1,  1278,   844,   845,   863,    -1,
     853,   861,   857,    -1,   854,   862,   857,    -1,   168,   855,
     857,    -1,    38,    -1,    38,   860,    -1,    43,    -1,    42,
      -1,   849,   860,   877,    -1,   849,   877,    -1,   850,   860,
     878,    -1,   850,   878,    -1,    33,   860,    -1,    33,    -1,
     851,   860,   877,    -1,   852,   860,   878,    -1,   547,   860,
      -1,   568,   861,   857,    -1,   102,    -1,   505,    -1,   502,
     861,    -1,    99,    -1,   506,    -1,    40,   861,    -1,   848,
      -1,   289,    -1,   257,    -1,   260,   547,    -1,   260,   851,
     877,    -1,   508,   877,    -1,   499,   861,   877,    -1,   291,
     877,    -1,   258,   877,    -1,   110,   855,   857,    -1,   332,
     855,   857,    -1,   166,   855,   857,    -1,    -1,   144,   846,
     579,   906,   580,   877,    -1,    -1,   439,   847,   579,   906,
     580,   877,    -1,   260,   877,    -1,   435,    -1,   181,    -1,
     180,    -1,   364,    -1,   308,    -1,   248,    -1,   307,    -1,
     365,    -1,   309,    -1,    58,    -1,   316,    -1,   313,    58,
      -1,   849,   551,    -1,   548,    -1,   313,   548,    -1,   333,
      -1,   316,   548,    -1,   313,    58,   551,    -1,   316,   551,
      -1,   220,    -1,   507,    -1,   449,    -1,   290,    -1,    32,
      -1,   388,    -1,   127,    -1,   127,   368,    -1,    -1,   860,
      -1,   856,    -1,   579,   331,   581,   331,   580,    -1,    -1,
     858,    -1,   858,   859,    -1,   859,    -1,   446,    -1,   533,
      -1,   569,    -1,   579,   259,   580,    -1,   579,   520,   580,
      -1,   579,   109,   580,    -1,   579,   331,   580,    -1,    -1,
     860,    -1,    -1,   856,    -1,    -1,   864,    -1,   864,   865,
      -1,   865,    -1,   330,    -1,  1023,   330,    -1,   112,   866,
      -1,   336,   535,   326,  1016,    -1,    25,    -1,   435,   112,
     546,    -1,   880,   232,    -1,   530,    -1,   530,   232,    -1,
      70,  1282,    -1,    66,   873,    -1,   326,  1016,    -1,  1269,
      -1,    58,   439,    -1,    57,    -1,  1287,    -1,    33,    -1,
     868,    -1,   112,    -1,    -1,   867,   869,    -1,  1287,    -1,
      33,    -1,   871,    -1,   112,    -1,  1287,    -1,    -1,    66,
     875,    -1,   873,    -1,   112,    -1,    -1,   112,    -1,    -1,
      20,   878,    -1,    47,    -1,   527,   878,    -1,   867,   868,
     878,    -1,    33,   879,    -1,    -1,    33,    -1,    -1,    20,
      -1,   527,    -1,   867,   868,    -1,    -1,   372,    -1,    -1,
     394,  1279,   882,   883,    -1,   885,    -1,   579,   884,   580,
     885,    -1,   884,   581,  1285,    -1,  1285,    -1,    -1,   886,
      -1,   886,   887,    -1,   887,    -1,   336,   116,   888,    -1,
     336,   535,   888,    -1,   280,   176,    -1,   280,   356,    -1,
     280,   447,    -1,   413,    -1,    50,    -1,   439,   330,    -1,
     327,     5,    -1,   439,   112,    -1,   891,    -1,   177,   892,
      -1,   455,   892,    -1,   372,   232,    -1,   530,   892,    -1,
     232,    -1,   208,    -1,    -1,   891,    -1,   230,    -1,   208,
      -1,   207,    -1,    -1,   530,    -1,   177,    -1,   455,    -1,
      -1,   895,    -1,   895,   899,    -1,    -1,   898,    -1,   900,
      -1,   898,   900,    -1,   541,   901,    -1,   518,   901,    -1,
     899,    -1,   231,  1176,  1126,    -1,   560,   355,  1281,    -1,
      45,    -1,   425,    -1,   190,    -1,   902,   581,   903,  1119,
      -1,   903,  1119,    -1,  1285,    -1,  1285,   579,   331,   580,
      -1,    -1,  1278,    -1,    -1,   587,  1285,    -1,  1267,    -1,
     906,   581,  1267,    -1,    -1,    13,   941,   493,  1279,   908,
     919,    -1,    -1,    13,    95,   918,   909,   817,    -1,    13,
      95,  1285,   536,    98,   121,   312,    -1,    -1,    13,   374,
     633,   910,   634,    -1,    -1,    13,   178,   633,   911,   634,
      -1,    -1,    13,  1380,  1375,   912,  1382,    -1,    -1,    13,
    1375,   913,  1382,    -1,    -1,    13,  1375,   151,   633,   914,
     915,   916,   623,   628,   917,    -1,    13,   491,   724,    -1,
      13,   255,   186,   726,    -1,    13,   491,   721,    -1,    13,
     491,   720,    -1,    13,   437,  1287,   341,   579,   617,   580,
      -1,    -1,   336,   427,   621,    -1,   627,    -1,   336,   427,
     621,   627,    -1,    -1,   402,   509,   633,    -1,    -1,   128,
     629,    -1,    -1,  1285,    -1,    -1,   123,   491,    -1,   206,
     491,    -1,   934,   768,    -1,   934,   923,    -1,   923,    -1,
     769,    -1,   925,    -1,   129,   359,   932,    -1,   389,   359,
     978,   924,    -1,    -1,   340,   359,   978,   924,   920,   978,
      -1,    14,   359,   978,   924,    -1,    -1,    60,   359,   924,
     921,   973,    -1,    -1,   404,   359,   978,   924,   922,   965,
      -1,    64,   359,   978,  1127,    -1,   928,    -1,   401,   357,
      -1,    12,    -1,   932,    -1,    -1,     6,   359,   978,   926,
     927,    -1,    -1,   579,   793,   580,    -1,   358,  1127,    -1,
      -1,   403,   359,   978,   929,   930,    -1,    -1,    -1,   932,
     931,   219,   579,   793,   580,    -1,   933,    -1,   932,   581,
     933,    -1,  1285,    -1,   936,    -1,   934,   581,   936,    -1,
       6,   940,    -1,   935,   837,   943,    -1,     6,   838,    -1,
     935,   579,   835,   580,    -1,    -1,    55,   940,  1278,   937,
     843,   943,    -1,    -1,    -1,   304,   940,  1278,   938,   845,
     863,   939,   943,    -1,   129,   940,  1278,   942,    -1,   129,
     171,   232,   904,    -1,   129,   372,   232,    -1,   129,   891,
    1278,    -1,   122,   230,    -1,   137,   230,    -1,    13,   940,
    1278,   439,   112,  1269,    -1,    13,   940,  1278,   129,   112,
      -1,   402,   944,  1279,    -1,    85,   509,   867,   869,   874,
      -1,   824,    -1,   170,    -1,  1112,    -1,    -1,    69,    -1,
      -1,   205,    -1,    -1,   413,    -1,    50,    -1,    -1,     8,
    1285,    -1,   165,    -1,    -1,   509,    -1,   145,    -1,    18,
      -1,    -1,   471,   448,   950,   946,   954,    -1,   475,   448,
     950,    -1,    -1,   448,   471,   950,   947,   954,    -1,   448,
     475,   950,    -1,   471,   511,   949,    -1,    -1,   560,    79,
     450,    -1,    -1,   951,   952,    -1,   953,    -1,   952,   581,
     953,    -1,    -1,   467,    -1,   398,    -1,    -1,   534,   955,
      -1,   610,    -1,   955,   581,   610,    -1,    -1,   412,  1310,
     957,  1150,   175,  1282,    -1,    -1,    28,  1310,   959,  1150,
     509,  1282,    -1,    -1,    59,  1310,   961,  1150,   962,    -1,
      -1,   382,    -1,   157,    -1,    -1,   404,   978,  1310,   964,
    1150,   965,    -1,    -1,   966,    -1,   967,    -1,   967,   966,
      -1,   382,    -1,   157,    -1,   539,    -1,    -1,    14,   978,
    1310,   969,  1150,    -1,    34,  1282,    -1,    -1,    60,  1310,
     972,  1150,   973,    -1,    -1,   974,    -1,   975,    -1,   975,
     974,    -1,   382,    -1,   161,    -1,   292,    -1,   157,    -1,
      56,    -1,   172,   536,    -1,    -1,   340,   978,  1310,   977,
    1150,    -1,    -1,   329,    -1,   251,    -1,    -1,   402,  1310,
     980,   982,    -1,   402,   538,   632,   981,    -1,  1288,   509,
    1288,    -1,   981,   581,  1288,   509,  1288,    -1,   983,    -1,
     982,   581,   983,    -1,  1279,   509,  1279,    -1,    48,   208,
     985,   222,   987,    -1,   986,    -1,   985,   581,   986,    -1,
    1279,   992,    -1,  1285,    -1,   112,    -1,    -1,   250,   208,
     219,    48,   989,   990,    -1,   991,    -1,   990,   581,   991,
      -1,  1279,   992,   995,    -1,    -1,   993,   994,    -1,    -1,
     891,   579,  1093,   580,    -1,    -1,   205,   238,    -1,   997,
      -1,   431,   999,    -1,   579,   998,   580,  1363,    -1,   431,
    1001,    -1,   579,   998,   580,    -1,    -1,  1001,  1000,  1360,
      -1,    -1,    -1,  1002,  1006,  1010,  1003,  1004,  1009,    -1,
    1115,  1121,    -1,  1141,    -1,  1005,    -1,  1141,  1005,    -1,
    1005,  1141,    -1,   175,  1061,  1104,  1109,  1106,  1115,  1121,
    1132,    -1,   175,   130,  1104,  1121,    -1,    -1,  1007,    -1,
    1007,  1008,    -1,  1008,    -1,   477,    -1,   194,    -1,   125,
      -1,   465,    -1,   460,    -1,   461,    -1,   463,    -1,   464,
      -1,   462,    -1,    12,    -1,    -1,   172,   535,    -1,   254,
     222,   441,   302,    -1,  1010,   581,  1011,    -1,  1011,    -1,
     574,    -1,  1012,  1014,  1013,  1015,    -1,    -1,    -1,  1273,
      -1,  1017,    -1,    -1,    18,  1285,    -1,    18,  1282,    -1,
    1285,    -1,  1282,    -1,    -1,   579,   580,    -1,  1017,  1021,
    1017,    -1,  1017,   566,  1017,    -1,  1017,  1022,  1017,    -1,
     325,  1017,    -1,  1018,   225,   515,    -1,  1018,   225,  1023,
     515,    -1,  1018,   225,   160,    -1,  1018,   225,  1023,   160,
      -1,  1018,   225,   531,    -1,  1018,   225,  1023,   531,    -1,
    1018,    -1,  1018,   225,   330,    -1,  1018,   225,  1023,   330,
      -1,  1018,   146,  1019,    -1,  1018,  1025,  1019,    -1,  1018,
    1025,  1026,   579,  1369,   580,    -1,  1019,    -1,  1020,   222,
     579,  1369,   580,    -1,  1020,  1023,   222,   579,  1369,   580,
      -1,  1020,   222,   579,  1017,   580,    -1,  1020,   222,   579,
    1017,   581,  1054,   580,    -1,  1020,  1023,   222,   579,  1017,
     580,    -1,  1020,  1023,   222,   579,  1017,   581,  1054,   580,
      -1,  1020,    31,  1020,    16,  1019,    -1,  1020,  1023,    31,
    1020,    16,  1019,    -1,  1020,   453,   244,  1020,    -1,  1020,
     244,  1027,  1108,    -1,  1020,  1023,   244,  1027,  1108,    -1,
    1020,   395,  1020,    -1,  1020,  1023,   395,  1020,    -1,  1020,
      -1,  1020,   570,  1020,    -1,  1020,   571,  1020,    -1,  1020,
     442,  1020,    -1,  1020,   443,  1020,    -1,  1020,   573,  1020,
      -1,  1020,   572,  1020,    -1,  1020,   573,   218,  1017,  1097,
      -1,  1020,   572,   218,  1017,  1097,    -1,  1020,   574,  1020,
      -1,  1020,   575,  1020,    -1,  1020,   576,  1020,    -1,  1020,
     126,  1020,    -1,  1020,   305,  1020,    -1,  1020,   577,  1020,
      -1,  1027,    -1,   347,    -1,   344,    -1,    16,    -1,    15,
      -1,   325,    -1,   324,    -1,   582,    -1,   324,    -1,   145,
      -1,   179,    -1,   188,    -1,   236,    -1,   263,    -1,   318,
      -1,    12,    -1,    17,    -1,  1275,    -1,  1028,    -1,  1029,
      -1,  1032,    -1,  1030,    -1,  1027,    66,  1287,    -1,  1270,
      -1,  1268,    -1,  1044,    -1,  1040,    -1,  1027,   346,  1027,
      -1,   573,  1027,    -1,   572,  1027,    -1,   578,  1027,    -1,
    1024,  1027,    -1,   579,  1369,   580,    -1,   579,  1017,   580,
      -1,   579,  1017,   581,  1054,   580,    -1,   424,   579,  1017,
     581,  1054,   580,    -1,   154,   579,  1369,   580,    -1,   583,
    1285,  1017,   584,    -1,   280,  1055,     9,   579,  1020,  1034,
     580,    -1,    33,  1027,    -1,    53,   579,  1017,    18,  1052,
     580,    -1,    52,  1057,  1059,  1058,   139,    -1,    85,   579,
    1017,   581,  1052,   580,    -1,    85,   579,  1017,   541,   868,
     580,    -1,   112,   579,  1275,   580,    -1,   545,   579,  1276,
     580,    -1,   218,  1017,  1097,   573,  1017,    -1,    58,   579,
    1054,   580,    -1,    58,   579,  1054,   541,   868,   580,    -1,
      92,  1016,    -1,   102,   579,  1017,   580,    -1,   107,   579,
    1017,   580,    -1,   200,   579,  1017,   580,    -1,   215,   579,
    1017,   581,  1017,   581,  1017,   581,  1017,   580,    -1,   218,
     579,  1017,   581,  1017,   580,    -1,   218,   579,  1017,   581,
    1017,   581,  1054,   580,    -1,   240,   579,  1017,   581,  1017,
     580,    -1,   299,   579,  1017,   580,    -1,   306,   579,  1017,
     580,    -1,   418,   579,  1017,   581,  1017,   580,    -1,   429,
     579,  1017,   580,    -1,   505,   579,  1017,   580,    -1,   502,
     579,  1017,   580,    -1,   502,   579,  1017,   581,  1017,   580,
      -1,   514,   579,  1017,   580,    -1,   514,   579,   237,  1017,
     175,  1017,   580,    -1,   514,   579,   510,  1017,   175,  1017,
     580,    -1,   514,   579,    44,  1017,   175,  1017,   580,    -1,
     514,   579,   237,   175,  1017,   580,    -1,   514,   579,   510,
     175,  1017,   580,    -1,   514,   579,    44,   175,  1017,   580,
      -1,   514,   579,  1017,   175,  1017,   580,    -1,   538,   579,
     580,    -1,   568,   579,  1017,   580,    -1,     7,   579,  1017,
     581,  1017,   580,    -1,     7,   579,  1017,   581,   218,  1017,
    1097,   580,    -1,    91,  1016,    -1,    94,  1016,    -1,    94,
     579,  1017,   580,    -1,   100,   579,  1017,   581,   218,  1017,
    1097,   580,    -1,   101,   579,  1017,   581,   218,  1017,  1097,
     580,    -1,   159,   579,  1097,   175,  1017,   580,    -1,   182,
     579,  1100,   581,  1017,   580,    -1,   326,  1016,    -1,   326,
     579,  1017,   580,    -1,   367,   579,  1020,   222,  1017,   580,
      -1,   479,   579,  1017,   581,  1017,   580,    -1,   479,   579,
    1017,   581,   218,  1017,  1097,   580,    -1,   483,   579,  1017,
     581,  1017,   581,  1017,   580,    -1,   483,   579,  1017,   581,
    1017,   580,    -1,   483,   579,  1017,   175,  1017,   172,  1017,
     580,    -1,   483,   579,  1017,   175,  1017,   580,    -1,   489,
    1016,    -1,   489,   579,  1017,   580,    -1,   503,   579,  1098,
     581,  1017,   581,  1017,   580,    -1,   504,   579,  1098,   581,
    1017,   581,  1017,   580,    -1,   542,  1016,    -1,   544,  1016,
      -1,   543,  1016,    -1,    20,   579,  1017,   580,    -1,    57,
     579,  1017,   580,    -1,    64,   579,  1054,   580,    -1,    67,
     579,  1017,   580,    -1,    95,   579,   580,    -1,   204,   579,
    1017,   581,  1017,   581,  1017,   580,    -1,   295,   579,  1017,
     580,    -1,   305,   579,  1017,   581,  1017,   580,    -1,   335,
     579,  1017,   580,    -1,   360,   579,  1017,   580,    -1,   380,
     579,  1017,   580,    -1,   406,   579,  1017,   581,  1017,   580,
      -1,   407,   579,  1017,   581,  1017,   581,  1017,   580,    -1,
     516,   579,  1017,   581,  1017,   580,    -1,   556,   579,  1017,
     580,    -1,   556,   579,  1017,   581,  1017,   580,    -1,  1031,
      -1,    81,   579,  1017,   581,  1017,   580,    -1,   180,   579,
    1054,   580,    -1,   248,   579,  1054,   580,    -1,   307,   579,
    1054,   580,    -1,   308,   579,  1054,   580,    -1,   309,   579,
    1054,   580,    -1,   364,   579,  1017,   581,  1017,   580,    -1,
     365,   579,  1054,   580,    -1,    -1,  1281,   579,  1033,  1037,
     580,    -1,  1285,   587,  1285,   579,  1053,   580,    -1,  1035,
    1036,    -1,   222,    42,   302,    -1,    -1,   222,   314,   234,
     302,    -1,    -1,   560,   381,   156,    -1,    -1,  1038,    -1,
    1039,    -1,  1038,   581,  1039,    -1,  1012,  1017,  1013,  1015,
      -1,    27,   579,  1050,   580,    -1,    27,   579,   125,  1050,
     580,    -1,    36,   579,  1050,   580,    -1,    37,   579,  1050,
     580,    -1,    39,   579,  1050,   580,    -1,    86,   579,  1103,
     574,   580,    -1,    86,   579,  1050,   580,    -1,    -1,    -1,
      86,   579,   125,  1041,  1054,  1042,   580,    -1,   301,   579,
    1050,   580,    -1,   301,   579,   125,  1050,   580,    -1,   285,
     579,  1050,   580,    -1,   285,   579,   125,  1050,   580,    -1,
     474,   579,  1050,   580,    -1,   550,   579,  1050,   580,    -1,
     473,   579,  1050,   580,    -1,   552,   579,  1050,   580,    -1,
     484,   579,  1050,   580,    -1,   484,   579,   125,  1050,   580,
      -1,    -1,   187,   579,  1047,  1043,  1054,  1049,  1048,   580,
      -1,    -1,   586,  1045,  1046,    -1,  1287,   440,  1017,    -1,
    1287,    -1,   586,  1300,  1287,   905,    -1,    -1,   125,    -1,
      -1,   433,  1267,    -1,    -1,  1116,    -1,    -1,  1103,  1051,
    1017,    -1,    33,   861,    -1,    58,   861,   877,    -1,   316,
     861,    -1,   446,    -1,   446,   220,    -1,   533,    -1,   533,
     220,    -1,   102,    -1,   505,    -1,    99,    -1,   110,   855,
      -1,    -1,  1054,    -1,  1017,    -1,  1054,   581,  1017,    -1,
    1056,    -1,   579,  1056,   580,    -1,  1275,    -1,  1056,   581,
    1275,    -1,    -1,  1017,    -1,    -1,   135,  1017,    -1,   557,
    1017,   501,  1017,    -1,  1059,   557,  1017,   501,  1017,    -1,
    1073,    -1,  1064,    -1,  1063,    -1,  1060,    -1,   583,  1285,
    1060,   584,    -1,  1062,    -1,  1063,   581,  1062,    -1,  1060,
    1072,  1060,    -1,  1060,   477,  1073,    -1,    -1,  1060,  1072,
    1060,   336,  1065,  1017,    -1,    -1,  1060,   477,  1073,   336,
    1066,  1017,    -1,    -1,  1060,  1072,  1060,   541,  1067,   579,
    1096,   580,    -1,  1060,   314,   229,  1073,    -1,    -1,  1060,
     240,  1082,   229,  1060,   336,  1068,  1017,    -1,    -1,  1060,
     240,  1082,   229,  1073,  1069,   541,   579,  1096,   580,    -1,
    1060,   314,   240,  1082,   229,  1073,    -1,    -1,  1060,   418,
    1082,   229,  1060,   336,  1070,  1017,    -1,    -1,  1060,   418,
    1082,   229,  1073,  1071,   541,   579,  1096,   580,    -1,  1060,
     314,   418,  1082,   229,  1073,    -1,   229,    -1,   211,   229,
      -1,    89,   229,    -1,    -1,  1074,  1279,  1102,  1091,    -1,
    1081,  1080,  1077,    -1,   579,  1080,  1075,  1363,   580,  1102,
      -1,    -1,  1080,  1076,  1063,    -1,    -1,    -1,  1078,  1006,
    1010,  1079,   833,    -1,    -1,   431,    -1,    -1,   348,    -1,
      -1,   172,   229,    -1,   172,   345,    46,    -1,   172,   186,
      46,    -1,   170,    -1,   205,    -1,    -1,  1084,   891,  1083,
    1086,   579,  1095,   580,    -1,    -1,   540,   891,  1083,  1087,
     579,  1093,   580,    -1,  1085,    -1,  1088,  1085,    -1,    -1,
      -1,  1090,  1088,    -1,    -1,  1092,  1089,    -1,    -1,  1095,
      -1,  1285,    -1,   372,    -1,  1094,    -1,  1095,   581,  1094,
      -1,  1285,    -1,  1096,   581,  1285,    -1,  1099,    -1,   103,
      -1,   104,    -1,   105,    -1,   106,    -1,   197,    -1,   198,
      -1,   199,    -1,   297,    -1,   298,    -1,   428,    -1,   567,
      -1,  1099,    -1,   174,    -1,   107,    -1,   556,    -1,   200,
      -1,   299,    -1,   306,    -1,   380,    -1,   429,    -1,   295,
      -1,   568,    -1,   102,    -1,   505,    -1,    99,    -1,   502,
      -1,    -1,    18,    -1,   145,    -1,    -1,  1101,  1285,    -1,
      -1,    12,    -1,    -1,    -1,   558,  1105,  1017,    -1,    -1,
      -1,   191,  1107,  1017,    -1,   149,  1027,    -1,    -1,    -1,
     186,    46,  1110,  1111,    -1,  1110,   581,  1274,  1119,    -1,
    1274,  1119,    -1,    -1,   560,    90,    -1,   560,   420,    -1,
     345,    46,  1113,    -1,  1113,   581,  1114,    -1,  1114,    -1,
    1276,  1119,    -1,    -1,  1116,    -1,    -1,   345,    46,  1117,
    1118,    -1,  1118,   581,  1274,  1119,    -1,  1274,  1119,    -1,
      -1,    19,    -1,   117,    -1,    -1,  1122,    -1,    -1,  1122,
      -1,   245,  1123,    -1,  1124,    -1,  1124,   581,  1124,    -1,
    1124,   334,  1124,    -1,  1268,    -1,   520,    -1,   259,    -1,
     331,    -1,    -1,   245,  1124,    -1,   331,    -1,   193,    -1,
     259,    -1,   520,    -1,   109,    -1,   167,    -1,   331,    -1,
     193,    -1,   259,    -1,   520,    -1,  1130,    -1,   331,    -1,
     520,    -1,   259,    -1,   109,    -1,   167,    -1,   331,    -1,
     520,    -1,   259,    -1,  1130,    -1,  1131,    -1,   109,    -1,
     167,    -1,    -1,    -1,   374,  1285,  1133,   579,  1134,   580,
      -1,    -1,  1135,    -1,  1135,   581,  1136,    -1,  1136,    -1,
    1012,  1017,  1013,    -1,    -1,  1138,  1139,    -1,  1139,   581,
    1140,    -1,  1140,    -1,   586,  1287,    -1,  1287,    -1,    -1,
     219,  1142,  1143,    -1,    -1,    -1,   349,  1284,  1144,   870,
    1145,  1255,  1258,    -1,   131,  1284,    -1,  1137,    -1,    -1,
     128,  1147,  1054,    -1,   129,  1155,  1310,  1154,  1150,   942,
      -1,    -1,   129,   208,  1285,   336,  1279,  1149,    -1,   129,
      95,  1154,  1285,    -1,   129,   178,  1154,  1285,   587,  1285,
      -1,   129,   178,  1154,  1285,    -1,   129,   374,  1154,   633,
      -1,   129,   538,   632,  1340,    -1,   129,   553,  1154,  1150,
     942,    -1,   129,   151,  1154,   633,    -1,   129,   513,  1154,
     633,    -1,   129,   491,   747,   758,   759,    -1,   129,   255,
     186,   748,   758,   759,    -1,   129,   437,  1154,  1287,    -1,
    1151,    -1,  1150,   581,  1151,    -1,  1279,    -1,  1153,    -1,
    1152,   581,  1153,    -1,  1279,    -1,    -1,   204,   154,    -1,
      -1,   495,    -1,    -1,    -1,   215,  1157,  1162,   941,  1164,
    1158,  1166,  1182,    -1,    -1,    -1,   407,  1160,  1163,  1164,
    1161,  1166,    -1,    -1,   262,    -1,   114,    -1,   194,    -1,
    1191,    -1,   114,    -1,   219,  1165,    -1,  1165,    -1,  1151,
      -1,  1169,    -1,   579,   580,  1169,    -1,   579,  1168,   580,
    1169,    -1,    -1,   439,  1167,  1173,    -1,  1168,   581,  1272,
      -1,  1272,    -1,   545,  1172,    -1,   546,  1172,    -1,    -1,
     812,  1170,  1360,    -1,    -1,   579,   812,   580,  1171,  1363,
      -1,  1172,   581,  1177,    -1,  1177,    -1,  1173,   581,  1174,
      -1,  1174,    -1,  1276,  1175,  1181,    -1,   145,    -1,   440,
      -1,    -1,  1175,    -1,    -1,   579,  1178,  1179,   580,    -1,
      -1,  1180,    -1,  1180,   581,  1181,    -1,  1181,    -1,  1017,
      -1,   112,    -1,    -1,    -1,   336,   132,  1183,   232,   535,
    1189,    -1,    -1,    -1,   535,  1185,  1191,   941,  1061,   439,
    1187,  1186,  1104,  1115,  1125,    -1,  1187,   581,  1188,    -1,
    1188,    -1,  1276,  1175,  1181,    -1,  1189,   581,  1190,    -1,
    1190,    -1,  1276,  1175,  1181,    -1,    -1,   262,    -1,    -1,
     116,  1193,  1201,  1194,    -1,    -1,   175,  1279,  1195,  1104,
    1115,  1125,    -1,    -1,  1198,  1196,   175,  1061,  1104,    -1,
      -1,   175,  1152,  1197,   541,  1061,  1104,    -1,  1199,    -1,
    1198,   581,  1199,    -1,  1285,  1200,  1102,    -1,  1285,   587,
    1285,  1200,  1102,    -1,    -1,   587,   574,    -1,    -1,  1202,
    1201,    -1,   382,    -1,   262,    -1,   205,    -1,   516,  1204,
    1151,    -1,    -1,   493,    -1,    -1,  1206,    -1,  1207,    -1,
    1206,   581,  1207,    -1,    87,    -1,   293,    -1,    41,   223,
      -1,    82,   488,    -1,   353,   162,    -1,   224,    -1,   487,
      -1,   454,    -1,    12,    -1,    -1,   172,   381,   331,    -1,
      -1,   444,  1210,  1211,    -1,    96,  1221,    -1,  1217,   490,
    1216,  1221,    -1,  1217,   512,  1216,  1221,    -1,   150,  1216,
    1221,    -1,   493,   472,  1216,  1221,    -1,   339,   490,  1216,
    1221,    -1,  1217,   363,    -1,   362,    -1,   143,   830,  1213,
      -1,   143,    12,  1213,    -1,  1217,    68,  1218,  1279,  1216,
    1221,    -1,   320,   278,   172,   448,   560,   266,   145,  1282,
      16,   267,   145,  1128,    16,   270,   145,  1126,    -1,  1214,
     256,    -1,   448,   196,    -1,    -1,    34,   150,  1219,  1220,
    1212,  1120,    -1,   893,  1218,  1279,  1216,  1104,    -1,    69,
     517,    -1,   493,   517,    -1,  1215,   142,    -1,    23,    -1,
      84,    -1,   373,    -1,    86,   579,   574,   580,   555,    -1,
      86,   579,   574,   580,   147,    -1,   555,  1120,    -1,   147,
    1120,    -1,   378,    -1,   377,  1205,  1208,  1120,    -1,  1299,
     472,  1221,    -1,   212,   472,    -1,   310,   472,    -1,  1217,
     376,    -1,  1299,   549,  1221,    -1,   867,  1221,    -1,    67,
    1221,    -1,   185,    -1,   185,   172,  1288,    -1,    88,    95,
     822,  1285,    -1,    88,   493,  1279,    -1,    88,   553,  1279,
      -1,   278,   472,    -1,   448,   472,    -1,    88,   374,   633,
      -1,    88,   178,   633,    -1,    88,   513,   633,    -1,   374,
     472,  1221,    -1,   178,   472,  1221,    -1,   374,    65,   633,
      -1,   178,    65,   633,    -1,    88,   151,   633,    -1,   472,
      -1,   310,    -1,   256,    -1,   278,    -1,    33,    -1,    -1,
     476,    -1,    -1,  1218,  1285,    -1,    -1,   176,    -1,   175,
      -1,   222,    -1,    -1,   222,  1282,    -1,    -1,   175,  1128,
      -1,    -1,   244,  1282,    -1,   558,  1017,    -1,    -1,  1225,
    1279,  1223,  1227,    -1,    -1,  1225,  1226,  1224,   996,    -1,
     117,    -1,   118,    -1,    -1,   157,    -1,   358,    -1,    -1,
    1267,    -1,  1285,    -1,    -1,   169,   978,  1229,  1230,    -1,
    1230,   581,  1231,    -1,  1231,    -1,    -1,  1310,  1232,  1233,
      -1,   490,   560,   386,   254,    -1,   381,    48,    -1,   196,
      -1,   373,    -1,   256,    -1,   472,    -1,   448,    -1,   278,
      -1,   119,    -1,   411,    -1,    -1,  1150,    -1,    -1,   410,
    1235,  1236,    -1,  1236,   581,  1237,    -1,  1237,    -1,   448,
      -1,   278,    -1,   381,    48,    -1,    -1,   379,  1239,  1240,
      -1,  1214,   256,  1241,    -1,   509,  1282,    -1,    29,  1017,
      -1,   233,  1243,  1017,    -1,    -1,    78,    -1,   381,    -1,
     540,  1285,    -1,    -1,   250,    98,  1246,  1247,    -1,   250,
     493,  1279,   175,   278,    -1,    -1,    -1,    -1,    -1,  1253,
    1252,   209,  1284,  1248,  1254,   219,  1249,   493,  1279,  1250,
     870,  1251,  1255,  1258,  1261,  1262,  1265,    -1,   175,   278,
      -1,    -1,   251,    -1,    -1,    76,    -1,   262,    -1,    -1,
     407,    -1,   205,    -1,    -1,    68,  1256,    -1,  1256,  1257,
      -1,  1257,    -1,   497,    46,  1267,    -1,   343,   138,    46,
    1267,    -1,   138,    46,  1267,    -1,   148,    46,  1267,    -1,
      -1,   247,  1259,    -1,  1259,  1260,    -1,  1260,    -1,   497,
      46,  1267,    -1,   469,    46,  1267,    -1,    -1,   205,   331,
     247,    -1,    -1,   579,  1263,   580,    -1,   579,   580,    -1,
    1263,   581,  1264,    -1,  1264,    -1,  1276,    -1,   586,  1287,
      -1,    -1,   439,  1189,    -1,   498,    -1,   315,    -1,   523,
     498,    -1,  1266,  1283,    -1,  1283,    -1,   193,    -1,    35,
      -1,   354,    -1,  1270,    -1,   573,  1271,    -1,   572,  1271,
      -1,  1266,    -1,  1271,    -1,   330,    -1,   160,    -1,   515,
      -1,   193,    -1,    35,    -1,   523,   193,    -1,   523,    35,
      -1,   102,  1266,    -1,   505,  1266,    -1,   502,  1266,    -1,
     331,    -1,   259,    -1,   520,    -1,   109,    -1,   167,    -1,
    1276,    -1,  1273,    -1,  1285,   587,   574,    -1,  1285,   587,
    1285,   587,   574,    -1,  1017,    -1,  1285,    -1,  1277,    -1,
    1285,    -1,  1277,    -1,  1285,   587,  1285,    -1,   587,  1285,
     587,  1285,    -1,  1285,   587,  1285,   587,  1285,    -1,  1285,
      -1,  1285,   587,  1285,   587,  1285,    -1,  1285,   587,  1285,
      -1,   587,  1285,    -1,  1285,    -1,  1285,   587,  1285,    -1,
     587,  1285,    -1,  1285,    -1,   201,    -1,   203,    -1,   498,
      -1,   498,    -1,   498,    -1,  1281,    -1,  1289,    -1,  1281,
      -1,  1290,    -1,  1285,    -1,  1282,    -1,   243,    -1,  1287,
      -1,  1287,   586,  1287,    -1,    92,  1016,    -1,  1290,    -1,
      20,    -1,    28,    -1,    30,    -1,    47,    -1,    48,    -1,
      57,    -1,    59,    -1,    63,    -1,    70,    -1,    72,    -1,
      81,    -1,   108,    -1,   128,    -1,   139,    -1,   153,    -1,
     169,    -1,   189,    -1,   192,    -1,   195,    -1,   217,    -1,
     234,    -1,   327,    -1,   339,    -1,   341,    -1,   351,    -1,
     355,    -1,   359,    -1,   366,    -1,   369,    -1,   401,    -1,
     404,    -1,   410,    -1,   412,    -1,   419,    -1,   426,    -1,
     430,    -1,   437,    -1,   446,    -1,   451,    -1,   448,    -1,
     452,    -1,   471,    -1,   475,    -1,   516,    -1,   527,    -1,
     528,    -1,   562,    -1,   565,    -1,   536,    -1,     5,    -1,
       7,    -1,     8,    -1,     9,    -1,    10,    -1,    11,    -1,
      17,    -1,    22,    -1,    23,    -1,    25,    -1,    24,    -1,
      26,    -1,    27,    -1,    34,    -1,    38,    -1,    41,    -1,
      43,    -1,    42,    -1,    45,    -1,    51,    -1,    54,    -1,
      56,    -1,    61,    -1,    62,    -1,    64,    -1,    65,    -1,
      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,
      75,    -1,    76,    -1,    78,    -1,    79,    -1,    82,    -1,
      84,    -1,    87,    -1,    90,    -1,    98,    -1,    97,    -1,
      99,    -1,   102,    -1,   107,    -1,   113,    -1,   115,    -1,
     119,    -1,   121,    -1,   122,    -1,   123,    -1,   124,    -1,
     131,    -1,   132,    -1,   133,    -1,   140,    -1,   144,    -1,
     143,    -1,   142,    -1,   147,    -1,   149,    -1,   151,    -1,
     150,    -1,   152,    -1,   156,    -1,   157,    -1,   158,    -1,
     162,    -1,   161,    -1,   173,    -1,   137,    -1,   176,    -1,
     164,    -1,   165,    -1,   166,    -1,   174,    -1,   181,    -1,
     180,    -1,   182,    -1,   185,    -1,   183,    -1,   190,    -1,
     196,    -1,   200,    -1,   202,    -1,   221,    -1,   206,    -1,
     207,    -1,   210,    -1,   223,    -1,   224,    -1,   226,    -1,
     227,    -1,   212,    -1,   216,    -1,   231,    -1,   235,    -1,
     238,    -1,   241,    -1,   242,    -1,   248,    -1,   249,    -1,
     251,    -1,   253,    -1,   255,    -1,   256,    -1,   283,    -1,
     278,    -1,   265,    -1,   269,    -1,   266,    -1,   267,    -1,
     279,    -1,   268,    -1,   270,    -1,   264,    -1,   276,    -1,
     272,    -1,   271,    -1,   273,    -1,   274,    -1,   275,    -1,
     281,    -1,   282,    -1,   284,    -1,   286,    -1,   287,    -1,
     288,    -1,   292,    -1,   293,    -1,   294,    -1,   295,    -1,
     296,    -1,   299,    -1,   300,    -1,   304,    -1,   302,    -1,
     306,    -1,   307,    -1,   308,    -1,   309,    -1,   310,    -1,
     312,    -1,   311,    -1,   313,    -1,   316,    -1,   317,    -1,
     321,    -1,   320,    -1,   328,    -1,   322,    -1,   323,    -1,
     333,    -1,   334,    -1,   335,    -1,   337,    -1,   338,    -1,
     352,    -1,   353,    -1,   356,    -1,   357,    -1,   358,    -1,
     360,    -1,   361,    -1,   363,    -1,   362,    -1,   364,    -1,
     365,    -1,   370,    -1,   371,    -1,   373,    -1,   375,    -1,
     376,    -1,   377,    -1,   378,    -1,   380,    -1,   381,    -1,
     382,    -1,   385,    -1,   389,    -1,   390,    -1,   392,    -1,
     391,    -1,   393,    -1,   396,    -1,   397,    -1,   398,    -1,
     400,    -1,   403,    -1,   405,    -1,   408,    -1,   411,    -1,
     414,    -1,   415,    -1,   420,    -1,   421,    -1,   422,    -1,
     423,    -1,   424,    -1,   425,    -1,   427,    -1,   429,    -1,
     435,    -1,   434,    -1,   436,    -1,   447,    -1,   441,    -1,
     445,    -1,   450,    -1,   453,    -1,   454,    -1,   462,    -1,
     461,    -1,   464,    -1,   467,    -1,   470,    -1,   472,    -1,
     476,    -1,   478,    -1,   479,    -1,   480,    -1,   482,    -1,
     481,    -1,   485,    -1,   486,    -1,   487,    -1,   488,    -1,
     490,    -1,   494,    -1,   491,    -1,   495,    -1,   496,    -1,
     499,    -1,   500,    -1,   511,    -1,   512,    -1,   502,    -1,
     503,    -1,   504,    -1,   505,    -1,   517,    -1,   518,    -1,
     519,    -1,   178,    -1,   521,    -1,   522,    -1,   525,    -1,
     524,    -1,   531,    -1,   534,    -1,   538,    -1,   539,    -1,
     549,    -1,   553,    -1,   546,    -1,   555,    -1,   554,    -1,
     556,    -1,   561,    -1,   564,    -1,   568,    -1,    -1,   439,
    1293,  1292,  1294,    -1,    -1,   342,    -1,  1295,    -1,  1294,
     581,  1295,    -1,    -1,  1296,  1301,    -1,  1298,    -1,   183,
      -1,   251,    -1,   436,    -1,    -1,   337,    -1,    -1,   183,
      -1,   251,    -1,   436,    -1,    -1,   183,   587,    -1,   251,
     587,    -1,   436,   587,    -1,  1302,    -1,  1298,  1303,    -1,
    1297,  1304,  1175,  1307,    -1,  1297,   511,   226,   242,  1305,
      -1,   586,  1287,  1175,  1017,    -1,   586,   586,  1300,  1304,
    1175,  1307,    -1,   867,   872,    -1,   311,  1175,  1017,    -1,
     311,   869,   874,    -1,   360,  1175,  1306,    -1,   360,   172,
    1288,  1175,  1306,    -1,  1285,    -1,  1285,   587,  1285,    -1,
     112,   587,  1285,    -1,   386,   521,    -1,   386,    71,    -1,
     405,   386,    -1,   434,    -1,   498,    -1,   360,   579,   498,
     580,    -1,   335,   579,   498,   580,    -1,  1017,    -1,   112,
      -1,   336,    -1,    12,    -1,    33,    -1,    -1,   254,  1310,
    1309,  1311,    -1,   493,    -1,   490,    -1,  1312,    -1,  1311,
     581,  1312,    -1,  1279,  1102,  1313,    -1,   386,    -1,   563,
      -1,   262,   563,    -1,   386,   251,    -1,    -1,   532,  1315,
    1310,    -1,   189,  1279,   339,  1102,    -1,   189,  1280,    63,
      -1,    -1,   189,  1280,   386,  1317,  1318,  1104,  1121,    -1,
    1319,    -1,  1285,  1320,    -1,   165,    -1,   321,    -1,   165,
      -1,   321,    -1,   371,    -1,   235,    -1,    -1,  1322,  1321,
     579,  1180,   580,    -1,   145,    -1,   179,    -1,   236,    -1,
     188,    -1,   263,    -1,   417,   632,  1324,    -1,  1328,   336,
    1327,  1339,   175,  1341,    -1,  1328,   336,   178,  1339,   175,
    1341,    -1,  1328,   336,   374,  1339,   175,  1341,    -1,    12,
    1329,   581,   184,   342,   175,  1341,    -1,   184,   632,  1326,
      -1,  1328,   336,  1327,  1339,   509,  1341,  1346,  1347,    -1,
    1328,   336,   178,  1339,   509,  1341,  1346,  1347,    -1,  1328,
     336,   374,  1339,   509,  1341,  1346,  1347,    -1,    -1,   493,
      -1,  1330,    -1,    12,  1329,    -1,    -1,   373,    -1,  1331,
      -1,  1330,   581,  1331,    -1,    -1,   431,  1332,  1343,    -1,
      -1,   215,  1333,  1343,    -1,    -1,   535,  1334,  1343,    -1,
      -1,   394,  1335,  1343,    -1,   116,    -1,   537,    -1,   208,
      -1,    13,    -1,    88,    -1,   129,    -1,   153,    -1,   400,
      -1,   445,    -1,   375,    -1,   164,    -1,   184,   342,    -1,
     444,    96,    -1,   485,    -1,    88,   495,   490,    -1,   254,
     490,    -1,   408,   448,    -1,   408,    62,    -1,    88,   553,
      -1,   444,   553,    -1,    88,   421,    -1,    13,   421,    -1,
      88,   538,    -1,   151,    -1,   513,    -1,    -1,    16,    -1,
    1338,  1336,  1337,    -1,  1338,    -1,   480,   498,    -1,   227,
     498,    -1,    61,   498,    -1,   574,    -1,  1285,   587,   574,
      -1,   574,   587,   574,    -1,  1279,    -1,  1288,    -1,  1340,
     581,  1288,    -1,  1342,    -1,  1341,   581,  1342,    -1,  1288,
     202,    46,   498,    -1,  1288,   202,    46,   360,   498,    -1,
    1288,    -1,    -1,   579,  1344,   580,    -1,  1344,   581,  1345,
      -1,  1345,    -1,  1285,    -1,    -1,   409,  1337,    -1,   409,
     468,    -1,   409,   564,    -1,   409,   323,    -1,    -1,   560,
    1348,    -1,  1348,  1349,    -1,  1349,    -1,   184,   342,    -1,
     282,  1126,    -1,   286,  1126,    -1,   281,  1126,    -1,   287,
    1126,    -1,    -1,    30,  1351,  1352,    -1,    -1,   561,    -1,
      -1,    16,   327,    54,    -1,    16,    54,    -1,    -1,   399,
      -1,   327,   399,    -1,    -1,   426,    -1,    72,  1352,  1353,
    1354,    -1,   419,  1352,  1353,  1354,    -1,   419,  1352,   509,
    1355,  1285,    -1,   426,  1285,    -1,   399,   426,  1285,    -1,
      -1,  1361,    -1,    -1,   529,  1367,  1362,   997,    -1,    -1,
    1361,    -1,  1364,    -1,    -1,  1365,  1366,    -1,  1116,  1120,
      -1,  1122,    -1,    -1,   125,    -1,    12,    -1,    -1,   431,
    1370,   999,  1368,  1371,    -1,   579,  1370,   998,  1368,  1371,
     580,    -1,    -1,    -1,  1377,  1373,    -1,  1376,  1374,    -1,
    1378,  1375,  1382,    -1,  1382,    -1,  1390,    -1,  1401,    -1,
    1395,    -1,   619,    -1,  1382,    -1,  1390,    -1,  1401,    -1,
    1395,    -1,  1394,    -1,   619,    -1,  1376,    -1,  1377,    -1,
      -1,   113,   145,  1288,    -1,  1379,    -1,  1379,  1380,    -1,
    1380,    -1,   347,   407,    -1,    11,   145,   522,    -1,    11,
     145,   294,    -1,    11,   145,   496,    -1,    -1,   466,   430,
     113,    -1,   466,   430,   221,    -1,    -1,  1381,   553,  1279,
    1383,  1384,    18,  1386,    -1,    -1,   579,  1385,   580,    -1,
    1285,    -1,  1385,   581,  1285,    -1,    -1,  1387,  1388,  1389,
      -1,   431,   999,    -1,   579,   998,   580,  1363,    -1,    -1,
     560,    60,   342,    -1,   560,    51,    60,   342,    -1,   560,
     251,    60,   342,    -1,    -1,    -1,    -1,   513,  1012,   633,
     718,   719,   336,  1012,  1391,  1279,   172,  1012,  1392,   134,
     424,  1393,   668,    -1,    10,  1012,   178,  1285,   415,   834,
     452,  1282,    -1,  1012,   178,  1285,   415,   834,   452,  1282,
      -1,    -1,    -1,    -1,    -1,    -1,  1012,   178,   633,   579,
    1396,   644,   580,  1397,   415,  1398,   845,  1399,   635,  1400,
     668,    -1,    -1,    -1,    -1,    -1,   374,  1012,   633,  1402,
     579,  1403,   648,   580,  1404,   635,  1405,   668,    -1,   565,
    1408,  1407,  1409,    -1,   565,   139,  1407,  1411,    -1,   565,
     369,  1407,    -1,   565,    72,  1407,  1410,    -1,   565,   419,
    1407,    -1,   565,   390,    -1,  1267,    -1,  1267,   581,  1267,
      -1,  1267,   581,  1267,   581,  1126,    -1,    30,    -1,   471,
      -1,    -1,   229,    -1,   414,    -1,    -1,   338,   361,    -1,
      -1,    -1,   486,  1412,  1413,    -1,    -1,   172,   296,    -1,
     217,   363,  1285,   452,  1282,    -1,   528,   363,  1285,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1354,  1354,  1367,  1366,  1391,  1398,  1400,  1404,  1405,
    1410,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,
    1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,
    1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,  1441,  1442,  1443,  1444,  1445,  1446,  1447,  1448,  1449,
    1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,
    1460,  1464,  1474,  1475,  1479,  1489,  1496,  1507,  1506,  1517,
    1519,  1523,  1524,  1528,  1541,  1540,  1560,  1559,  1570,  1571,
    1575,  1579,  1583,  1587,  1591,  1595,  1600,  1604,  1608,  1612,
    1616,  1620,  1625,  1629,  1633,  1649,  1653,  1665,  1664,  1699,
    1697,  1728,  1727,  1740,  1739,  1747,  1751,  1755,  1759,  1766,
    1779,  1780,  1784,  1788,  1792,  1796,  1800,  1804,  1808,  1816,
    1815,  1846,  1845,  1852,  1859,  1860,  1865,  1870,  1879,  1885,
    1891,  1893,  1900,  1901,  1905,  1911,  1920,  1921,  1929,  1929,
    1987,  1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,
    1997,  1998,  1999,  2004,  2018,  2034,  2053,  2054,  2058,  2059,
    2064,  2066,  2068,  2070,  2072,  2074,  2076,  2082,  2083,  2084,
    2088,  2092,  2100,  2099,  2112,  2114,  2117,  2119,  2123,  2127,
    2134,  2136,  2140,  2141,  2146,  2165,  2191,  2193,  2197,  2198,
    2202,  2228,  2229,  2230,  2231,  2235,  2236,  2240,  2241,  2246,
    2249,  2276,  2275,  2340,  2356,  2355,  2403,  2429,  2429,  2451,
    2452,  2457,  2459,  2464,  2487,  2495,  2512,  2513,  2517,  2521,
    2530,  2537,  2544,  2554,  2569,  2587,  2588,  2592,  2593,  2594,
    2595,  2596,  2597,  2598,  2599,  2600,  2601,  2602,  2603,  2604,
    2609,  2608,  2615,  2615,  2671,  2670,  2698,  2698,  2712,  2765,
    2808,  2829,  2828,  2850,  2869,  2871,  2872,  2876,  2896,  2919,
    2921,  2936,  2919,  2955,  2957,  2958,  2962,  2963,  2968,  2974,
    2967,  2993,  2992,  3008,  3009,  3013,  3014,  3019,  3023,  3018,
    3042,  3046,  3041,  3063,  3073,  3078,  3077,  3113,  3114,  3119,
    3118,  3151,  3151,  3166,  3165,  3201,  3213,  3215,  3212,  3241,
    3240,  3260,  3262,  3267,  3269,  3271,  3288,  3293,  3299,  3306,
    3307,  3315,  3321,  3330,  3336,  3342,  3343,  3347,  3347,  3352,
    3353,  3354,  3358,  3359,  3360,  3364,  3368,  3369,  3370,  3374,
    3375,  3376,  3377,  3378,  3379,  3380,  3381,  3385,  3389,  3390,
    3391,  3395,  3396,  3397,  3398,  3399,  3403,  3407,  3408,  3409,
    3413,  3414,  3415,  3416,  3417,  3418,  3419,  3423,  3427,  3428,
    3429,  3433,  3434,  3435,  3440,  3448,  3456,  3464,  3476,  3488,
    3493,  3498,  3506,  3514,  3522,  3530,  3538,  3546,  3554,  3567,
    3580,  3593,  3595,  3599,  3604,  3617,  3618,  3669,  3670,  3673,
    3687,  3704,  3709,  3707,  3714,  3716,  3715,  3719,  3718,  3748,
    3749,  3754,  3753,  3786,  3785,  3802,  3806,  3813,  3812,  3816,
    3815,  3819,  3818,  3824,  3825,  3830,  3831,  3835,  3836,  3840,
    3851,  3866,  3882,  3883,  3899,  3901,  3900,  3905,  3903,  3914,
    3915,  3919,  3930,  3946,  3947,  3963,  3964,  3987,  3988,  3993,
    3992,  4017,  4028,  4048,  4063,  4081,  4093,  4109,  4110,  4114,
    4124,  4125,  4129,  4146,  4205,  4217,  4244,  4245,  4250,  4249,
    4287,  4292,  4293,  4297,  4298,  4302,  4304,  4310,  4312,  4314,
    4316,  4318,  4320,  4330,  4346,  4329,  4360,  4361,  4365,  4366,
    4370,  4371,  4375,  4376,  4380,  4381,  4385,  4386,  4390,  4394,
    4395,  4398,  4400,  4404,  4405,  4409,  4410,  4411,  4415,  4420,
    4427,  4432,  4437,  4442,  4447,  4452,  4457,  4472,  4478,  4483,
    4488,  4493,  4498,  4513,  4514,  4515,  4520,  4525,  4530,  4532,
    4534,  4536,  4542,  4550,  4568,  4585,  4608,  4622,  4623,  4624,
    4625,  4626,  4627,  4631,  4632,  4633,  4637,  4638,  4642,  4643,
    4644,  4645,  4649,  4650,  4654,  4655,  4659,  4660,  4667,  4682,
    4694,  4718,  4722,  4728,  4730,  4734,  4738,  4739,  4743,  4748,
    4747,  4770,  4771,  4772,  4773,  4778,  4782,  4787,  4792,  4796,
    4801,  4806,  4812,  4817,  4823,  4827,  4832,  4837,  4839,  4841,
    4843,  4856,  4858,  4863,  4868,  4880,  4885,  4890,  4895,  4897,
    4899,  4901,  4903,  4905,  4907,  4909,  4912,  4911,  4916,  4915,
    4919,  4921,  4930,  4931,  4932,  4937,  4938,  4939,  4940,  4941,
    4945,  4949,  4950,  4954,  4955,  4959,  4960,  4961,  4962,  4963,
    4967,  4968,  4969,  4970,  4971,  4975,  4980,  4982,  4988,  4989,
    4991,  4996,  5005,  5006,  5010,  5011,  5015,  5016,  5017,  5021,
    5022,  5023,  5024,  5027,  5028,  5031,  5032,  5036,  5037,  5041,
    5042,  5046,  5047,  5048,  5049,  5056,  5057,  5063,  5069,  5075,
    5081,  5082,  5098,  5104,  5109,  5110,  5114,  5122,  5126,  5127,
    5131,  5132,  5136,  5145,  5149,  5150,  5154,  5165,  5166,  5170,
    5171,  5175,  5176,  5180,  5181,  5182,  5183,  5192,  5193,  5197,
    5198,  5202,  5203,  5204,  5213,  5216,  5218,  5223,  5222,  5235,
    5236,  5240,  5247,  5257,  5258,  5262,  5263,  5267,  5268,  5269,
    5270,  5271,  5275,  5276,  5277,  5278,  5279,  5283,  5284,  5285,
    5298,  5299,  5303,  5304,  5308,  5309,  5313,  5314,  5315,  5319,
    5320,  5321,  5322,  5335,  5347,  5348,  5352,  5353,  5357,  5358,
    5362,  5363,  5367,  5368,  5370,  5383,  5384,  5385,  5389,  5390,
    5394,  5400,  5414,  5415,  5419,  5420,  5424,  5425,  5433,  5432,
    5459,  5458,  5472,  5484,  5483,  5502,  5501,  5520,  5519,  5538,
    5532,  5552,  5551,  5584,  5589,  5594,  5599,  5604,  5614,  5615,
    5616,  5617,  5621,  5622,  5634,  5635,  5639,  5640,  5643,  5645,
    5646,  5647,  5649,  5651,  5652,  5661,  5662,  5666,  5675,  5673,
    5683,  5693,  5692,  5702,  5700,  5710,  5717,  5721,  5728,  5732,
    5737,  5736,  5752,  5754,  5759,  5768,  5767,  5783,  5787,  5786,
    5798,  5799,  5803,  5818,  5819,  5823,  5832,  5833,  5837,  5842,
    5841,  5849,  5858,  5848,  5870,  5879,  5883,  5892,  5901,  5907,
    5913,  5922,  5931,  5950,  5971,  5976,  5980,  5988,  5989,  5993,
    5994,  5998,  5999,  6000,  6004,  6005,  6006,  6010,  6011,  6012,
    6013,  6022,  6021,  6032,  6040,  6039,  6049,  6058,  6067,  6068,
    6075,  6075,  6081,  6082,  6086,  6087,  6088,  6092,  6093,  6109,
    6110,  6115,  6114,  6126,  6125,  6137,  6136,  6146,  6147,  6148,
    6153,  6152,  6165,  6166,  6170,  6171,  6175,  6176,  6177,  6182,
    6181,  6194,  6203,  6202,  6220,  6221,  6225,  6226,  6230,  6231,
    6232,  6233,  6234,  6235,  6240,  6239,  6252,  6253,  6254,  6259,
    6258,  6264,  6271,  6276,  6284,  6285,  6289,  6302,  6311,  6312,
    6316,  6325,  6326,  6331,  6330,  6340,  6341,  6345,  6354,  6354,
    6365,  6366,  6371,  6372,  6381,  6390,  6391,  6395,  6425,  6430,
    6429,  6449,  6457,  6449,  6464,  6465,  6466,  6467,  6468,  6472,
    6479,  6486,  6488,  6499,  6500,  6504,  6505,  6512,  6513,  6514,
    6515,  6521,  6527,  6533,  6547,  6550,  6552,  6560,  6571,  6572,
    6573,  6588,  6614,  6620,  6626,  6627,  6631,  6632,  6633,  6634,
    6635,  6639,  6640,  6645,  6696,  6703,  6746,  6752,  6758,  6764,
    6770,  6776,  6782,  6788,  6792,  6798,  6804,  6810,  6816,  6822,
    6826,  6832,  6842,  6848,  6856,  6862,  6872,  6878,  6887,  6897,
    6903,  6913,  6919,  6928,  6932,  6938,  6944,  6950,  6956,  6962,
    6968,  6974,  6980,  6986,  6992,  6998,  7004,  7010,  7016,  7020,
    7021,  7025,  7026,  7030,  7031,  7035,  7036,  7040,  7041,  7042,
    7043,  7044,  7045,  7049,  7050,  7054,  7055,  7056,  7057,  7058,
    7059,  7071,  7072,  7073,  7074,  7075,  7081,  7085,  7091,  7097,
    7103,  7109,  7111,  7118,  7125,  7131,  7133,  7142,  7149,  7157,
    7163,  7170,  7176,  7190,  7197,  7213,  7219,  7225,  7233,  7239,
    7245,  7251,  7257,  7272,  7284,  7290,  7296,  7302,  7308,  7314,
    7320,  7326,  7332,  7338,  7344,  7350,  7356,  7362,  7368,  7374,
    7380,  7388,  7409,  7416,  7422,  7429,  7436,  7443,  7450,  7457,
    7463,  7469,  7476,  7483,  7489,  7496,  7502,  7508,  7514,  7520,
    7526,  7536,  7546,  7552,  7558,  7565,  7572,  7587,  7593,  7599,
    7605,  7611,  7618,  7624,  7630,  7636,  7642,  7654,  7660,  7666,
    7672,  7678,  7690,  7696,  7712,  7718,  7725,  7732,  7739,  7746,
    7753,  7757,  7777,  7776,  7844,  7876,  7878,  7883,  7884,  7888,
    7889,  7893,  7894,  7898,  7905,  7913,  7933,  7939,  7945,  7951,
    7957,  7963,  7972,  7979,  7981,  7978,  7988,  7999,  8005,  8011,
    8017,  8023,  8029,  8035,  8041,  8047,  8054,  8053,  8072,  8071,
    8086,  8096,  8104,  8120,  8121,  8126,  8131,  8136,  8139,  8153,
    8152,  8169,  8171,  8173,  8175,  8177,  8179,  8181,  8183,  8185,
    8187,  8189,  8194,  8195,  8199,  8206,  8214,  8215,  8219,  8226,
    8234,  8235,  8239,  8240,  8244,  8252,  8262,  8263,  8272,  8283,
    8284,  8289,  8290,  8310,  8312,  8316,  8314,  8331,  8329,  8347,
    8345,  8352,  8361,  8359,  8377,  8376,  8386,  8397,  8395,  8414,
    8413,  8424,  8435,  8436,  8437,  8442,  8442,  8455,  8477,  8530,
    8529,  8552,  8569,  8552,  8576,  8580,  8606,  8607,  8612,  8616,
    8617,  8618,  8622,  8623,  8628,  8627,  8633,  8632,  8640,  8641,
    8644,  8646,  8646,  8650,  8650,  8655,  8656,  8660,  8662,  8667,
    8668,  8672,  8683,  8696,  8697,  8698,  8699,  8700,  8701,  8702,
    8703,  8704,  8705,  8706,  8707,  8711,  8712,  8731,  8732,  8733,
    8734,  8735,  8736,  8737,  8738,  8739,  8743,  8744,  8745,  8746,
    8749,  8751,  8752,  8756,  8757,  8765,  8767,  8771,  8773,  8772,
    8786,  8789,  8788,  8803,  8809,  8824,  8826,  8830,  8832,  8837,
    8838,  8851,  8869,  8873,  8874,  8878,  8891,  8893,  8898,  8897,
    8932,  8934,  8939,  8940,  8941,  8946,  8952,  8956,  8957,  8961,
    8965,  8972,  8979,  8989,  8993,  8999,  9005,  9015,  9019,  9028,
    9029,  9030,  9031,  9032,  9033,  9037,  9038,  9039,  9040,  9041,
    9045,  9046,  9047,  9048,  9049,  9053,  9054,  9055,  9056,  9060,
    9065,  9066,  9074,  9077,  9076,  9107,  9108,  9112,  9113,  9117,
    9129,  9129,  9140,  9141,  9145,  9164,  9197,  9196,  9209,  9217,
    9208,  9219,  9231,  9243,  9242,  9259,  9266,  9266,  9280,  9287,
    9310,  9331,  9343,  9347,  9353,  9359,  9366,  9371,  9376,  9386,
    9387,  9391,  9399,  9400,  9404,  9414,  9415,  9419,  9420,  9428,
    9438,  9427,  9448,  9455,  9447,  9465,  9477,  9478,  9479,  9483,
    9484,  9488,  9489,  9493,  9502,  9503,  9504,  9506,  9505,  9516,
    9517,  9521,  9522,  9524,  9523,  9527,  9526,  9532,  9533,  9537,
    9538,  9542,  9552,  9553,  9557,  9558,  9563,  9562,  9576,  9577,
    9581,  9586,  9594,  9595,  9603,  9605,  9605,  9613,  9622,  9612,
    9644,  9645,  9649,  9657,  9658,  9662,  9672,  9673,  9680,  9679,
    9693,  9692,  9701,  9700,  9708,  9707,  9717,  9718,  9722,  9734,
    9749,  9750,  9754,  9755,  9759,  9760,  9761,  9765,  9775,  9777,
    9780,  9782,  9785,  9786,  9789,  9793,  9797,  9801,  9805,  9809,
    9813,  9817,  9821,  9829,  9832,  9842,  9841,  9855,  9862,  9870,
    9878,  9886,  9894,  9902,  9910,  9917,  9919,  9921,  9930,  9943,
    9947,  9952,  9951,  9956,  9965,  9970,  9978,  9985,  9990,  9995,
   10000, 10002, 10004, 10006, 10008, 10010, 10017, 10025, 10037, 10049,
   10051, 10059, 10066, 10073, 10083, 10090, 10096, 10105, 10113, 10117,
   10121, 10128, 10135, 10141, 10148, 10155, 10165, 10175, 10183, 10185,
   10187, 10192, 10193, 10196, 10198, 10202, 10203, 10207, 10208, 10212,
   10213, 10217, 10218, 10222, 10223, 10226, 10228, 10235, 10246, 10245,
   10259, 10258, 10268, 10269, 10273, 10274, 10275, 10279, 10280, 10281,
   10296, 10295, 10307, 10308, 10313, 10312, 10315, 10317, 10319, 10321,
   10323, 10325, 10327, 10329, 10331, 10333, 10338, 10339, 10344, 10343,
   10353, 10354, 10358, 10359, 10360, 10365, 10364, 10375, 10379, 10383,
   10395, 10405, 10406, 10407, 10413, 10425, 10424, 10439, 10457, 10468,
   10472, 10482, 10456, 10486, 10496, 10497, 10501, 10502, 10514, 10518,
   10519, 10520, 10523, 10525, 10529, 10530, 10534, 10539, 10546, 10551,
   10558, 10560, 10564, 10565, 10569, 10574, 10581, 10583, 10591, 10592,
   10593, 10597, 10599, 10604, 10605, 10614, 10615, 10621, 10645, 10657,
   10668, 10687, 10695, 10707, 10722, 10743, 10744, 10745, 10753, 10754,
   10755, 10762, 10768, 10774, 10780, 10786, 10815, 10843, 10844, 10845,
   10849, 10859, 10869, 10875, 10884, 10899, 10900, 10904, 10913, 10929,
   10933, 10980, 10984, 11002, 11006, 11085, 11110, 11141, 11142, 11158,
   11168, 11172, 11178, 11184, 11194, 11204, 11205, 11234, 11250, 11266,
   11283, 11284, 11295, 11296, 11307, 11308, 11309, 11313, 11327, 11340,
   11355, 11356, 11357, 11358, 11359, 11360, 11361, 11362, 11363, 11364,
   11365, 11366, 11367, 11368, 11369, 11370, 11371, 11372, 11373, 11374,
   11375, 11376, 11377, 11378, 11379, 11380, 11381, 11382, 11383, 11384,
   11385, 11386, 11387, 11388, 11389, 11390, 11391, 11392, 11393, 11394,
   11395, 11396, 11397, 11398, 11399, 11400, 11401, 11402, 11403, 11404,
   11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421, 11422, 11423,
   11424, 11425, 11426, 11427, 11428, 11429, 11430, 11431, 11432, 11433,
   11434, 11435, 11436, 11437, 11438, 11439, 11440, 11441, 11442, 11443,
   11444, 11445, 11446, 11447, 11448, 11449, 11450, 11451, 11452, 11453,
   11454, 11455, 11456, 11457, 11458, 11459, 11460, 11461, 11462, 11463,
   11464, 11465, 11466, 11467, 11468, 11469, 11470, 11471, 11472, 11473,
   11474, 11475, 11476, 11477, 11478, 11479, 11480, 11481, 11482, 11483,
   11484, 11485, 11486, 11487, 11488, 11489, 11490, 11491, 11492, 11493,
   11494, 11495, 11496, 11497, 11498, 11499, 11500, 11501, 11502, 11503,
   11504, 11505, 11506, 11507, 11508, 11509, 11510, 11511, 11512, 11513,
   11514, 11515, 11516, 11517, 11518, 11519, 11520, 11521, 11522, 11523,
   11524, 11525, 11526, 11527, 11528, 11529, 11530, 11531, 11532, 11533,
   11534, 11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542, 11543,
   11544, 11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552, 11553,
   11554, 11555, 11556, 11557, 11558, 11559, 11560, 11561, 11562, 11563,
   11564, 11565, 11566, 11567, 11568, 11569, 11570, 11571, 11572, 11573,
   11574, 11575, 11576, 11577, 11578, 11579, 11580, 11581, 11582, 11583,
   11584, 11585, 11586, 11587, 11588, 11589, 11590, 11591, 11592, 11593,
   11594, 11595, 11596, 11597, 11598, 11599, 11600, 11601, 11602, 11603,
   11604, 11605, 11606, 11607, 11608, 11609, 11610, 11611, 11612, 11613,
   11614, 11615, 11616, 11617, 11618, 11619, 11620, 11621, 11622, 11623,
   11624, 11625, 11626, 11627, 11628, 11629, 11630, 11631, 11632, 11633,
   11634, 11635, 11636, 11637, 11638, 11639, 11640, 11641, 11642, 11643,
   11644, 11645, 11646, 11647, 11648, 11649, 11650, 11651, 11652, 11653,
   11654, 11655, 11656, 11657, 11658, 11659, 11660, 11661, 11662, 11663,
   11664, 11665, 11666, 11667, 11668, 11669, 11670, 11671, 11672, 11673,
   11680, 11679, 11694, 11695, 11699, 11700, 11704, 11704, 11785, 11786,
   11787, 11788, 11792, 11793, 11797, 11798, 11799, 11800, 11804, 11805,
   11806, 11807, 11811, 11812, 11816, 11914, 11933, 11944, 11952, 11966,
   11981, 12000, 12027, 12040, 12072, 12115, 12129, 12130, 12131, 12132,
   12136, 12137, 12146, 12158, 12159, 12160, 12166, 12172, 12184, 12183,
   12199, 12200, 12204, 12205, 12209, 12221, 12222, 12223, 12224, 12229,
   12228, 12248, 12260, 12273, 12272, 12298, 12299, 12303, 12304, 12308,
   12309, 12310, 12311, 12313, 12312, 12325, 12326, 12327, 12328, 12329,
   12335, 12340, 12346, 12357, 12368, 12375, 12380, 12387, 12399, 12413,
   12415, 12419, 12420, 12427, 12429, 12433, 12434, 12439, 12438, 12442,
   12441, 12445, 12444, 12448, 12447, 12450, 12451, 12452, 12453, 12454,
   12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464,
   12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474,
   12478, 12479, 12483, 12484, 12488, 12498, 12508, 12521, 12536, 12549,
   12562, 12574, 12579, 12587, 12592, 12600, 12627, 12629, 12635, 12639,
   12643, 12644, 12648, 12675, 12677, 12681, 12685, 12689, 12696, 12697,
   12701, 12702, 12706, 12707, 12713, 12719, 12725, 12735, 12734, 12744,
   12745, 12750, 12751, 12752, 12757, 12758, 12759, 12763, 12764, 12768,
   12778, 12785, 12795, 12804, 12818, 12819, 12824, 12823, 12864, 12865,
   12866, 12870, 12870, 12894, 12895, 12899, 12900, 12901, 12905, 12910,
   12915, 12922, 12943, 12978, 12980, 12982, 12987, 12988, 12989, 12990,
   12991, 12995, 12996, 12997, 12998, 12999, 13000, 13010, 13011, 13016,
   13029, 13042, 13044, 13046, 13051, 13056, 13058, 13060, 13066, 13067,
   13069, 13075, 13074, 13088, 13089, 13093, 13098, 13106, 13106, 13131,
   13132, 13137, 13138, 13140, 13142, 13160, 13166, 13171, 13153, 13232,
   13250, 13275, 13307, 13311, 13319, 13342, 13271, 13407, 13431, 13440,
   13448, 13406, 13469, 13473, 13477, 13481, 13485, 13489, 13496, 13503,
   13510, 13520, 13521, 13525, 13526, 13527, 13531, 13532, 13537, 13539,
   13538, 13544, 13545, 13549, 13559
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CHAIN_SYM", "CHANGE",
  "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM", "CHECK_SYM",
  "CIPHER_SYM", "CLIENT_SYM", "CLOSE_SYM", "COALESCE", "CODE_SYM",
  "COLLATE_SYM", "COLLATION_SYM", "COLUMNS", "COLUMN_SYM", "COMMENT_SYM",
  "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM",
  "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM",
  "CONSISTENT_SYM", "CONSTRAINT", "CONTAINS_SYM", "CONTEXT_SYM",
  "CONTINUE_SYM", "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM",
  "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER",
  "CURSOR_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ", "EQUAL_SYM",
  "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM", "EVENT_SYM",
  "EVERY_SYM", "EXECUTE_SYM", "EXISTS", "EXIT_SYM", "EXPANSION_SYM",
  "EXTENDED_SYM", "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM",
  "FAST_SYM", "FAULTS_SYM", "FETCH_SYM", "FILE_SYM", "FIRST_SYM",
  "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM",
  "FOREIGN", "FOR_SYM", "FOUND_SYM", "FRAC_SECOND_SYM", "FROM", "FULL",
  "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GEOMETRYCOLLECTION",
  "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM", "GRANT", "GRANTS",
  "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM", "HANDLER_SYM", "HASH_SYM",
  "HAVING", "HELP_SYM", "HEX_NUM", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT", "IDENTIFIED_SYM", "IDENT_QUOTED",
  "IF", "IGNORE_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INNOBASE_SYM", "INOUT_SYM",
  "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD", "INSTALL_SYM",
  "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM",
  "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM",
  "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM",
  "LAST_SYM", "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM",
  "LEVEL_SYM", "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES",
  "LINESTRING", "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM",
  "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB",
  "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT",
  "MASTER_CONNECT_RETRY_SYM", "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM",
  "MASTER_LOG_POS_SYM", "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM",
  "MASTER_SERVER_ID_SYM", "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM",
  "MASTER_SSL_CERT_SYM", "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM",
  "MASTER_SSL_SYM", "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM",
  "MASTER_USER_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MICROSECOND_SYM", "MIGRATE_SYM", "MINUTE_MICROSECOND_SYM",
  "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS", "MIN_SYM", "MODE_SYM",
  "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM", "MONTH_SYM", "MULTILINESTRING",
  "MULTIPOINT", "MULTIPOLYGON", "MUTEX_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM",
  "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM",
  "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM",
  "ORDER_SYM", "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM",
  "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM",
  "PARTIAL", "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM",
  "PASSWORD", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM",
  "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM",
  "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE",
  "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESOURCES", "RESTORE_SYM",
  "RESTRICT", "RESUME_SYM", "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT",
  "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM",
  "ROW_FORMAT_SYM", "ROW_SYM", "RTREE_SYM", "SAVEPOINT_SYM",
  "SCHEDULE_SYM", "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM",
  "SELECT_SYM", "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM",
  "SERIAL_SYM", "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET",
  "SET_VAR", "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SMALLINT", "SNAPSHOT_SYM",
  "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBDATE_SYM", "SUBJECT_SYM",
  "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM",
  "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE",
  "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TEMPORARY", "TEMPTABLE_SYM", "TERMINATED",
  "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM", "TIMESTAMP",
  "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB", "TINYINT",
  "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM", "TRIGGERS_SYM",
  "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM", "TYPES_SYM",
  "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM", "UNCOMMITTED_SYM",
  "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XOR",
  "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'",
  "'*'", "'/'", "'%'", "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'",
  "'}'", "';'", "'@'", "'.'", "':'", "$accept", "query", "$@1",
  "opt_end_of_input", "verb_clause", "statement", "deallocate",
  "deallocate_or_drop", "prepare", "prepare_src", "execute", "$@2",
  "execute_using", "execute_var_list", "execute_var_ident", "help", "$@3",
  "change", "$@4", "master_defs", "master_def", "master_file_def",
  "create", "$@5", "$@6", "$@7", "$@8", "server_def",
  "server_options_list", "server_option", "event_tail", "$@9",
  "ev_schedule_time", "$@10", "opt_ev_status", "ev_starts", "ev_ends",
  "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@11", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@12", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@13", "$@14", "sp_cursor_stmt", "$@15",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "opt_value", "sp_hcond", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@16", "sp_proc_stmt_statement",
  "$@17", "sp_proc_stmt_return", "$@18", "sp_proc_stmt_unlabeled", "$@19",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@20", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@21", "$@22", "$@23", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@24", "$@25",
  "searched_case_stmt", "$@26", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@27", "$@28",
  "searched_when_clause", "$@29", "$@30", "else_clause_opt",
  "sp_labeled_control", "$@31", "sp_opt_label", "sp_labeled_block", "$@32",
  "sp_unlabeled_block", "$@33", "sp_block_content", "$@34",
  "sp_unlabeled_control", "$@35", "$@36", "$@37", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@38", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@39", "create3", "$@40", "$@41", "opt_partitioning",
  "partitioning", "$@42", "partition_entry", "$@43", "partition",
  "part_type_def", "$@44", "$@45", "$@46", "opt_linear", "part_field_list",
  "part_field_item_list", "part_field_item", "part_func", "sub_part_func",
  "opt_no_parts", "opt_sub_part", "$@47", "$@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_no_subparts", "part_defs",
  "part_def_list", "part_definition", "$@49", "part_name",
  "opt_part_values", "part_func_max", "max_value_sym", "part_range_func",
  "part_list_func", "part_list_item", "part_bit_expr", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@50", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@51", "$@52", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "field_list", "field_list_item", "column_def", "key_def",
  "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@53", "type", "$@54", "$@55",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "opt_binary", "opt_bin_mod", "opt_bin_charset",
  "opt_primary", "references", "$@56", "opt_ref_list", "ref_list",
  "opt_on_delete", "opt_on_delete_list", "opt_on_delete_item",
  "delete_option", "key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique_or_fulltext",
  "init_key_options", "key_alg", "key_options", "key_opts",
  "key_using_alg", "key_opt", "btree_or_rtree", "key_list", "key_part",
  "opt_ident", "opt_component", "string_list", "alter", "$@57", "$@58",
  "$@59", "$@60", "$@61", "$@62", "$@63",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@64", "$@65", "$@66",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@67", "add_part_extra", "reorg_partition_rule", "$@68",
  "reorg_parts_rule", "$@69", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@70", "$@71", "$@72",
  "opt_column", "opt_ignore", "opt_restrict", "opt_place", "opt_to",
  "slave", "$@73", "$@74", "start", "start_transaction_opts",
  "slave_thread_opts", "$@75", "slave_thread_opt_list", "slave_thread_opt",
  "slave_until", "slave_until_opts", "restore", "$@76", "backup", "$@77",
  "checksum", "$@78", "opt_checksum_type", "repair", "$@79",
  "opt_mi_repair_type", "mi_repair_types", "mi_repair_type", "analyze",
  "$@80", "binlog_base64_event", "check", "$@81", "opt_mi_check_type",
  "mi_check_types", "mi_check_type", "optimize", "$@82",
  "opt_no_write_to_binlog", "rename", "$@83", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "keycache_list",
  "assign_to_keycache", "key_cache_name", "preload", "$@84",
  "preload_list", "preload_keys", "cache_keys_spec", "$@85",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_init2", "$@86", "select_part2", "$@87", "$@88",
  "select_into", "select_from", "select_options", "select_option_list",
  "select_option", "select_lock_type", "select_item_list", "select_item",
  "remember_name", "remember_end", "select_item2", "select_alias",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "simple_expr",
  "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@89", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@90", "$@91", "$@92", "variable", "$@93", "variable_aux",
  "opt_distinct", "opt_gconcat_separator", "opt_gorder_clause",
  "in_sum_expr", "$@94", "cast_type", "opt_expr_list", "expr_list",
  "ident_list_arg", "ident_list", "opt_expr", "opt_else", "when_list",
  "table_ref", "join_table_list", "esc_table_ref", "derived_table_list",
  "join_table", "$@95", "$@96", "$@97", "$@98", "$@99", "$@100", "$@101",
  "normal_join", "table_factor", "$@102", "select_derived", "$@103",
  "select_derived2", "$@104", "$@105", "get_select_lex",
  "select_derived_init", "opt_outer", "index_hint_clause",
  "index_hint_type", "index_hint_definition", "$@106", "$@107",
  "index_hints_list", "opt_index_hints_list", "$@108",
  "opt_key_definition", "$@109", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "interval_time_st", "date_time_type", "table_alias", "opt_table_alias",
  "opt_all", "where_clause", "$@110", "having_clause", "$@111",
  "opt_escape", "group_clause", "group_list", "olap_opt",
  "alter_order_clause", "alter_order_list", "alter_order_item",
  "opt_order_clause", "order_clause", "$@112", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@113", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@114",
  "select_var_list", "select_var_ident", "into", "$@115",
  "into_destination", "$@116", "$@117", "do", "$@118", "drop", "$@119",
  "table_list", "table_name", "table_alias_ref_list", "table_alias_ref",
  "if_exists", "opt_temporary", "insert", "$@120", "$@121", "replace",
  "$@122", "$@123", "insert_lock_option", "replace_lock_option", "insert2",
  "insert_table", "insert_field_spec", "$@124", "fields", "insert_values",
  "$@125", "$@126", "values_list", "ident_eq_list", "ident_eq_value",
  "equal", "opt_equal", "no_braces", "$@127", "opt_values", "values",
  "expr_or_default", "opt_insert_update", "$@128", "update", "$@129",
  "$@130", "update_list", "update_elem", "insert_update_list",
  "insert_update_elem", "opt_low_priority", "delete", "$@131",
  "single_multi", "$@132", "$@133", "$@134", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@135", "show_param",
  "$@136", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@137", "$@138", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@139",
  "flush_options", "flush_option", "$@140", "opt_table_list", "reset",
  "$@141", "reset_options", "reset_option", "purge", "$@142",
  "purge_options", "purge_option", "kill", "kill_option", "use", "load",
  "$@143", "load_data", "$@144", "$@145", "$@146", "$@147", "opt_local",
  "load_data_lock", "opt_duplicate", "opt_field_term", "field_term_list",
  "field_term", "opt_line_term", "line_term_list", "line_term",
  "opt_ignore_lines", "opt_field_or_var_spec", "fields_or_vars",
  "field_or_var", "opt_load_data_set_spec", "text_literal", "text_string",
  "param_marker", "signed_literal", "literal", "NUM_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_nodb", "IDENT_sys", "TEXT_STRING_sys",
  "TEXT_STRING_literal", "TEXT_STRING_filesystem", "ident", "label_ident",
  "ident_or_text", "user", "keyword", "keyword_sp", "set", "$@148",
  "opt_option", "option_value_list", "option_type_value", "$@149",
  "option_type", "option_type2", "opt_var_type", "opt_var_ident_type",
  "ext_option_value", "sys_option_value", "option_value",
  "internal_variable_name", "isolation_types", "text_or_password",
  "set_expr_or_default", "lock", "$@150", "table_or_tables",
  "table_lock_list", "table_lock", "lock_option", "unlock", "$@151",
  "handler", "$@152", "handler_read_or_scan", "handler_scan_function",
  "handler_rkey_function", "$@153", "handler_rkey_mode", "revoke",
  "revoke_command", "grant", "grant_command", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@154", "$@155", "$@156", "$@157", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "grant_user", "opt_column_list", "column_list",
  "column_list_id", "require_clause", "grant_options", "grant_option_list",
  "grant_option", "begin", "$@158", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@159", "union_opt",
  "union_order_or_limit", "$@160", "order_or_limit", "union_option",
  "take_first_select", "subselect", "subselect_start", "subselect_end",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@161",
  "view_list_opt", "view_list", "view_select", "$@162", "view_select_aux",
  "view_check_option", "trigger_tail", "$@163", "$@164", "$@165",
  "udf_tail", "sf_tail", "$@166", "$@167", "$@168", "$@169", "$@170",
  "sp_tail", "$@171", "$@172", "$@173", "$@174", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@175", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     124,    38,    45,    43,    42,    47,    37,    94,   126,    40,
      41,    44,    33,   123,   125,    59,    64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   589,   590,   591,   590,   590,   592,   592,   593,   593,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   594,   594,   594,   594,   594,   594,   594,   594,   594,
     594,   595,   596,   596,   597,   598,   598,   600,   599,   601,
     601,   602,   602,   603,   605,   604,   607,   606,   608,   608,
     609,   609,   609,   609,   609,   609,   609,   609,   609,   609,
     609,   609,   609,   610,   610,   610,   610,   612,   611,   613,
     611,   614,   611,   615,   611,   611,   611,   611,   611,   616,
     617,   617,   618,   618,   618,   618,   618,   618,   618,   620,
     619,   622,   621,   621,   623,   623,   623,   623,   624,   624,
     625,   625,   626,   626,   627,   627,   628,   628,   630,   629,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   632,   633,   633,   634,   634,   635,   635,
     636,   636,   636,   636,   636,   636,   636,   637,   637,   637,
     638,   638,   640,   639,   641,   641,   642,   642,   643,   643,
     644,   644,   645,   645,   646,   647,   648,   648,   649,   649,
     650,   651,   651,   651,   651,   652,   652,   653,   653,   654,
     654,   656,   655,   655,   657,   655,   655,   659,   658,   660,
     660,   661,   661,   662,   663,   663,   664,   664,   665,   665,
     665,   665,   665,   666,   666,   667,   667,   668,   668,   668,
     668,   668,   668,   668,   668,   668,   668,   668,   668,   668,
     670,   669,   672,   671,   674,   673,   676,   675,   677,   678,
     679,   681,   680,   682,   683,   683,   683,   684,   684,   686,
     687,   688,   685,   689,   689,   689,   690,   690,   692,   693,
     691,   695,   694,   696,   696,   697,   697,   699,   700,   698,
     702,   703,   701,   704,   704,   706,   705,   707,   707,   709,
     708,   711,   710,   713,   712,   714,   715,   716,   714,   717,
     714,   718,   718,   719,   719,   719,   720,   721,   722,   723,
     723,   724,   724,   725,   726,   727,   727,   729,   728,   730,
     730,   730,   731,   731,   731,   732,   733,   733,   733,   734,
     734,   734,   734,   734,   734,   734,   734,   735,   736,   736,
     736,   737,   737,   737,   737,   737,   738,   739,   739,   739,
     740,   740,   740,   740,   740,   740,   740,   741,   742,   742,
     742,   743,   743,   743,   744,   745,   746,   747,   748,   749,
     749,   749,   750,   751,   752,   753,   754,   755,   756,   757,
     758,   759,   759,   760,   760,   761,   761,   762,   762,   762,
     762,   763,   764,   763,   765,   766,   765,   767,   765,   768,
     768,   770,   769,   772,   771,   773,   774,   775,   774,   776,
     774,   777,   774,   778,   778,   779,   779,   780,   780,   781,
     782,   783,   784,   784,   785,   786,   785,   787,   785,   788,
     788,   789,   790,   791,   791,   792,   792,   793,   793,   795,
     794,   796,   797,   797,   797,   798,   798,   799,   799,   800,
     801,   801,   802,   803,   804,   804,   805,   805,   807,   806,
     808,   809,   809,   810,   810,   811,   811,   811,   811,   811,
     811,   811,   811,   813,   814,   812,   815,   815,   816,   816,
     817,   817,   818,   818,   819,   819,   820,   820,   821,   822,
     822,   823,   823,   824,   824,   825,   825,   825,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   826,   826,   826,   826,   826,   826,   826,
     826,   826,   826,   827,   828,   829,   830,   831,   831,   831,
     831,   831,   831,   832,   832,   832,   833,   833,   834,   834,
     834,   834,   835,   835,   836,   836,   837,   837,   838,   838,
     838,   838,   838,   839,   839,   840,   841,   841,   842,   844,
     843,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   845,   845,   845,   845,
     845,   845,   845,   845,   845,   845,   846,   845,   847,   845,
     845,   845,   848,   848,   848,   848,   848,   848,   848,   848,
     849,   850,   850,   851,   851,   852,   852,   852,   852,   852,
     853,   853,   853,   853,   853,   854,   854,   854,   855,   855,
     855,   856,   857,   857,   858,   858,   859,   859,   859,   860,
     860,   860,   860,   861,   861,   862,   862,   863,   863,   864,
     864,   865,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   866,   866,   867,   867,   868,   868,   869,   869,
     870,   870,   871,   871,   872,   872,   873,   874,   874,   875,
     875,   876,   876,   877,   877,   877,   877,   877,   877,   878,
     878,   879,   879,   879,   879,   880,   880,   882,   881,   883,
     883,   884,   884,   885,   885,   886,   886,   887,   887,   887,
     887,   887,   888,   888,   888,   888,   888,   889,   889,   889,
     890,   890,   891,   891,   892,   892,   893,   893,   893,   894,
     894,   894,   894,   895,   896,   896,   897,   897,   898,   898,
     899,   899,   900,   900,   900,   901,   901,   901,   902,   902,
     903,   903,   904,   904,   905,   905,   906,   906,   908,   907,
     909,   907,   907,   910,   907,   911,   907,   912,   907,   913,
     907,   914,   907,   907,   907,   907,   907,   907,   915,   915,
     915,   915,   916,   916,   917,   917,   918,   918,   919,   919,
     919,   919,   919,   919,   919,   919,   919,   919,   920,   919,
     919,   921,   919,   922,   919,   919,   919,   923,   924,   924,
     926,   925,   927,   927,   927,   929,   928,   930,   931,   930,
     932,   932,   933,   934,   934,   935,   936,   936,   936,   937,
     936,   938,   939,   936,   936,   936,   936,   936,   936,   936,
     936,   936,   936,   936,   936,   936,   936,   940,   940,   941,
     941,   942,   942,   942,   943,   943,   943,   944,   944,   944,
     944,   946,   945,   945,   947,   945,   945,   948,   949,   949,
     951,   950,   952,   952,   953,   953,   953,   954,   954,   955,
     955,   957,   956,   959,   958,   961,   960,   962,   962,   962,
     964,   963,   965,   965,   966,   966,   967,   967,   967,   969,
     968,   970,   972,   971,   973,   973,   974,   974,   975,   975,
     975,   975,   975,   975,   977,   976,   978,   978,   978,   980,
     979,   979,   981,   981,   982,   982,   983,   984,   985,   985,
     986,   987,   987,   989,   988,   990,   990,   991,   993,   992,
     994,   994,   995,   995,   996,   997,   997,   998,   998,  1000,
     999,  1002,  1003,  1001,  1004,  1004,  1004,  1004,  1004,  1005,
    1005,  1006,  1006,  1007,  1007,  1008,  1008,  1008,  1008,  1008,
    1008,  1008,  1008,  1008,  1008,  1009,  1009,  1009,  1010,  1010,
    1010,  1011,  1012,  1013,  1014,  1014,  1015,  1015,  1015,  1015,
    1015,  1016,  1016,  1017,  1017,  1017,  1017,  1017,  1017,  1017,
    1017,  1017,  1017,  1017,  1018,  1018,  1018,  1018,  1018,  1018,
    1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,  1019,
    1019,  1019,  1019,  1019,  1020,  1020,  1020,  1020,  1020,  1020,
    1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1020,  1021,
    1021,  1022,  1022,  1023,  1023,  1024,  1024,  1025,  1025,  1025,
    1025,  1025,  1025,  1026,  1026,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,  1027,
    1027,  1027,  1027,  1027,  1027,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,  1028,
    1028,  1028,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,  1029,
    1029,  1029,  1029,  1029,  1029,  1029,  1029,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,  1030,
    1030,  1030,  1030,  1030,  1031,  1031,  1031,  1031,  1031,  1031,
    1031,  1031,  1033,  1032,  1032,  1034,  1034,  1035,  1035,  1036,
    1036,  1037,  1037,  1038,  1038,  1039,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1041,  1042,  1040,  1040,  1040,  1040,  1040,
    1040,  1040,  1040,  1040,  1040,  1040,  1043,  1040,  1045,  1044,
    1046,  1046,  1046,  1047,  1047,  1048,  1048,  1049,  1049,  1051,
    1050,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,  1052,
    1052,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1056,  1056,
    1057,  1057,  1058,  1058,  1059,  1059,  1060,  1060,  1061,  1062,
    1062,  1063,  1063,  1064,  1064,  1065,  1064,  1066,  1064,  1067,
    1064,  1064,  1068,  1064,  1069,  1064,  1064,  1070,  1064,  1071,
    1064,  1064,  1072,  1072,  1072,  1074,  1073,  1073,  1073,  1076,
    1075,  1078,  1079,  1077,  1080,  1081,  1082,  1082,  1083,  1083,
    1083,  1083,  1084,  1084,  1086,  1085,  1087,  1085,  1088,  1088,
    1089,  1090,  1089,  1092,  1091,  1093,  1093,  1094,  1094,  1095,
    1095,  1096,  1096,  1097,  1097,  1097,  1097,  1097,  1097,  1097,
    1097,  1097,  1097,  1097,  1097,  1098,  1098,  1099,  1099,  1099,
    1099,  1099,  1099,  1099,  1099,  1099,  1100,  1100,  1100,  1100,
    1101,  1101,  1101,  1102,  1102,  1103,  1103,  1104,  1105,  1104,
    1106,  1107,  1106,  1108,  1108,  1109,  1109,  1110,  1110,  1111,
    1111,  1111,  1112,  1113,  1113,  1114,  1115,  1115,  1117,  1116,
    1118,  1118,  1119,  1119,  1119,  1120,  1120,  1121,  1121,  1122,
    1123,  1123,  1123,  1124,  1124,  1124,  1124,  1125,  1125,  1126,
    1126,  1126,  1126,  1126,  1126,  1127,  1127,  1127,  1127,  1127,
    1128,  1128,  1128,  1128,  1128,  1129,  1129,  1129,  1129,  1130,
    1131,  1131,  1132,  1133,  1132,  1134,  1134,  1135,  1135,  1136,
    1138,  1137,  1139,  1139,  1140,  1140,  1142,  1141,  1144,  1145,
    1143,  1143,  1143,  1147,  1146,  1148,  1149,  1148,  1148,  1148,
    1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1148,  1150,
    1150,  1151,  1152,  1152,  1153,  1154,  1154,  1155,  1155,  1157,
    1158,  1156,  1160,  1161,  1159,  1162,  1162,  1162,  1162,  1163,
    1163,  1164,  1164,  1165,  1166,  1166,  1166,  1167,  1166,  1168,
    1168,  1169,  1169,  1170,  1169,  1171,  1169,  1172,  1172,  1173,
    1173,  1174,  1175,  1175,  1176,  1176,  1178,  1177,  1179,  1179,
    1180,  1180,  1181,  1181,  1182,  1183,  1182,  1185,  1186,  1184,
    1187,  1187,  1188,  1189,  1189,  1190,  1191,  1191,  1193,  1192,
    1195,  1194,  1196,  1194,  1197,  1194,  1198,  1198,  1199,  1199,
    1200,  1200,  1201,  1201,  1202,  1202,  1202,  1203,  1204,  1204,
    1205,  1205,  1206,  1206,  1207,  1207,  1207,  1207,  1207,  1207,
    1207,  1207,  1207,  1208,  1208,  1210,  1209,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1212,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,
    1211,  1211,  1211,  1211,  1211,  1211,  1211,  1211,  1213,  1213,
    1213,  1214,  1214,  1215,  1215,  1216,  1216,  1217,  1217,  1218,
    1218,  1219,  1219,  1220,  1220,  1221,  1221,  1221,  1223,  1222,
    1224,  1222,  1225,  1225,  1226,  1226,  1226,  1227,  1227,  1227,
    1229,  1228,  1230,  1230,  1232,  1231,  1231,  1231,  1231,  1231,
    1231,  1231,  1231,  1231,  1231,  1231,  1233,  1233,  1235,  1234,
    1236,  1236,  1237,  1237,  1237,  1239,  1238,  1240,  1241,  1241,
    1242,  1243,  1243,  1243,  1244,  1246,  1245,  1245,  1248,  1249,
    1250,  1251,  1247,  1247,  1252,  1252,  1253,  1253,  1253,  1254,
    1254,  1254,  1255,  1255,  1256,  1256,  1257,  1257,  1257,  1257,
    1258,  1258,  1259,  1259,  1260,  1260,  1261,  1261,  1262,  1262,
    1262,  1263,  1263,  1264,  1264,  1265,  1265,  1266,  1266,  1266,
    1266,  1267,  1267,  1267,  1268,  1269,  1269,  1269,  1270,  1270,
    1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,  1270,
    1271,  1271,  1271,  1271,  1271,  1272,  1272,  1273,  1273,  1274,
    1275,  1275,  1276,  1276,  1277,  1277,  1277,  1278,  1278,  1278,
    1278,  1279,  1279,  1279,  1280,  1281,  1281,  1282,  1283,  1284,
    1285,  1285,  1286,  1286,  1287,  1287,  1287,  1288,  1288,  1288,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,  1289,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,  1290,
    1292,  1291,  1293,  1293,  1294,  1294,  1296,  1295,  1297,  1297,
    1297,  1297,  1298,  1298,  1299,  1299,  1299,  1299,  1300,  1300,
    1300,  1300,  1301,  1301,  1302,  1302,  1303,  1303,  1303,  1303,
    1303,  1303,  1303,  1304,  1304,  1304,  1305,  1305,  1305,  1305,
    1306,  1306,  1306,  1307,  1307,  1307,  1307,  1307,  1309,  1308,
    1310,  1310,  1311,  1311,  1312,  1313,  1313,  1313,  1313,  1315,
    1314,  1316,  1316,  1317,  1316,  1318,  1318,  1319,  1319,  1320,
    1320,  1320,  1320,  1321,  1320,  1322,  1322,  1322,  1322,  1322,
    1323,  1324,  1324,  1324,  1324,  1325,  1326,  1326,  1326,  1327,
    1327,  1328,  1328,  1329,  1329,  1330,  1330,  1332,  1331,  1333,
    1331,  1334,  1331,  1335,  1331,  1331,  1331,  1331,  1331,  1331,
    1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,
    1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,  1331,
    1336,  1336,  1337,  1337,  1338,  1338,  1338,  1339,  1339,  1339,
    1339,  1340,  1340,  1341,  1341,  1342,  1342,  1342,  1343,  1343,
    1344,  1344,  1345,  1346,  1346,  1346,  1346,  1346,  1347,  1347,
    1348,  1348,  1349,  1349,  1349,  1349,  1349,  1351,  1350,  1352,
    1352,  1353,  1353,  1353,  1354,  1354,  1354,  1355,  1355,  1356,
    1357,  1357,  1358,  1359,  1360,  1360,  1362,  1361,  1363,  1363,
    1363,  1365,  1364,  1366,  1366,  1367,  1367,  1367,  1368,  1369,
    1369,  1370,  1371,  1372,  1372,  1372,  1373,  1373,  1373,  1373,
    1373,  1374,  1374,  1374,  1374,  1374,  1374,  1375,  1375,  1376,
    1377,  1378,  1378,  1378,  1379,  1380,  1380,  1380,  1381,  1381,
    1381,  1383,  1382,  1384,  1384,  1385,  1385,  1387,  1386,  1388,
    1388,  1389,  1389,  1389,  1389,  1391,  1392,  1393,  1390,  1394,
    1394,  1396,  1397,  1398,  1399,  1400,  1395,  1402,  1403,  1404,
    1405,  1401,  1406,  1406,  1406,  1406,  1406,  1406,  1407,  1407,
    1407,  1408,  1408,  1409,  1409,  1409,  1410,  1410,  1411,  1412,
    1411,  1413,  1413,  1414,  1415
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     3,     3,     3,     3,     0,     7,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      12,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     3,     0,     1,     1,     1,
       1,     2,     1,     1,     3,     0,     2,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     5,     0,     2,     0,     3,     0,     2,     2,     2,
       2,     0,     6,     2,     0,     2,     1,     1,     3,     0,
       0,     0,     7,     0,     2,     2,     1,     1,     0,     0,
       8,     0,     6,     1,     2,     1,     2,     0,     0,     6,
       0,     0,     6,     0,     2,     0,     5,     0,     1,     0,
       5,     0,     2,     0,     5,     4,     0,     0,     8,     0,
       7,     1,     1,     1,     1,     1,     2,     4,     5,     0,
       4,     4,     4,     3,     3,     2,     2,     0,     2,     1,
       2,     3,     1,     1,     1,     1,     1,     2,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     2,     2,     2,     1,     1,     1,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       4,     0,     1,     1,     1,     1,     1,     2,     3,     2,
       4,     5,     0,     5,     0,     0,     5,     0,     7,     0,
       1,     0,     3,     0,     3,     5,     5,     0,     4,     0,
       3,     0,     3,     0,     1,     0,     1,     1,     3,     1,
       5,     5,     0,     2,     0,     0,     7,     0,     9,     1,
       3,     1,     1,     0,     2,     0,     3,     1,     3,     0,
       6,     1,     0,     4,     5,     1,     1,     1,     3,     3,
       1,     3,     1,     1,     0,     3,     1,     3,     0,     4,
       1,     0,     1,     2,     1,     3,     4,     3,     3,     3,
       4,     4,     3,     0,     0,     6,     0,     1,     0,     1,
       1,     2,     1,     1,     0,     1,     1,     2,     1,     0,
       3,     0,     1,     1,     2,     1,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     5,     1,     1,     3,     4,     4,     2,     2,
       2,     3,     3,     4,     4,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     2,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     7,     8,
       8,     2,     2,     0,     1,     2,     0,     1,     2,     0,
       4,     3,     3,     3,     1,     2,     1,     1,     3,     2,
       3,     2,     2,     1,     3,     3,     2,     3,     1,     1,
       2,     1,     1,     2,     1,     1,     1,     2,     3,     2,
       3,     2,     2,     3,     3,     3,     0,     6,     0,     6,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     1,     2,     1,     2,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     0,     1,
       1,     5,     0,     1,     2,     1,     1,     1,     1,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     1,     2,
       1,     1,     2,     2,     4,     1,     3,     2,     1,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     0,     2,     1,     2,     3,     2,     0,
       1,     0,     1,     1,     2,     0,     1,     0,     4,     1,
       4,     3,     1,     0,     1,     2,     1,     3,     3,     2,
       2,     2,     1,     1,     2,     2,     2,     1,     2,     2,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     1,     4,     2,
       1,     4,     0,     1,     0,     2,     1,     3,     0,     6,
       0,     5,     7,     0,     5,     0,     5,     0,     5,     0,
       4,     0,    10,     3,     4,     3,     3,     7,     0,     3,
       1,     4,     0,     3,     0,     2,     0,     1,     0,     2,
       2,     2,     2,     1,     1,     1,     3,     4,     0,     6,
       4,     0,     5,     0,     6,     4,     1,     2,     1,     1,
       0,     5,     0,     3,     2,     0,     5,     0,     0,     6,
       1,     3,     1,     1,     3,     2,     3,     2,     4,     0,
       6,     0,     0,     8,     4,     4,     3,     3,     2,     2,
       6,     5,     3,     5,     1,     1,     1,     0,     1,     0,
       1,     0,     1,     1,     0,     2,     1,     0,     1,     1,
       1,     0,     5,     3,     0,     5,     3,     3,     0,     3,
       0,     2,     1,     3,     0,     1,     1,     0,     2,     1,
       3,     0,     6,     0,     6,     0,     5,     0,     1,     1,
       0,     6,     0,     1,     1,     2,     1,     1,     1,     0,
       5,     2,     0,     5,     0,     1,     1,     2,     1,     1,
       1,     1,     1,     2,     0,     5,     0,     1,     1,     0,
       4,     4,     3,     5,     1,     3,     3,     5,     1,     3,
       2,     1,     1,     0,     6,     1,     3,     3,     0,     2,
       0,     4,     0,     2,     1,     2,     4,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     2,     4,     3,     1,
       1,     4,     0,     0,     1,     1,     0,     2,     2,     1,
       1,     0,     2,     3,     3,     3,     2,     3,     4,     3,
       4,     3,     4,     1,     3,     4,     3,     3,     6,     1,
       5,     6,     5,     7,     6,     8,     5,     6,     4,     4,
       5,     3,     4,     1,     3,     3,     3,     3,     3,     3,
       5,     5,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     1,     1,     1,     1,     3,     2,     2,     2,     2,
       3,     3,     5,     6,     4,     4,     7,     2,     6,     5,
       6,     6,     4,     4,     5,     4,     6,     2,     4,     4,
       4,    10,     6,     8,     6,     4,     4,     6,     4,     4,
       4,     6,     4,     7,     7,     7,     6,     6,     6,     6,
       3,     4,     6,     8,     2,     2,     4,     8,     8,     6,
       6,     2,     4,     6,     6,     8,     8,     6,     8,     6,
       2,     4,     8,     8,     2,     2,     2,     4,     4,     4,
       4,     3,     8,     4,     6,     4,     4,     4,     6,     8,
       6,     4,     6,     1,     6,     4,     4,     4,     4,     4,
       6,     4,     0,     5,     6,     2,     3,     0,     4,     0,
       3,     0,     1,     1,     3,     4,     4,     5,     4,     4,
       4,     5,     4,     0,     0,     7,     4,     5,     4,     5,
       4,     4,     4,     4,     4,     5,     0,     8,     0,     3,
       3,     1,     4,     0,     1,     0,     2,     0,     1,     0,
       3,     2,     3,     2,     1,     2,     1,     2,     1,     1,
       1,     2,     0,     1,     1,     3,     1,     3,     1,     3,
       0,     1,     0,     2,     4,     5,     1,     1,     1,     1,
       4,     1,     3,     3,     3,     0,     6,     0,     6,     0,
       8,     4,     0,     8,     0,    10,     6,     0,     8,     0,
      10,     6,     1,     2,     2,     0,     4,     3,     6,     0,
       3,     0,     0,     5,     0,     1,     0,     1,     0,     2,
       3,     3,     1,     1,     0,     7,     0,     7,     1,     2,
       0,     0,     2,     0,     2,     0,     1,     1,     1,     1,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     2,     0,     1,     0,     0,     3,
       0,     0,     3,     2,     0,     0,     4,     4,     2,     0,
       2,     2,     3,     3,     1,     2,     0,     1,     0,     4,
       4,     2,     0,     1,     1,     0,     1,     0,     1,     2,
       1,     3,     3,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     0,     6,     0,     1,     3,     1,     3,
       0,     2,     3,     1,     2,     1,     0,     3,     0,     0,
       7,     2,     1,     0,     3,     6,     0,     6,     4,     6,
       4,     4,     4,     5,     4,     4,     5,     6,     4,     1,
       3,     1,     1,     3,     1,     0,     2,     0,     1,     0,
       0,     8,     0,     0,     6,     0,     1,     1,     1,     1,
       1,     2,     1,     1,     1,     3,     4,     0,     3,     3,
       1,     2,     2,     0,     3,     0,     5,     3,     1,     3,
       1,     3,     1,     1,     0,     1,     0,     4,     0,     1,
       3,     1,     1,     1,     0,     0,     6,     0,     0,    11,
       3,     1,     3,     3,     1,     3,     0,     1,     0,     4,
       0,     6,     0,     5,     0,     6,     1,     3,     3,     5,
       0,     2,     0,     2,     1,     1,     1,     3,     0,     1,
       0,     1,     1,     3,     1,     1,     2,     2,     2,     1,
       1,     1,     1,     0,     3,     0,     3,     2,     4,     4,
       3,     4,     4,     2,     1,     3,     3,     6,    16,     2,
       2,     0,     6,     5,     2,     2,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     2,     2,
       3,     2,     2,     1,     3,     4,     3,     3,     2,     2,
       3,     3,     3,     3,     3,     3,     3,     3,     1,     1,
       1,     1,     1,     0,     1,     0,     2,     0,     1,     1,
       1,     0,     2,     0,     2,     0,     2,     2,     0,     4,
       0,     4,     1,     1,     0,     1,     1,     0,     1,     1,
       0,     4,     3,     1,     0,     3,     4,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     0,     3,
       3,     1,     1,     1,     2,     0,     3,     3,     2,     2,
       3,     0,     1,     1,     2,     0,     4,     5,     0,     0,
       0,     0,    18,     2,     0,     1,     0,     1,     1,     0,
       1,     1,     0,     2,     2,     1,     3,     4,     3,     3,
       0,     2,     2,     1,     3,     3,     0,     3,     0,     3,
       2,     3,     1,     1,     2,     0,     2,     1,     1,     2,
       2,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     1,     3,     4,     5,     1,     5,     3,
       2,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     0,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     0,     1,     0,     1,     1,     1,     0,     2,
       2,     2,     1,     2,     4,     5,     4,     6,     2,     3,
       3,     3,     5,     1,     3,     3,     2,     2,     2,     1,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     4,
       1,     1,     1,     3,     3,     1,     1,     2,     2,     0,
       3,     4,     3,     0,     7,     1,     2,     1,     1,     1,
       1,     1,     1,     0,     5,     1,     1,     1,     1,     1,
       3,     6,     6,     6,     7,     3,     8,     8,     8,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       0,     1,     3,     1,     2,     2,     2,     1,     3,     3,
       1,     1,     3,     1,     3,     4,     5,     1,     0,     3,
       3,     1,     1,     0,     2,     2,     2,     2,     0,     2,
       2,     1,     2,     2,     2,     2,     2,     0,     3,     0,
       1,     0,     3,     2,     0,     1,     2,     0,     1,     4,
       4,     5,     2,     3,     0,     1,     0,     4,     0,     1,
       1,     0,     2,     2,     1,     0,     1,     1,     0,     5,
       6,     0,     0,     2,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     2,     1,     2,     3,     3,     3,     0,     3,
       3,     0,     7,     0,     3,     1,     3,     0,     3,     2,
       4,     0,     3,     4,     4,     0,     0,     0,    16,     8,
       7,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,    12,     4,     4,     3,     4,     3,     2,     1,     3,
       5,     1,     1,     0,     1,     1,     0,     2,     0,     0,
       3,     0,     2,     5,     3
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2299,   916,     0,  2247,     0,     0,     0,     0,     0,
       0,  2249,   103,    62,  1508,  1622,  1623,  1423,  1447,     2,
       0,   916,   153,     0,    74,  1449,     0,  1661,     0,     0,
     916,   403,     0,  1655,     0,     0,   916,  1452,  1648,     0,
     153,  2249,     0,   951,  2082,  1545,     0,     0,     0,  1528,
       0,  2139,  1497,     0,     0,     0,     0,     3,     8,    20,
       0,    39,    25,    29,    15,    19,    14,    37,    10,    53,
      54,    46,    12,    17,    43,    11,    13,    16,    35,    42,
      36,    38,    50,   944,    23,    24,    30,    44,    58,    21,
      55,    52,    22,  1624,    26,    45,    40,    32,    59,    33,
      51,    34,    57,    28,    47,    27,     9,    18,    48,    49,
      41,    60,    31,    56,     0,   786,     0,     0,   850,     0,
       0,     0,     0,     0,   769,  2297,  2298,  2299,   918,   917,
       0,  2131,  2130,   883,  2249,  1757,   901,     0,  1820,  1821,
    1822,  1823,  1824,  1825,  1826,  1771,  1827,  1828,  1830,  1829,
    1831,  1832,  1772,  1773,  1833,  1834,  1835,  1837,  1836,  1838,
    1774,  1775,  1839,  1840,  1841,  1776,  1777,  1842,  1843,  1778,
    1844,  1845,  1846,  1847,  1779,  1848,  1780,  1849,  1850,  1851,
    1852,  1853,  1854,  1781,  1855,  1856,  1857,  1858,  1860,  1859,
    1861,  1862,  1863,  1782,  1864,  1865,  1866,  1867,  1868,  1869,
    1870,  1783,  1871,  1872,  1873,  1889,  1784,  1874,  1877,  1876,
    1875,  1878,  1879,  1881,  1880,  1882,  1785,  1883,  1884,  1885,
    1887,  1886,  1891,  1892,  1893,  1786,  1888,  1894,  1890,  2062,
    1896,  1895,  1897,  1899,  1898,  1787,  1900,  1788,  1789,  1901,
    1902,  1755,  1903,  1756,  1905,  1906,  1907,  1912,  1913,  1790,
    1904,  1908,  1909,  1910,  1911,  1914,  1791,  1915,  1916,  1917,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1934,  1927,  1929,
    1930,  1932,  1928,  1933,  1937,  1936,  1938,  1939,  1940,  1935,
    1926,  1931,  1941,  1942,  1925,  1943,  1944,  1945,  1946,  1947,
    1948,  1949,  1950,  1951,  1952,  1953,  1955,  1954,  1956,  1957,
    1958,  1959,  1960,  1962,  1961,  1963,  1964,  1965,  1967,  1966,
    1969,  1970,  1792,  1968,  1971,  1972,  1973,  1974,  1975,  1793,
    1794,  1795,  1976,  1977,  1796,  1978,  1979,  1980,  1797,  1981,
    1982,  1984,  1983,  1985,  1986,  1798,  1799,  1987,  1988,  1989,
    1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,
    2001,  2000,  2002,  2003,  2004,  2005,  2006,  1800,  2007,  1801,
    2008,  2009,  1802,  2010,  1803,  2011,  2012,  1804,  2013,  2014,
    2015,  2016,  2017,  2018,  1805,  2019,  2020,  1806,  2022,  2021,
    2023,  1807,  2025,  2026,  1808,  2024,  1810,  2027,  1809,  1811,
    2028,  2029,  2031,  2030,  2032,  2033,  2034,  1812,  2035,  1813,
    2036,  2037,  2038,  2039,  2041,  2040,  2042,  2043,  2044,  2045,
    2046,  2048,  2047,  2049,  2050,  2051,  2052,  2055,  2056,  2057,
    2058,  2053,  2054,  1814,  2059,  2060,  2061,  2063,  2064,  2066,
    2065,  1815,  1816,  2067,  2068,  1819,  2069,  2070,  2073,  2071,
    2072,  2075,  2074,  2076,  2077,  1817,  2078,  1818,  2079,   172,
    1760,   155,  1761,  1770,     0,   885,   902,  2250,  2251,   489,
     731,     0,     0,   732,     0,   488,   730,   153,  2299,   108,
       0,   485,   486,     0,  1522,     0,  1445,  1445,  1445,     0,
       0,  1445,  1445,     0,  1448,  1445,   153,  1445,     0,    67,
    1630,     0,     0,     0,     0,  1754,     0,  1455,     0,  1662,
    1663,     0,  1665,     0,     0,  2128,     0,     0,     0,     0,
       0,   153,   919,     0,  1506,     0,   881,     0,  2251,  2262,
     945,   949,   961,  2083,  2080,  1607,   870,   870,   870,   868,
     870,  1529,     0,     0,     0,  1506,  1664,  2351,     0,     0,
       0,  2347,     0,  2352,     0,   951,     0,     0,     1,     5,
       0,     0,  1884,  1980,  1620,  1618,  1751,     0,   760,   787,
       0,   765,     0,   763,  1766,  1765,  1764,     0,   776,   775,
     773,     0,   367,     0,     0,  2308,   767,   899,     0,  2248,
       0,   928,   938,   174,     0,    76,     0,     0,     0,  2254,
       0,     0,     0,     0,   107,     0,     0,     0,   104,   982,
     982,  2299,  2301,  2303,   489,   487,     0,  1526,  1525,  1524,
       0,  1522,  1821,  1771,  1832,     0,  1724,     0,     0,     0,
    1230,     0,  1776,     0,  1844,  1846,  1781,     0,     0,   991,
     991,   991,     0,     0,     0,  1862,  1863,  1733,     0,     0,
       0,  1721,  1734,  1896,  1897,     0,  1723,  1902,     0,     0,
       0,     0,  1919,  1731,     0,     0,  1950,  1952,     0,     0,
    1956,  1957,  1958,  1959,  1708,  1046,     0,   991,  1720,  1730,
    1973,  1714,  1981,  1985,  1986,     0,  1994,     0,     0,     0,
    2017,  2020,     0,     0,  2038,     0,     0,   991,  1707,  2055,
    2056,  2057,  2058,     0,  1722,  1814,  1732,     0,  2069,   991,
     991,   991,     0,     0,     0,  2076,  2079,     0,     0,     0,
       0,  1045,     0,  1198,     0,  1224,  1003,  1009,  1023,     0,
    1038,  1056,  1057,  1059,  1153,  1058,  1064,  1063,  1424,  1718,
    1062,  1061,  1719,  1055,  1741,  1760,  1740,     0,     0,     0,
       0,     0,     0,     0,     0,  1603,     0,     0,     0,  1445,
      69,     0,  2173,  2188,  2189,  2185,  2190,  2208,  2191,  2195,
       0,  2187,  2179,     0,  2194,  2183,  2192,     0,  2177,     0,
    2193,  2198,  2209,  2181,  2186,  2165,     0,  2171,  2175,  1753,
    1330,  2142,  2143,     0,    75,  1457,  1458,  1456,   849,     0,
    1660,  1676,     0,     0,     0,   914,   413,   404,     0,  1602,
    1601,     0,  1656,  2263,     0,     0,   890,  1460,  1507,     0,
    1459,  1653,     0,  1652,  1649,  1651,     0,  2173,  2160,     0,
    2257,  2254,  2264,   974,   967,   966,   969,   970,   973,   971,
     972,   968,   965,   982,   962,   964,  2086,  1567,     0,   665,
       0,  1615,     0,  1568,     0,     0,  1615,     0,  1365,  1605,
    1608,     0,  2095,  1583,   728,   727,     0,   726,  2096,  1601,
       0,     0,     0,  1554,  1569,     0,  1530,  1574,  2097,     0,
    1604,     0,  1365,  1615,     0,  1546,     0,     0,     0,     0,
     864,   874,   866,   861,     0,   867,   863,  1527,  1441,  2364,
    2140,   849,  1713,  1712,  1758,  2348,  1711,  2356,  2358,  2344,
    2346,  2353,   947,     0,  2268,     6,    61,     0,  1627,  2306,
    2307,  2305,   681,     0,   991,  1767,  2300,   156,   774,     0,
     368,   156,     0,     0,     0,     0,     0,   369,   370,   306,
     758,   771,     0,     0,   770,  2308,     0,     0,  1439,     0,
       0,   930,   940,   176,   173,   154,     0,   887,   904,  2253,
       0,     0,  2255,  2259,  1044,  1043,     0,   101,   106,     0,
       0,     0,  2227,   105,  2223,  2304,   982,   489,   982,   982,
    2296,     0,  2284,  2291,  2292,  2295,  2294,  2293,  2290,     0,
    2283,  2286,  2287,  2289,  2288,  2308,  2302,     0,   733,     0,
    1509,  1512,  1516,  1520,  1523,     0,     0,  1335,  1077,  1335,
    1335,  1335,  1231,     0,     0,     0,     0,     0,     0,     0,
       0,  1335,     0,  1114,  1087,     0,  1115,     0,     0,     0,
       0,     0,  1727,     0,     0,     0,     0,     0,     0,  1203,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1226,
    1228,  1740,  1335,     0,     0,  1335,     0,     0,     0,     0,
       0,   996,     0,  1121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1335,  1335,     0,     0,  1335,
       0,  1130,     0,  1729,     0,     0,     0,  1728,     0,     0,
    1726,  1725,  1709,     0,  1134,  1136,  1135,     0,  1335,  1335,
       0,     0,  1067,  1066,  1068,  2281,     0,     0,     0,     0,
       0,     0,  1042,  1041,  1040,  1039,     0,     0,     0,  1047,
       0,  1048,  1049,     0,  1050,  1051,  1052,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1069,     0,     0,     0,
    1710,  1162,     0,  1446,  1428,  1434,  1430,     0,  1603,  1431,
    1438,   381,     0,  1435,  2221,  1432,   851,     0,     0,    68,
    1644,  1638,  1640,  1643,  1639,     0,  1645,  1642,  1641,  2131,
    1631,  1633,  1634,  2174,  2172,  2206,  2205,     0,  2207,  2203,
    2196,  2228,  2200,  2228,  2202,  2201,  2228,  2197,  2204,  2228,
    2169,     0,  1331,  1332,     0,  2141,     0,  1752,     0,     0,
    1677,     0,  1678,  1666,  1674,   933,     0,  1330,  2129,  2132,
       0,   414,   411,   409,   422,     0,     0,    64,    65,     0,
     921,     0,   920,   924,     0,     0,     0,  1463,  1453,  1462,
    1654,     0,     0,  2172,  2169,  2258,     0,  2260,  2275,   950,
    2265,   980,   952,   979,     0,   963,  2081,  2084,  2092,  1611,
     664,     0,     0,  1582,  1564,     0,   489,     0,     0,     0,
       0,     0,     0,  1547,     0,     0,   526,     0,  1573,  1366,
    1609,  1610,  1615,     0,     0,  1615,     0,  1577,  1588,  1578,
       0,  1605,     0,  1615,  1542,     0,     0,  1534,  1539,  1535,
       0,  1541,  1540,  1543,  1531,  1532,  1560,  1589,  1605,  1565,
    1572,  1581,     0,  1559,  1566,     0,  1553,  1579,  1605,  1605,
    1615,  1615,   877,   876,   875,   871,   872,   877,     0,  1265,
       0,     0,  2345,  2359,  2343,  2354,  2355,  2342,   948,  2269,
     946,  2270,     0,     7,     4,  1621,  1619,  1628,  1629,   682,
     681,   480,   483,   482,     0,     0,  1769,     0,   766,     0,
    1603,   764,     0,     0,  1603,   317,  1603,   371,   681,   778,
       0,     0,   768,   900,     0,     0,   932,   927,   931,   929,
     723,   722,     0,   939,     0,   177,   179,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    77,    78,    92,   889,   888,   886,   912,
     911,   909,     0,   910,   908,   903,   905,   906,  2252,  2256,
     490,   681,  1603,     0,   309,     0,     0,     0,     0,     0,
       0,     0,     0,  2285,    97,   734,     0,  1514,  1442,  1510,
       0,     0,     0,  1330,     0,     0,  1336,  1335,     0,  1209,
       0,     0,     0,     0,  1232,     0,     0,     0,     0,     0,
       0,     0,  1183,     0,  1209,   992,     0,  1141,     0,     0,
       0,     0,     0,  2281,     0,  1304,  1305,  1306,  1307,  1317,
    1308,  1309,  1310,  1319,  1324,  1311,  1312,  1320,  1321,  1322,
    1313,  1323,  1318,  1314,  1325,     0,  1303,     0,  1328,  1326,
    1329,  1327,     0,  1204,  1196,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1335,     0,     0,     0,
    1335,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1335,     0,     0,     0,  1316,     0,  1315,
       0,     0,     0,     0,     0,     0,     0,  1110,     0,  1743,
    1742,     0,     0,     0,     0,   951,     0,  1071,     0,  1070,
       0,  2098,  1199,  1201,     0,   994,   993,   995,  1006,   999,
    1004,   997,  1001,     0,  1053,  1826,  1007,     0,     0,  1035,
       0,  1344,  1036,  1021,  1026,  1027,     0,  1024,  1025,     0,
    1029,     0,  1028,  1032,  1033,  1034,  1037,     0,     0,     0,
       0,  1060,  1065,  1225,   982,  1744,     0,  1426,   381,   384,
     383,  1436,   382,  1484,     0,   853,   852,  1433,   851,     0,
      70,    72,  1637,     0,     0,  1646,  2199,     0,  2180,  2184,
    2178,  2182,     0,     0,  2170,     0,  2176,  1334,  1892,  1966,
       0,  1337,  2145,  1450,  2363,  1673,  1675,     0,     0,  1667,
       0,     0,   915,     0,     0,     0,   424,   407,     0,    66,
       0,     0,  1657,     0,     0,     0,     0,   892,  1461,     0,
    1650,     0,     0,     0,     0,     0,  2261,  2277,  2276,  2266,
     982,  1356,   983,   985,   984,  1740,  2086,  2089,  2090,  2093,
    2091,     0,  2088,  2087,  2102,     0,  1613,  1616,  1617,     0,
       0,  1597,  1591,  1590,  1586,  1592,  1587,  1600,  1599,  1598,
    1556,  1555,  1375,  1376,  1374,  1369,  1370,  1373,  1550,  1606,
    1596,  1594,  1584,     0,  1615,  1595,  1593,  1536,  1537,  1538,
       0,  1365,     0,  1615,  1605,     0,  1615,  1615,  1576,  1580,
       0,   865,   874,   862,   869,  1275,  1274,     0,  1239,     0,
    1241,  1238,  1237,  1236,     0,  1274,  2349,  2357,  2361,     0,
    1365,  2274,  2272,   481,  1484,  1484,     0,  1768,     0,     0,
       0,     0,     0,     0,     0,   157,   166,     0,     0,   315,
     316,  1484,   314,   357,   358,   361,   362,   363,     0,     0,
       0,     0,     0,     0,     0,     0,   110,   364,  1484,  1484,
     311,   337,   338,   341,   342,   343,   344,   345,   307,     0,
     312,   847,   847,     0,  1484,  1484,   847,  1484,     0,     0,
    1484,  1484,     0,     0,  1484,     0,     0,   847,     0,  1484,
     845,     0,     0,  1484,  1484,  1484,  1484,   847,     0,     0,
    1484,   401,  1484,     0,     0,   857,     0,     0,  1484,     0,
       0,  1484,  1484,  1484,   794,   844,   493,   513,   514,   759,
     793,   795,   806,   399,     0,   823,   846,     0,   780,   782,
    2309,  2310,  2311,   884,  1440,  1295,   175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   913,   907,   102,   681,  1484,
    1484,  1484,  1484,   313,   346,   347,   350,   351,   352,   353,
     356,   354,   355,     0,     0,  1603,     0,  2224,     0,   119,
    2337,     0,     0,   155,   491,     0,     0,   735,     0,     0,
       0,  1337,  1517,  1265,  1521,  1520,  1518,     0,  1137,     0,
    1176,     0,  1178,  1179,  1180,     0,     0,     0,     0,     0,
    1138,     0,  1085,  1139,  1140,     0,     0,     0,     0,  1182,
       0,  1116,     0,     0,  1088,  1089,  1082,  1074,     0,  1155,
       0,     0,  1090,     0,     0,     0,     0,     0,  1156,  1227,
       0,  1229,  1744,     0,  1188,  1143,  1095,     0,  1186,     0,
    1096,  1157,  1158,  1159,  1122,  1145,  1146,     0,  1161,     0,
    1147,     0,     0,     0,     0,  1098,  1192,  1190,     0,     0,
       0,     0,  1194,  1131,  1100,     0,     0,     0,  1099,     0,
       0,     0,     0,     0,     0,     0,  1102,     0,  1083,  1191,
    1193,  1151,     0,  1111,  2278,  2278,     0,  1075,     0,     0,
       0,     0,     0,  1745,  1000,  1005,   998,  1002,     0,     0,
       0,     0,     0,  1019,  1018,     0,     0,     0,     0,  1344,
    1022,     0,     0,  1172,  1173,  1222,     0,  1429,  1427,  1437,
    1482,  1483,  1485,     0,  2222,  1425,    73,     0,     0,  1632,
    1647,  1635,  2232,     0,  2231,  2217,  2220,  1751,     0,     0,
       0,  2155,  2149,  2156,  2158,  2152,  2157,  2159,  2150,  2151,
    2146,  2153,  1338,  1367,     0,     0,   934,   935,   938,     0,
    2135,  2136,  2134,  2133,   982,   412,   410,  1400,  1401,  1386,
    1387,  1385,  1388,   423,  1389,  1399,     0,   435,     0,   415,
    1659,  1658,     0,   922,   925,   926,   897,   896,   898,   891,
     893,   894,   473,  1467,     0,     0,     0,  1473,  1454,  1464,
     882,     0,     0,     0,     0,     0,   978,  1265,  1416,   975,
     956,  1367,  1357,   955,   986,     0,  2085,     0,  2053,  2113,
       0,     0,     0,     0,     0,  2103,  1612,     0,  1561,     0,
    1585,     0,     0,     0,  1552,     0,  1575,  1533,  1551,  1337,
    1605,  1548,  1549,   879,   878,   873,  1274,  1265,     0,     0,
    1262,  1276,     0,  1276,  1265,  1265,     0,  1265,  1330,  1271,
       0,     0,  2360,  1358,  2273,     0,     0,   762,   160,   163,
     161,     0,   162,     0,     0,   366,   365,     0,  1603,   359,
     114,   113,   115,   116,  1383,  1384,  1380,  1381,  1379,  1382,
     118,   117,   112,   777,     0,     0,     0,  1603,   339,   318,
     319,   322,   323,   324,   848,   752,   724,   916,   724,   827,
       0,   553,   752,   717,   825,     0,   916,     0,     0,     0,
       0,     0,   916,     0,     0,     0,  1484,     0,   838,   789,
       0,     0,     0,     0,     0,   839,     0,   790,  1484,     0,
       0,     0,     0,     0,   916,     0,     0,     0,     0,   916,
     807,   860,   859,   858,     0,   916,   916,     0,   519,   520,
     518,     0,     0,     0,   494,   681,   791,   400,   792,   556,
       0,   854,   553,   559,  1747,     0,     0,     0,   124,  2313,
    1298,     0,  1299,  1296,  1297,   178,    84,    80,    93,  1393,
    1394,  1392,  1390,  1391,    94,    82,    83,    87,    86,    88,
      89,    90,    85,    91,    81,    95,    96,    79,     0,     0,
       0,     0,  1603,   348,     0,     0,  1484,   308,   325,   326,
     329,   330,   331,   332,   333,   336,   334,   335,     0,  2225,
       0,     0,     0,   302,   301,     0,  2331,     0,     0,   556,
      98,   399,   492,   495,   745,   747,   746,   741,   740,    99,
    1443,  1444,  1265,  1356,  1337,     0,  1330,     0,     0,  1177,
    1210,     0,  1233,     0,  1079,   643,   643,  1220,  1218,   628,
     643,  1214,  1219,  1216,     0,   667,     0,   666,     0,     0,
       0,  1184,  1181,     0,     0,     0,     0,  1207,     0,     0,
       0,  1084,     0,  1167,  1189,  1187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2282,  2282,  1072,  2099,  2100,  2101,   754,  1200,     0,  1016,
    1012,     0,  1010,  1343,  1031,  1030,     0,     0,     0,  1020,
     983,  1163,   982,     0,  1223,  1746,   380,   525,    71,  1636,
    2229,     0,     0,     0,     0,     0,     0,     0,     0,  2144,
    1368,  1494,  1759,  1668,     0,   942,  2137,  2138,     0,   413,
       0,   405,   408,     0,   416,   417,   419,     0,   895,   961,
       0,  1486,  1471,  1478,  1472,     0,     0,     0,  1470,  1736,
    1735,  1742,  2264,     0,     0,     0,     0,  2267,  1337,  1337,
    1410,     0,     0,   953,   958,   954,   957,     0,   981,   990,
     989,  1737,  1744,     0,     0,     0,     0,   669,   668,   677,
       0,     0,     0,  2098,     0,   673,   675,   674,  2108,   672,
    1614,  1365,  1571,  1570,  1372,  1371,     0,  1544,  1563,  1615,
       0,  2271,  1269,     0,  1264,  1263,  1277,     0,  1265,  1276,
    1276,     0,  1244,  1243,  1498,  1501,     0,  1242,  1293,  1267,
     961,  2350,  2362,     0,   680,   679,   524,   676,   523,   165,
     164,   170,   171,   386,   372,   385,   360,   111,   373,   374,
     340,     0,   320,   558,   753,   725,   718,   810,   719,     0,
       0,     0,   724,   552,   752,   551,   554,   733,     0,     0,
     505,   502,   829,   508,   808,   801,   809,   820,   822,     0,
     504,   521,     0,     0,   510,   752,   796,   836,   837,   851,
     498,     0,   534,   535,   533,   515,   522,   500,   501,   831,
       0,  1352,  1354,  1362,   507,   506,   402,   503,     0,   842,
     815,     0,   532,   530,   527,   529,   528,   531,   511,   509,
     499,  1646,   847,   847,   824,     0,   542,   544,   545,  1750,
       0,   856,   826,     0,   546,   547,     0,     0,     0,   134,
       0,     0,   779,     0,   127,   125,   136,     0,     0,   941,
       0,   379,   378,   377,   376,   349,     0,     0,     0,  1603,
     327,  2226,     0,     0,  2338,   305,   303,   304,     0,   180,
     540,   541,   539,   538,     0,   389,     0,  1797,   387,     0,
       0,  1679,   681,   496,     0,  1337,  1377,  1513,  1519,     0,
    1112,  1234,     0,     0,   644,  1211,   683,     0,  1221,   630,
     629,  1213,  1215,  1217,  1078,  1086,  1154,  1081,  1080,     0,
       0,     0,  1119,  1120,  1205,  1208,     0,     0,  1092,     0,
    1094,     0,     0,  1169,  1144,  1160,  1123,  1148,     0,  1097,
    1073,     0,  1124,     0,  1129,  1127,     0,  1101,     0,     0,
    1108,     0,  1106,     0,  1107,     0,  1109,  1150,  1152,  2279,
       0,     0,  1202,  1008,     0,  1017,  1014,     0,  1011,   986,
    1174,  1164,  2230,  2219,  2218,  2233,  2233,  2233,     0,  1339,
       0,  1451,  1679,   936,     0,   937,   983,   432,     0,   439,
       0,   437,   406,     0,   923,   982,  1468,  1480,     0,  1488,
       0,     0,  1465,  1475,     0,     0,     0,  1474,     0,  2162,
    2163,  2161,  1367,  1345,     0,     0,  1422,     0,  1417,   976,
       0,   988,   987,     0,  2115,     0,  2114,  2126,  2127,  2124,
    2125,  2123,  2104,     0,  2110,  2109,     0,     0,     0,  2120,
    2111,     0,     0,  1562,     0,  1557,   880,     0,  1265,  1240,
    1265,  1251,     0,     0,  1265,  1247,  1245,  1249,     0,  1337,
       0,  1266,  1290,   982,  1739,  1359,  1362,   321,   812,   555,
     752,   720,   721,   733,     0,     0,     0,   800,     0,   904,
       0,   805,   677,   516,   835,   834,   517,     0,   798,     0,
    1363,  1364,  1355,   797,   817,   803,     0,   828,   556,   855,
     697,   624,   573,   564,   643,   567,   566,   610,   581,   578,
     628,   626,   596,   628,   628,   603,   602,   620,   606,   586,
     683,   683,   585,   623,   683,   607,   605,   609,     0,   611,
     628,   616,   604,   608,   625,   601,   598,   622,   643,   643,
     579,   582,   621,   683,     0,   614,   643,   647,   584,   683,
     689,     0,     0,   643,   645,  1749,   135,   123,     0,     0,
     781,   783,     0,     0,   784,  2315,     0,  2317,  1300,     0,
     310,   375,   328,     0,     0,   191,   982,     0,   181,   183,
     184,     0,     0,     0,   491,  1681,  1680,   388,   476,   497,
       0,  1515,     0,  1511,     0,  1235,     0,     0,     0,     0,
     689,   691,   685,   689,     0,  1212,     0,  1185,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1076,     0,  1165,
       0,     0,     0,     0,     0,     0,  1105,  1103,  1104,  2280,
     755,  1013,     0,  1175,     0,  2238,  2238,  2238,  1493,  1492,
       0,  1491,  1495,     0,   943,     0,     0,     0,     0,   436,
       0,   418,   474,     0,     0,     0,  1489,  1477,  2268,  1466,
    1469,  1744,  2164,   960,     0,  1340,  1421,  1418,     0,  1411,
    1413,  1415,     0,  1738,     0,     0,  2119,  2105,   678,     0,
       0,     0,     0,  2106,     0,  1330,  1270,     0,  1236,  1265,
    1265,     0,  1236,     0,     0,     0,  1500,  1356,  1502,  1294,
       0,  1272,     0,  1361,     0,     0,   811,     0,     0,     0,
     841,     0,   854,   802,   821,   843,   647,   916,  1353,   816,
     818,   892,   512,   543,   703,   572,   565,   583,   632,   627,
       0,   632,   632,   592,   610,   587,     0,   683,   600,   591,
     612,   615,   617,   619,   632,     0,   683,   580,   589,   576,
     632,   655,     0,     0,     0,   651,     0,   696,     0,   658,
     560,   648,   650,     0,     0,   613,   683,   569,   690,   689,
     571,   683,   689,   632,     0,   646,   632,     0,   121,   126,
     137,   138,   772,  2314,     0,  2312,     0,     0,     0,   132,
     194,   192,   193,     0,   187,   189,   184,  2325,  2332,     0,
       0,  2330,   390,   392,   399,   477,     0,     0,  1362,   750,
    1378,  1113,   641,   639,   642,   640,   684,   692,   693,     0,
     688,   686,   689,     0,  1117,  1118,  1206,  1197,  1142,     0,
    1093,  1166,     0,     0,  1149,  1125,  1128,  1126,  1132,  1133,
    1015,     0,     0,  2237,  2235,     0,  2236,  2234,  2210,     0,
    2167,  2168,  2166,  2154,     0,     0,  1669,   420,   982,   425,
       0,   442,   441,   438,  1367,  1479,  1481,  1487,  1476,     0,
    1341,  1356,   670,  1414,     0,   977,  2117,  2116,  2118,  2112,
       0,     0,     0,     0,  1268,  1252,     0,  1256,  1261,  1257,
       0,  1248,  1246,     0,  1377,  1282,  1283,     0,     0,  1288,
    1292,  1367,  1362,   814,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   840,  1715,   830,   832,   799,     0,   804,
       0,     0,     0,   698,   699,   704,   706,   636,   637,   638,
     593,   633,   635,     0,   595,   563,   588,   618,   594,     0,
     590,   577,   661,   660,   991,   653,   663,     0,     0,   659,
     649,   657,   652,   568,   570,   574,   575,   561,     0,   562,
    1748,   128,   785,   242,  2316,   951,     0,  2321,   109,  2329,
     124,   133,  2339,   191,     0,     0,     0,   182,   185,  2268,
    1679,     0,   395,   736,     0,   749,     0,   694,   687,     0,
       0,  1168,  1170,  2216,  2215,  2214,  2211,     0,     0,     0,
       0,     0,     0,  2239,  2241,  1490,     0,     0,     0,   433,
       0,   429,   431,     0,   461,   475,   975,   536,  1349,  1362,
       0,  1367,     0,  1419,  1412,  2122,  2121,  2107,     0,     0,
       0,     0,     0,     0,  1301,  1499,  1278,  1278,  1289,  1273,
    1360,   813,     0,     0,   736,  1717,  1716,   854,     0,   709,
     710,   711,     0,     0,     0,   702,   705,   634,     0,   756,
       0,   662,   991,   656,     0,   130,   268,     0,   254,   240,
       0,     0,     0,   244,   139,   142,   140,     0,   141,   147,
       0,   148,   149,   150,   151,   152,   143,   266,   267,   146,
     144,   145,     0,  1762,     0,  1763,  2319,     0,     0,  2318,
     136,   158,   188,     0,     0,  2333,   393,   391,     0,  2264,
    1484,     0,   100,   737,   742,   738,  1362,     0,   631,  1091,
    2212,  2242,  2245,  2243,  2244,  2246,  2240,     0,     0,   983,
       0,   426,   427,     0,     0,     0,  1484,     0,     0,  1484,
    1484,  1484,  1484,   454,   462,   464,     0,   537,     0,     0,
    1346,  1348,  1342,  1402,   671,  1682,     0,  1253,     0,  1258,
       0,  1250,     0,     0,  1286,  1284,     0,   736,   548,   833,
       0,   713,     0,   712,     0,   707,   708,   703,     0,   683,
       0,   683,   654,   129,     0,   122,     0,     0,   253,   256,
       0,     0,   259,   249,   248,   250,     0,   243,   242,   242,
     296,   247,   293,   292,   285,  2268,     0,     0,     0,     0,
    2340,   190,   982,     0,   397,   396,     0,     0,   739,   748,
     751,  1496,  1504,     0,  1670,     0,   434,   433,   430,     0,
       0,     0,  1484,  1484,     0,     0,     0,     0,     0,   440,
     463,  1484,  1350,  1351,  1362,     0,   959,     0,  1690,     0,
       0,     0,  1302,     0,  1279,     0,     0,     0,   550,   549,
       0,   715,   716,   714,   700,   701,   597,   757,   599,   131,
     269,   280,   283,   275,   255,     0,     0,     0,   245,   242,
       0,   229,   227,   228,   234,   235,   236,   237,   238,   239,
     230,   233,   231,   232,   242,     0,   199,     0,     0,  2320,
       0,  2322,     0,   138,   168,   167,   159,     0,   242,  2326,
    2334,  2268,   743,   744,     0,     0,   670,   421,   428,     0,
     450,   452,   453,   447,     0,   443,   445,   446,   472,     0,
       0,  1397,  1395,  1396,   468,  1398,   469,   467,   465,   458,
       0,   456,     0,  1347,  1403,     0,     0,     0,     0,  1683,
    1685,     0,  1420,     0,  1255,  1260,  1281,  1280,  1295,     0,
     819,     0,     0,   242,   276,     0,   251,     0,     0,     0,
       0,   197,   299,     0,   195,   287,   287,  2323,  2324,   120,
     169,  2341,     0,   158,   398,  1503,  1505,  1671,   444,     0,
    1946,     0,   470,   471,     0,   455,     0,   466,     0,     0,
       0,     0,     0,  1684,     0,     0,  1691,  1693,     0,     0,
       0,   277,   283,   273,   281,   242,     0,     0,   241,   260,
     295,   198,     0,   297,     0,   242,     0,   286,   288,   290,
       0,  2335,  1682,   451,   448,   449,   461,   460,   457,   982,
    1688,  1689,     0,  1686,     0,     0,  1692,     0,  1287,  1285,
       0,   274,     0,     0,   272,   252,   257,   242,     0,   242,
     210,   209,     0,   201,   223,   294,     0,   200,  2327,   242,
    1690,   459,     0,     0,  1406,  1408,  1687,  1695,  1694,     0,
     278,     0,   242,     0,   242,     0,   242,     0,     0,     0,
       0,     0,   196,   242,  2336,  1696,   983,  1404,   982,  1558,
       0,   270,   242,   258,   263,   300,     0,   204,   224,   225,
       0,   207,  2328,     0,  1698,  1409,  1407,   242,   242,   259,
     262,   298,     0,     0,   202,   216,   203,   214,   206,     0,
       0,     0,  1705,   242,   242,   264,   222,   220,   242,   211,
     218,   213,     0,   219,   226,   217,     0,   208,  1697,  1700,
       0,     0,  1702,  1703,     0,  1672,     0,   205,   221,   215,
    1704,  1699,     0,  1706,   212,  1701
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   550,  1334,    57,    58,    59,    60,    61,  1217,
      62,   750,  1159,  1620,  1621,    63,   496,    64,   946,  1393,
    1394,  1395,    65,  1924,  2764,  1411,   468,   469,  1795,  1796,
     970,  2381,  2722,  3431,  2726,  3535,  3655,  3440,  1868,  3034,
    3432,  3433,  3544,   491,  1922,  1348,  3680,  1775,  3776,  1776,
      66,   583,   944,  1374,  1375,  3047,  3048,  3270,  3049,  3263,
    3264,  3265,  3266,  3895,  3749,  3844,  3896,  3959,  3992,  3998,
    3999,  3932,  4008,  4009,  4010,  4016,  4011,  3933,  3994,  3750,
    3751,  3662,  3752,  3547,  3753,  3666,  3754,  3550,  3755,  3756,
    3757,  3758,  3887,  3759,  3661,  3925,  3746,  3747,  3927,  3974,
    3990,  3760,  3557,  3656,  3831,  3558,  3657,  3882,  3742,  3883,
    3920,  3970,  3743,  3832,  3923,  3835,  3761,  3767,  3897,  3762,
    3768,  3763,  3562,  3673,  3766,  3671,  3765,  3929,  3892,  2385,
    2748,   568,   569,   594,  1915,   570,   958,   918,  1350,  1808,
    1809,  2249,  2250,  2367,  2368,  2369,  1800,  1801,  1802,  1903,
    1904,  1905,  1782,  1783,  1784,  1354,  1779,  1780,   571,   919,
     929,  1803,  1804,  1805,  2373,  1907,  1908,  1909,  1910,  1806,
    1611,  1807,  2624,  2390,  2758,  3449,  3057,  3579,  3781,  2316,
    2317,  2297,    67,   507,   797,  1214,  2128,  1654,  1653,  1215,
    2523,  2524,  2525,  2115,  3329,  1656,  2127,  3479,  3697,  3480,
    3481,  2856,  3601,  2521,  2860,  2861,  3118,  3331,  3484,  3795,
    3796,  3797,  3789,  3790,  3791,  3709,  3810,  3811,  3864,  3906,
    3613,  3614,  3615,  2147,  2529,  3334,  3276,  1897,  1340,  1341,
     470,   471,   472,   591,  2391,  1855,  2392,  2393,  1857,  1858,
    2496,  1265,  2698,  2675,  3485,  2754,  2705,  2706,  2707,  2708,
    2645,  2646,  2260,  2261,  2322,  2716,  3017,  3200,  3215,  3018,
    3019,  3020,  3021,  3022,  3023,  3024,  2778,  2779,  3400,  3401,
    3402,  2774,  2775,  3246,  3230,  3231,  3232,  3415,  3074,  2568,
    2569,  3493,  2577,  2578,  2615,  2904,  2616,  1344,  3075,  3240,
    3290,  3233,  2715,  3194,  3393,  3524,  3394,  3395,  3396,  3645,
    2262,  2644,  2263,  2636,   874,   473,  1425,  1426,  3582,  3583,
    3584,  3585,  2397,  3277,  3278,  2633,  2832,  3528,    68,  1358,
     912,   921,   917,   935,   575,  1359,  1869,  2328,  3252,   558,
    1859,  3187,  2949,  3191,  1860,  2655,  1861,  2938,  3176,  1862,
    2964,  3189,  3388,  2656,  2657,  1863,  1864,  1865,  2948,  2957,
    3517,  2264,   123,  1617,  2712,  2304,    69,  1317,  1312,    70,
     885,   880,   881,  1315,  1316,  1741,  2194,    71,   816,    72,
     578,    73,   586,  1398,    74,  1225,  2139,  2140,  2141,    75,
     936,    76,    77,   587,  1405,  1406,  1407,    78,  1210,   130,
      79,   805,  1220,  1222,  1223,    80,   580,   581,  1367,    81,
    1648,  2106,  2107,   941,   942,  1373,  2855,    82,    83,   547,
     520,   822,   521,   522,  1681,  2159,  3486,   833,   834,   835,
    2553,  1242,  1243,  1244,  2164,  1682,  2558,  1013,   715,   716,
     717,   718,  1107,  1108,  3234,   719,  1117,  1577,   720,   721,
     722,   723,   724,   725,  1604,  2802,  2803,  3089,  2062,  2063,
    2064,   726,  1958,  2789,  1971,   727,  1100,  1562,  1494,  3081,
    2794,  1438,  1941,  2424,  2493,  2036,  1038,  1039,  1003,  1948,
    1444,  1748,  1749,  1750,  1751,  1752,  3164,  3163,  3165,  3499,
    3356,  3501,  3360,  2205,  1753,  1754,  2591,  2918,  2609,  2610,
    3371,  2196,  1755,  2597,  3634,  3368,  3369,  3727,  3726,  3370,
    3169,  3170,  2931,  2932,  2331,  2332,  2333,  3503,  1485,  1538,
    1486,  1492,  1194,  1195,  1439,  2103,  2508,  3341,  3490,  2053,
    3135,  3488,  3620,  1866,  2681,  2682,  2161,  2162,  2613,  2935,
    2962,  1268,  3487,  2510,  1715,  1716,  3063,  3997,  2625,  2344,
    3804,  2124,  2125,  3716,  3868,  3943,  3944,  3945,  2886,  2887,
    3139,  3140,  2163,  2550,  2888,  3342,  3625,    84,   475,    85,
    2068,  2080,   938,  1427,  1428,   738,   488,    86,   497,  2104,
      87,   514,  1669,   788,   809,  1228,  1229,  2148,  2530,  2537,
    2149,  2542,  3128,  2532,  2866,  2867,  2072,  2073,  2533,  2869,
    3125,  3110,  3111,  2851,  3325,    88,   535,  2929,  2604,  2605,
    3691,  3692,   810,    89,   474,   990,  1931,  1431,  1930,   991,
     992,  1433,   610,   611,    90,   532,  1293,  1294,  1295,  1731,
      91,   525,   875,  2581,  1710,   801,  1152,  1272,   878,  1273,
    1696,  2178,  1253,    92,   908,   907,    93,   554,  1336,    94,
     751,  1170,  1171,  1625,  2081,    95,   515,   814,   815,    96,
     509,   802,  1662,    97,   501,    98,    99,   791,  1203,  2852,
    3477,  3786,  3902,  1647,  1204,  3058,  3718,  3819,  3820,  3822,
    3876,  3877,  3984,  4002,  4021,  4022,  4025,   729,   895,   730,
    3383,   731,   732,  2538,  2539,  2936,   733,  3693,   734,  2323,
     888,   494,   450,   565,   896,  2513,   736,  3564,   915,   962,
     452,   453,   100,   836,   524,  1246,  1247,  1248,  1691,  1692,
     879,  2041,  1693,  1694,  2175,  2170,  3147,  2910,  2902,   101,
     794,  1172,  1208,  1209,  2112,   102,   534,   103,  1196,  1641,
    1642,  2100,  2507,  2101,   104,   818,   105,   775,  1635,   776,
    1174,   777,   778,  1186,  1181,  1189,  1183,  3467,  3317,  3318,
    2088,  1155,   963,   964,  1628,  2083,  2084,  3105,  3320,  3473,
    3474,   106,   134,   458,   589,   953,  1236,   107,   108,   109,
     110,  1239,  1329,  2155,  1330,  1331,  1332,  1762,  1679,  2470,
    1098,  1556,  2829,   598,   980,   972,   124,   125,   126,   601,
     602,   127,   933,   934,  2329,  2728,  3036,  3255,  3256,  3437,
    3569,   974,  3445,  3852,  3963,   975,   976,  2749,  3446,  3683,
    3853,  3939,   977,  2382,  3045,  3571,  3778,   111,   897,   544,
    1327,  1322,  1324,  1758,  2212,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3408
static const int yypact[] =
{
    3110,  2300,    98,  1195, -3408,   -99,   196, 39520,   143,  1195,
    1195,   238,  2492, -3408, -3408, -3408, -3408, -3408,  2597, -3408,
   39520,    98, -3408, 22073, -3408, -3408,   548,   382,   201,  1195,
      98, -3408, 39520, -3408,   676,   870,    98, -3408, -3408,  1195,
   -3408,   238, 39520, -3408,   794, -3408,   -85,   -86,   700,   672,
     838, -3408, -3408, 39520,  1947,   -89,  1310,  1214, -3408, -3408,
    1133, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, 22639, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408,  1216, 39520,  1445, 39520, -3408,  1418,
   39520, 33900, 39520,  1162,  1532, -3408, -3408,  1625, -3408, -3408,
    1195, -3408, -3408, -3408,   238, -3408, -3408, 22073, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,  1131, -3408, -3408,  1247, -3408, -3408, -3408,  1728,  1585,
   -3408,  1647, 33900, -3408, 39520, -3408, -3408, -3408,   250, -3408,
    1319, -3408,  1323,  1621,    81, 11143,  1642,  1642,  1642, 39520,
    1664,  1642,  1642, 39520, -3408,  1642, -3408,  1642,  1195, -3408,
   -3408,  3780, 39520,  1515,   168,  -110, 33900,  1497, 39520, -3408,
   -3408, 11143, -3408,  1660, 22073, -3408,  1195,  1816,  1748,   234,
   39520, -3408, -3408,  1195,   704,  1221, -3408,  4328,    89, -3408,
   -3408, -3408,  1864, -3408, -3408,  5145, -3408, -3408, -3408,  1343,
   -3408, -3408, 22073, 39520,  1195,  1689, -3408, -3408,   142,   142,
     142, -3408,   142, -3408,   142, -3408,   -89,  1374, -3408, -3408,
    1356, 39520,   578,   645, -3408, -3408,  1369,   -42, -3408,  1427,
   31090, -3408, 39520, -3408, -3408, -3408, -3408,  1634, -3408, -3408,
   -3408,  1865, -3408, 22073, 39520,  1500, -3408, -3408, 22073, -3408,
     116, -3408, -3408,  1394, 39520, -3408, 22073, 22073,   770,    25,
     614, 39520, 39520,  1797, -3408,  1972, 31090,  1573, -3408,   718,
     955,  1625,  1977, -3408,  1585, -3408, 39520, -3408, -3408, -3408,
   35586,    81,  1443,  1450,  1452, 14641, -3408,  1459,  1481,  1498,
   11143,  1512,  1518,  1524,  1529,  1541,  1546,  1549,  1551,  1556,
    1556,  1567,  1575,  1580,  1583,  1272,  1589, -3408,  1591,  1593,
    1595, -3408, -3408,  1600,  1603,  1618, -3408,  1631,  1636,  1652,
   11726,  1656,  1659, -3408, 19239,  1668,  1674,  1686,  1688,  1694,
    1699,  1708,  1716,  1720, -3408, -3408, 11143,  1725, -3408, -3408,
    1735, -3408,  1739,  1756,  1760,  1766,  1769,  1771,  1773,  1794,
    1798,  1813,  1815,  1817,  1832,  1835,  1873,  1877, -3408,  1293,
    1898,  1901,  1414,  1906, -3408,  1913, -3408,   181,  1927,  1556,
    1556,  1556,  1933,  1935,  1940,  1945,  1948, 14641, 14641, 14641,
    8228, -3408, 39520, -3408, 39520,   505,  2316, -3408,  2615, 14641,
     214, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  1444,  1644,
   -3408, -3408, -3408, -3408, -3408,  1951,  1429,  1900, 39520, 39520,
   39520,  1743, 39520, 39520, 33900,  1715, 39520, 31090, 22073,  1642,
    1789,  2706,  1821,  1783,  1386, -3408, -3408, -3408, -3408, -3408,
    1879, -3408, -3408,  1750, -3408, -3408, -3408,   175, -3408,    71,
   -3408, -3408, -3408, -3408, -3408, -3408,  2033,  1840, -3408, -3408,
     113, -3408, -3408, 39520, -3408, -3408, -3408, -3408,  2040,  1992,
     505,  1390,  2487,  2367, 22073, -3408,   987, -3408,  -154, -3408,
   -3408,  2295, -3408, -3408, 31090, 22073, -3408, -3408, -3408, 19805,
   -3408, -3408,  2506, -3408,  1978, -3408, 22073,  1821, -3408,  2232,
    2146,    25,  2049, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408,  2024,  1864, -3408, -3408, -3408,  2436, -3408,
    2151,   284,  2085, -3408,  2025,  1069,   284, 31652,  2375,  1388,
   -3408,   144, -3408,  2450, -3408, -3408,  2152, -3408, -3408,  2154,
    2159,  2358,  2148, -3408, -3408,   231,  2119, -3408, -3408,   406,
   -3408,  -111,  2375,   284,  1388, -3408,  2393,  2512,   766,   819,
   -3408,   -31, -3408, -3408,  2577, -3408, -3408, -3408, -3408, -3408,
   -3408,  2040, -3408, -3408, -3408,  2076, -3408,  2321,  2175, -3408,
   -3408,    45, -3408,  2082,   758,  2522, -3408,   810, 32214, -3408,
   -3408, -3408,  2559,  2578,  1556,  2089, -3408, -3408, -3408,  2671,
   -3408, -3408,  2100,  2586,  2586,  2586,  2681, -3408, -3408, -3408,
   -3408, -3408,  2256,  2134, -3408,  1500, 22073,  1046, -3408, 36148,
   22073, -3408,  1143, 11143, -3408, -3408,  3562,   199,   966, -3408,
    2644,  2302, -3408, -3408, -3408, -3408,  2545, -3408, -3408,  2671,
    2604,  2586,  2503,  2126, -3408, -3408, -3408,  1585, -3408, -3408,
   -3408,  2533, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2534,
   -3408, -3408, -3408, -3408, -3408,  1500, -3408, 22073, -3408, 22073,
   -3408,  2132, -3408,  2128, -3408, 11143, 11143,  1436,  2652,  2707,
    2707,  2707,   505,  2164, 11143, 11143, 11143, 11143, 11143, 11143,
   11143,  1507,  2142, -3408, -3408,  8811, -3408,  2145, 11143, 11143,
    2229, 11143,  1644, 11143, 23205,   893,  5336, 11143,   246,  2606,
   11143, 11143, 11143,  8228,  4267, 11143, 11143, 23205,  2720,  2153,
   -3408,  2149,  1612, 11143, 11143,  1623, 11143, 11143, 11143, 11143,
   11143, -3408,  8811, -3408, 11143, 11143, 11143, 11143, 14641, 11143,
   11143, 11143, 11143, 11143, 11143,  2707,  2707, 11143, 11143,  1626,
    8811, -3408, 11143,  1644,  2344,  2344, 11143,  1644,  7062, 11143,
   -3408, -3408, -3408,  2158, -3408, -3408, -3408, 23205,  2707,  2707,
   11143, 11143,  2652,  2652,  2652, -3408,  8228,   187,  2160, 11143,
   24337,  2156, -3408, -3408, -3408, -3408, 11143, 11143, 11143, -3408,
   14641, -3408, -3408,  1775, -3408, -3408, -3408, 12309, 14641, 14641,
    2165, 14641, 14641, 14641, 14641, 14641,  2495, 14641, 14641, 15224,
   15807, 14641, 14641, 14641, 14641,  1091,  2652, 33900, 14641, 11143,
   -3408, -3408, 39520, -3408, -3408, -3408,  2169, 22073,  1715, -3408,
   -3408,   509,  2614, -3408, -3408,  2177,   133, 22073,  2173, -3408,
   -3408, -3408, -3408, -3408, -3408,  2712, -3408, -3408, -3408,  2201,
    2183, -3408, -3408, -3408, -3408, -3408, -3408,  2275, -3408, -3408,
   -3408,  2188, -3408,  2188, -3408, -3408,  2188, -3408, -3408,  2188,
     125,  4345, -3408, -3408, 39520, -3408, 40082, -3408, 19805,   -99,
   -3408,  2490, -3408, -3408,  2518, -3408,  2493,   138,  2193, -3408,
   22073, -3408, -3408, -3408,  2419,   996, 33900, -3408, -3408,    99,
    2195,  2279,  2209, -3408,  2283, 22073, 22073, -3408, -3408, -3408,
   -3408,  1221,    12,  2220,   752, -3408, 39520, -3408,  1633, -3408,
   -3408, -3408,  2222, -3408, 11143, -3408,  2225, -3408,  1096,  2594,
   -3408,   -99, 11143, -3408, -3408,  2243,  1585, 39520, 39520, 39520,
   22073, 39520, 22073, -3408,   916,   916, -3408,   989, -3408, -3408,
   -3408, -3408,   284, 39520, 39520,   284, 31090, -3408, -3408, -3408,
    2646,  1388, 39520,   284, -3408,  2603,  2335, -3408, -3408, -3408,
    2665, -3408, -3408,  2661,  2253, -3408, -3408, -3408,  1388, -3408,
   -3408, -3408, 22073, -3408, -3408,  1388, -3408, -3408,  1388,  1388,
     284,   284,  2309, -3408, -3408,  2255, -3408,  2309,  2389,   598,
     142,  2483, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408,   124, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
     123, -3408, -3408, -3408,  1523,  2724, -3408, 33900,  1679,   750,
    1002,  1679,  2097,   -99,   150, -3408,   150, -3408,  2462,  2510,
     252, 22073, -3408,  2269,   -99, 22073, -3408, -3408, -3408, -3408,
   -3408, -3408,  2274, -3408,  2281,  2273,   505,  2710,  2725,  2727,
    2728,  2730,  2732,  2733,  2737,  2738,  2742,  2743,  2744,  2745,
    2746,  2748,  2749,  2317, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408,  2369, -3408, -3408, -3408, -3408,  1234, -3408, -3408,
   -3408,   134,  1847,  2341,  2366,  2861, 31090,  2735, 39520, 39520,
   39520, 39520, 39520, -3408, -3408,  -139,  2572,  2329, -3408,  1132,
   39520,  2741, 26594,   106,   295,   494, -3408,  2707,  2338, -3408,
    2343,  2345,  2346, 11143,   177,   399,   501,  1284,   890,   974,
     313,   278, -3408,  2347,  2350, -3408,   984, -3408,   321,   342,
    1005,  1020,  2348, -3408,  2351, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408,  2757, -3408,  1334, -3408, -3408,
   -3408, -3408,  2336, -3408, -3408,  1025,   365,   369,   212,  2361,
     377,  1346,  1365,  2363, 23205, 39520,  2707,  2357,  1037,  1043,
    2707,  2365,   413,  1049,  1410,  1455,  1462,  1053,  1073,  1083,
     415,  1465,  3001,  1094,   617,   629,   668,   790,  1098,  2368,
    2371,   841,   247,  2707,  2374,  1129,   308, -3408,  2377, -3408,
    2378,  1137,  9394,  9977, 10560,   968,   850, -3408,  2387, -3408,
    2149,  2388,  2394,   325,  1184, -3408,   -89, -3408, 11143, -3408,
     104,  1106, -3408,  2509, 39520,  2034,   154, -3408, -3408, -3408,
   -3408, -3408, -3408,   648, -3408,  2376, -3408,  2397,  1814,  2402,
    8228,   820,  2402,  2210,  1866,  1866, 14641,  2039,  2223, 11726,
    1643, 11726,  1643,  2402,  2402,  2402, -3408, 14641,  2403, 14641,
   14641, -3408,  2652,   505,  2410,  1175, 39520, -3408,   509, -3408,
   -3408, -3408, -3408,   727, 31090, -3408, -3408, -3408,   133, 33900,
    2413, -3408, -3408,  2609,  2706, 22073, -3408, 39520, -3408, -3408,
   -3408, -3408, 20371, 20371, -3408, 20371, -3408, -3408,   137,   768,
    2883,  2441, -3408, -3408, -3408, -3408, -3408,  2791, 22073, -3408,
     787, 22073,  2269,  2422,  2422,  2212,  2521, -3408,  2423, -3408,
   11143,   -99, -3408, 31090, 31090, 22073, 22073,    29, -3408,  2418,
   -3408,   -99,  2821, 20371, 20371, 20371, -3408, -3408, -3408, -3408,
   -3408,  1038, -3408,   505, -3408,  2420, -3408, -3408, -3408, -3408,
   -3408, 36710,   141, -3408, -3408,   -99,  2831, -3408,   505,  2428,
   39520, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408,   492, -3408, -3408, -3408,
   -3408, -3408, -3408,  2561,   284, -3408, -3408, -3408, -3408, -3408,
    2632,  2375,  2119,   284,  1388, 22073,   284,   284, -3408, -3408,
    1435, -3408,   -31, -3408, -3408, -3408, -3408, 39520,  2601,  2581,
   -3408,  2435, -3408, -3408, 22073, -3408,  2440, -3408,  2845,  2977,
    2375, -3408, -3408, -3408,   727,   727,  2713, -3408,   -99,  2558,
    2565,  2566,  2567,  2570,  2607, -3408, -3408,   -99,   -99, -3408,
   -3408,   727, -3408,   363, -3408, -3408, -3408, -3408,   -99,   -99,
     -99,   -99,  2364,   -99,   -99,  1489, -3408, -3408,   727,   727,
   -3408,  1285, -3408, -3408, -3408, -3408, -3408, -3408, -3408,   992,
   -3408,  2520,  2958,  2679,   727,   727,  2958,   727,  2680,  2682,
     727,   727,  2531,  2922,   727,  2814,  2554,  2337,  2816,   727,
   -3408,  2560,  2928,   727,   727,   727,   727,  2958,  2693,  3008,
     727, -3408,   727,  2696,  2699,   172,  2700,  2702,   727,   757,
   39520,   727,   727,   727, -3408, -3408,  5529, -3408, -3408, -3408,
   -3408, -3408, -3408,   -74, 20939, -3408, -3408,   290, -3408,  2663,
   -3408, -3408, -3408, -3408, -3408, 37272, -3408, 11143,  2364,   -99,
     -99,   818,   -99,  2364,   -99,   -99,   -99,   -99,   -99,  2364,
    2364,   -99,   -99,  2364,  3562, -3408, -3408, -3408,   157,   727,
     727,   727,   727, -3408,  1822, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, 33900,  2808,  1676,   -58, -3408, 39520, -3408,
   -3408,   383,  2491,  -138,  3376,   729,   729, -3408, 22073, 22073,
    2525,  2441, -3408,   598, -3408,  2482, -3408, 12892, -3408,  2494,
   -3408, 11143, -3408, -3408, -3408,  1160, 11143, 11143,  2933,  2305,
   -3408, 32776, -3408, -3408, -3408, 11143, 32776,  2305, 11143, -3408,
    2496, -3408,  2855,  2857, -3408, -3408, -3408, -3408, 11143, -3408,
   11143, 11143, -3408, 11143, 11143, 11143, 11143, 11143, -3408, -3408,
   14641, -3408,  2497,  2501, -3408, -3408, -3408,  2502, -3408, 11143,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, 11143, -3408, 11143,
   -3408, 11143, 11143, 11143, 11143, -3408, -3408, -3408, 13475, 11143,
   11143,  2505, -3408, -3408, -3408, 11143, 11143, 11143, -3408, 11143,
     164, 11143,   304, 11143,   355, 11143, -3408, 11143, -3408, -3408,
   -3408, -3408, 11143, -3408, -3408, -3408,  1495, -3408,  2499,  2504,
    2508, 33900, 11143, -3408, -3408, -3408, -3408, -3408,   893, 14641,
     426,  2513, 14641, -3408,  2210,  4267,  4267,  1858,  8228,   820,
    2210, 11143,  2516,  2517, -3408, 11143, 39520, -3408, -3408, -3408,
   -3408, -3408, -3408, 33900, -3408, -3408, -3408,  2173,  2829, -3408,
    2269, -3408, -3408,  1509, -3408,  2519, -3408,  2527,  2590,  2591,
    2596, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408,  2375,  2418,  2605,  2526, -3408, -3408,  2546,
    2864, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408,  3066,  2541,  2422, 39520,
     505, -3408,  2612, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,   161, -3408, -3408,  2543,  2543, 18105, -3408, -3408, -3408,
   -3408,  2783,  2951,  2953,  2955,   810, -3408,   186, -3408,   179,
    2913,  2375, -3408,  2961, 34462, 27156, -3408,  2550,  2907,  2552,
     727, 29404,   802, 24902, 29966, -3408, -3408,   818, -3408,    15,
   -3408,   989,   989,  2582, -3408,  2810, -3408, -3408, -3408,  2441,
    1388, -3408, -3408, -3408,  2562, -3408, -3408,   910,  2916,  2918,
   -3408,  2800,  1067,  2800,   910,   910, 23205,   598,  2690, -3408,
    2364,  2853, -3408, -3408, -3408, 33338, 30528, -3408, -3408, -3408,
   -3408,  3053, -3408,  3054,  1061, -3408, -3408,  1616,  1002, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408,  2097,  1616,  1616,   150, -3408,   112,
   -3408, -3408, -3408, -3408, -3408, 23771,  1143,    98,  1143, -3408,
     176,   224, 23771, -3408, -3408, 23771,    98,   818,  2364, 23771,
    2364, 37834,    98,   -99,   -99,  2055,   727,  2364, -3408, -3408,
    2921, 39520,  2923, 23771, 23771, -3408, 33900, -3408,   727,  1379,
    2364,   818,   818, 23771,    98, 23205,  2458,  1816,   -99,    98,
   -3408, -3408, -3408, -3408, 22073,    98,    98,   785, -3408, -3408,
   -3408,  2364, 33900,  2583, -3408,  5431, -3408, -3408, -3408, 17539,
   39520,   305,   378, -3408,  2569,   525,  1246,  2648,  1378,  2585,
   -3408,  2580, -3408,  2587, -3408,   505, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,   -99,  2212,
    1616,  1616,  1847, -3408,  2825,  2985,   727, -3408,  1799, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2675, -3408,
    2759,  2839,  2598, -3408, -3408,   285, -3408,   690, 22073, 16973,
   -3408,  2817, -3408,  3251, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408,   598,  2834,  2441,  2619,   106, 11726,  1191, -3408,
     505, 11143,   505,  1437, -3408,  2602,  2602, -3408, -3408,  2616,
    2602,  2963, -3408,  2974,  2617, -3408,  2620, -3408,  1199,  2622,
    2623,  1444, -3408, 11143, 11143,  1248,  1290,   -79,   883,   888,
     467, -3408,  1318,  3241, -3408, -3408,  1350,  1363,  1389,  1441,
     899,  1446,  1552, 11726,  1475,   205,   520, -3408,  1501,   937,
     939,  1508, 11143,  1514, 11143,  1536, 11143,  1543,  1558,  1563,
   -3408, -3408, -3408, -3408, -3408, -3408,  2618,   505,  2626, -3408,
   -3408, 11143, -3408,   214, -3408, -3408, 14641,   524,  2627, -3408,
     505, -3408, -3408,  2629,  1444, -3408, -3408, -3408, -3408, -3408,
   -3408, 39520,  2636, 27718, 31090, 31090, 31090,  2633, 11143, -3408,
   -3408,  2875, -3408, -3408, 22073,  3009, -3408, -3408, 14641,  2967,
    2858, -3408, -3408,  2640,  2635, -3408, -3408, 31090, -3408,  1864,
   23205, -3408,  2641, -3408,  2641,  1680,  2645,  1560, -3408, -3408,
   -3408,  2634,  2049,  3049, 31090, 31090, 31090, -3408,  2441,  2441,
     122,  2694,  3011, -3408, -3408, -3408, -3408, 38396, -3408, -3408,
   -3408, -3408,  1189, 39520,  2992, 39520,  7645, -3408, -3408,  3170,
   11143, 31090,   942,  1106,   727, -3408, -3408, -3408, -3408, -3408,
   -3408,  2375, -3408, -3408, -3408, -3408,  2971, -3408, -3408,   284,
    1435,  -175, -3408,  1638, -3408, -3408, -3408,  3012,   910,  2800,
    2800,  3013,  2908,   782,  2664, -3408,   727, -3408, -3408, -3408,
    1864, -3408, -3408, 11143, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,   992, -3408, -3408, -3408, -3408, -3408, -3408, -3408, 11143,
    3014,  3017,  1143, -3408, 23771, -3408, -3408, -3408,   111, 37834,
   -3408, -3408, -3408, -3408, -3408, -3408,  2672, -3408, -3408,  2212,
   -3408, -3408, 30528,   -99, -3408, 23771,  2672, -3408, -3408,   207,
   -3408,   -99, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   37834,  2674, -3408,   995, -3408, -3408, -3408, -3408, 37834, -3408,
   -3408, 37834, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, 22073,  2456,  2114, -3408,  1605, -3408, -3408, -3408, -3408,
   39520, -3408, -3408, 22073, -3408, -3408,  4812, 39520,  2886, -3408,
   11143, 11143,  2925, 39520,  2929, -3408,  3187, 39520,  3240, -3408,
   37272, -3408, -3408, -3408, -3408, -3408,  2689, 39520,  1616,  1676,
   -3408, -3408,   690,  2842, -3408, -3408, -3408, -3408,  2936, 39520,
   -3408, -3408, -3408, -3408,  2826, -3408, 22073,  3227, -3408,  2849,
    1608,   751,  5256, -3408,  2704,  2441,  3036, -3408, -3408,  4267,
   -3408,   505, 11143,   825, -3408, -3408,  1454,   963, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2708,
    4267,  4267, -3408, -3408,  2851, -3408, 11143, 11143, -3408, 11143,
   -3408,   878,  2711,  2726, -3408, -3408, -3408, -3408, 11143, -3408,
   -3408,  4267, -3408, 11143, -3408, -3408, 11143, -3408, 11143, 11143,
   -3408,  1581, -3408,  1615, -3408,  1627, -3408, -3408, -3408, -3408,
    2715, 39520, -3408, -3408,  1653, -3408, -3408, 11143, -3408, 34462,
   -3408, -3408, -3408, -3408, -3408,   -43,   -43,   -43, 14058,   505,
    3155, -3408,    74, -3408,  3052, -3408, -3408,  2210,  1464, -3408,
    1663, -3408, -3408, 39520, -3408,  2024,  2716, -3408,   727, 14058,
    2543,  2849, -3408, -3408,  1680, 23205, 27156, -3408, 31090,  2126,
    2126,  2126,  2375,  3107,  2605,  2605, -3408, 25467, -3408, -3408,
    2860, -3408, -3408, 28280, -3408,   600, -3408, -3408, 14641,  1591,
   -3408,   505, -3408, 33338, -3408,   505,   727,  2717,  2719, -3408,
   -3408, 38958, 11143, -3408,  3158, -3408, -3408,  2731,   598, -3408,
     910, -3408,  3075,  3076,   910, -3408, -3408, -3408, 23205,  2441,
   14058, -3408,   189,  2024,   505,  2739,   995, -3408,   -87,   505,
   23771, -3408, -3408, -3408,  2734,  3195,  3200, -3408, 23771,  1234,
   39520, -3408,  3170, -3408, -3408, -3408, -3408,  4812, -3408, 23205,
   -3408, -3408, -3408, -3408, 39520, -3408,  2750, -3408, 17539, -3408,
   -3408, -3408,  2602,  2602,  2602, -3408, -3408, -3408, -3408, -3408,
    2616,  2950, -3408,  2616,  2616, -3408, -3408, -3408, -3408, -3408,
    1454,   268, -3408, -3408,  1454, -3408, -3408, -3408,    63,  1262,
    2616, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2602,  2602,
   -3408, -3408, -3408,  1454,  2602, -3408,  2602,  2130, -3408,   998,
      70,  2602,  2602,  2602,  2752,  2747, -3408,   505,  4267,  3248,
   -3408, -3408,  2876,   -99,  3204, -3408,  1713, -3408, -3408,  2097,
   -3408, -3408, -3408,  2881,  1246,   197, -3408,  2755,  2758, -3408,
   -3408,   -99,  2756,  2760,  5529, -3408, -3408, -3408,  3310, -3408,
   39520, -3408,   989, -3408,  1099,   505,  2761,  2762,  2764,  2765,
    3305,   248, -3408,  3305, 32776, -3408,  1752, -3408,  2766,  2767,
     142,  2768,  1632,   956,  1777,  3048,  3117, -3408,  2972, -3408,
    1661,  1161,  1666,  1671,  1700,  1704, -3408, -3408, -3408, -3408,
   -3408, -3408,  1779, -3408,   151,  2792,  2792,  2792,  1591,   505,
    1784, -3408, -3408,  3135, -3408,  2775,  2778,  2780, 39520, -3408,
    2858, -3408,  2222, 23205, 14058,  2781,  2784, -3408,   758, -3408,
   -3408,  2785,  2126, -3408,  3316,  3179, -3408, -3408, 33900,  2790,
   -3408, -3408,  3071, -3408,   120,  2988, -3408, -3408, -3408,   942,
    2878,  2880,   727,   505,   -99,  1842,  2435,  2390,  2838,   910,
     910,  2600,  2840, 11143, 11143,  2801, -3408,  2834, -3408, -3408,
     283,  2222, 11143, -3408,  2212,  2858, -3408,  2807,  2809, 39520,
   -3408,  3217,   305, -3408, -3408, -3408,  2130,    98, -3408, -3408,
    2672,   161, -3408, -3408,   803, -3408, -3408, -3408,  1275, -3408,
    2811,  1275,  1275, -3408,  2151, -3408,  2836,  1454, -3408, -3408,
    2841, -3408, -3408, -3408,  1275,  2812,  1454, -3408, -3408, -3408,
    1275, -3408, 33900,   -99,  3099, -3408,  2854, -3408,  3281,  3163,
   -3408,  2130, -3408,  3164,  3067, -3408,  1454, -3408, -3408,  3305,
   -3408,  1454,  3305,  1275,  3068, -3408,  1275, 39520, -3408, -3408,
   -3408, -3408, -3408, -3408, 39520, -3408,   993,  1836,   -99,  2925,
   -3408, -3408, -3408,  2818,  2819, -3408, -3408, -3408, -3408, 39520,
    4812, -3408, -3408, -3408,  2817, -3408,  1145,  1839,   995,  2824,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, 32776,
   -3408, -3408,  3305,  3073, -3408, -3408, -3408, -3408, -3408, 11143,
   -3408, -3408,  3103,  3252, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,  2909,  2911, -3408, -3408,  2914, -3408, -3408,   107,  1942,
   -3408, -3408, -3408, -3408, 14058,  3181, -3408, -3408, -3408, -3408,
   39520,  2866, -3408, -3408,  1361, -3408, -3408, -3408, -3408, 11143,
   -3408,  2834,  2055, -3408, 25467, -3408, -3408, -3408, -3408, -3408,
    2835,  2837,  7645,  3400, -3408, -3408,  2877, -3408, -3408, -3408,
    2879,   505,   505, 39520,  3036, -3408, -3408,  1143,  1143, -3408,
     283,  1361,   995, -3408,  1844, 39520, 39520,  1869,  1152,  1152,
    1152,   957,   957, -3408, -3408, -3408, -3408, -3408,  3203, -3408,
     861,   215, 39520, -3408, -3408,  1156, -3408, -3408, -3408, -3408,
   -3408,  1275, -3408,   142, -3408, -3408, -3408, -3408, -3408,   142,
   -3408, -3408, -3408, -3408,  1556, -3408, -3408,  3093,  2882, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2843, -3408,
   -3408,  2956, -3408, 45140, -3408, -3408,   -89,  2863, -3408, -3408,
    1378, -3408, -3408,  1362, 39520, 22073,  3021, -3408, -3408,   758,
     751,  2849, -3408,   744, 39520, -3408,  3096, -3408, -3408,  2852,
    1751, -3408, -3408, -3408, -3408, -3408, -3408,   347,  3097,  2364,
    2364,  2364,  2364,  1942, -3408, -3408,  2906,  2952, 14641,  2968,
    1878, -3408, -3408,  1222,  2191, -3408,   179, -3408,  1007,   995,
   11143,  2375, 30528, -3408, -3408, -3408, -3408, -3408,  3184, 11143,
    2869, 11143,  2873,  1884, -3408, -3408,  3283,  3283, -3408, -3408,
   -3408, -3408,  1889,  1903,   744, -3408, -3408,   305,  2874, -3408,
   -3408, -3408,  1155,  1155,  1909, -3408, -3408, -3408,  1920, -3408,
    1930, -3408,  1556, -3408, 11143,  3317,  2899, 39520,   680, -3408,
   46264, 46264, 39520, -3408, -3408, -3408, -3408,  4239, -3408, -3408,
     702, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408,  3428, -3408,  2872, -3408, -3408,  2884,  1019, -3408,
    3187, -3408, -3408,  4812,  3289, -3408, -3408, -3408,  2885,  2049,
     727,  3111, -3408,   744, -3408, -3408,   995,  2888, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, 23205, 22073, -3408,
    2212, -3408, -3408, 39520,  2891,  2962,   727,  3350,  3352,   727,
     727,   727,   727,  2898,  2191, -3408,  3335, -3408,   371, 11143,
   -3408, -3408,   505,  3106, -3408,  3413,  3338,   505, 39520,   505,
   39520, -3408, 39520,  1208, -3408, -3408,  3090,   744, -3408, -3408,
    2858, -3408,  3481, -3408,   185, -3408, -3408,  1156, 39520,  1454,
     142,  1454, -3408,   505, 11143, -3408, 11143,  2930, -3408, -3408,
    3318, 39520, -3408, -3408, -3408, -3408, 11143, -3408, 45140, 45140,
   -3408, -3408, -3408, -3408,  3464,   758,  3435,  3154,  3437,  3372,
    2777, -3408, -3408,  4812, -3408, -3408,  2364,  1136, -3408, -3408,
   -3408,  2920, -3408,   727, -3408,  2924, -3408,  2968, -3408, 14641,
     -66,   -99,   727,   727,  1235,  1235,  2212, 33900,  3023, -3408,
   -3408,   727, -3408, -3408,   995, 39520, -3408,  1042,  3256,   818,
    1953,  1981, -3408,  3460, -3408,  3461,  2931,  2932, -3408, -3408,
    1995, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,   505,
     505, -3408,   195, -3408, -3408,  3294,  3377, 11143,   505, 42330,
    2938, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, 45702, 11143, -3408,   702,  3428, -3408,
    3173, -3408,  3176, -3408, -3408, -3408, -3408,  3401, 45140, -3408,
   -3408,   758, -3408, -3408, 23205, 14058,  2055, -3408, -3408,  2002,
   -3408, -3408,  2210, -3408, 16390, -3408, -3408, -3408, -3408,   -99,
     -99, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
    2012, -3408, 33900, -3408, -3408,  3478,  3479,  3388,  3482,  1042,
   -3408,   -81, -3408,  3515, -3408, -3408, -3408, -3408, 37272, 37272,
   -3408,  2976, 11143, 45140, -3408,  3398, -3408,  3334,  1683,  3282,
    2957, -3408,  2964,  1790,  3434, 46264, 46264, -3408, -3408, -3408,
   -3408, -3408,  3416, -3408, -3408, -3408, -3408, -3408, -3408, 14641,
    2973,  2975, -3408, -3408, 33900, -3408,  3023, -3408,  2978,   142,
     142,  3510,   142, -3408,  3513,  3514,   -81, -3408,  3291,  2982,
    2014, -3408,   198, -3408,   505, 42892,  3511, 39520, -3408, -3408,
   -3408, -3408, 11143, -3408, 35024, 43454,  2979, -3408, -3408, -3408,
    3141,  2777,  3413, -3408, -3408, -3408,  2191, -3408, -3408,  2986,
   -3408, -3408,   142, -3408,   142,   142, -3408,  3422, -3408, -3408,
   11143, -3408,  3429,  3069, -3408,  2998, -3408, 45140,  1431, 45140,
   -3408, -3408,  3380,  2999,   320, -3408,  3002, -3408, -3408, 45140,
    3256, -3408, 11143,  3003,  3005, -3408, -3408, -3408, -3408,  2364,
     505,  3530, 45140, 39520, 40644,  3182, 44016,  3417, 39520,  4812,
    3421,  3423, -3408, 45140, -3408,  3389,   505, -3408, -3408, -3408,
    3098, -3408, 41206, -3408,  2311, -3408,  3041, -3408, -3408,  3490,
    2009, -3408, -3408,  3274,  3027, -3408, -3408, 45140, 45140, -3408,
   -3408, -3408, 28842, 11143, -3408,  3062, -3408, -3408, -3408,   810,
    3362, 18671,  3171, 41768, 44578, -3408, -3408, -3408, 26032, -3408,
   -3408, -3408,  3440, -3408,   505, -3408,  1644, -3408, -3408, -3408,
   33900,  2016, -3408, -3408, 23205, -3408, 28842, -3408, -3408, -3408,
   -3408, -3408, 21505,  2920, -3408, -3408
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3408, -3408, -3408, -3408, -3408,    68, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408,  1539, -3408, -3408, -3408, -3408, -3408,
    1724, -1653, -3408, -3408, -3408, -3408, -3408, -3408,   585,  1383,
    3028, -3408,   586, -3408,   191, -3408, -3408, -3408, -2613,    59,
    -141, -3408, -3408,   343,    40,  2714,  -220, -3407, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408,   368,   367, -3408,
   -3408,   194, -3408, -3408, -1716, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408,  -386,  -337, -3408, -3408, -3408, -3408,  -464,
     211, -3408,   213, -3408,   216, -3408,   218, -3408,   219,   220,
     223,   225, -3408,   227, -3408, -3408,  -341, -3408, -3408, -3408,
   -3408,   228, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  -225,
   -3408, -3408,   -80, -3408, -3408,  -218,   232, -3408,  -180,   235,
   -3408,   236, -3408,  -101, -3408,   -97, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2718, -3408,
   -3408, -3408, -2010, -3408, -3408, -2151,  2322, -3408, -1620, -3408,
   -3408, -1775, -3408, -3408, -1565,   902, -3408, -3408,  1332,  -292,
   -3408, -1251, -1731, -1707, -3408, -3408, -3408, -1827, -1823,  -722,
    2065, -1103, -2053, -3408, -3408, -3408,   229, -3408, -3408, -2317,
    2323, -3408, -3408, -3408,  1385, -3408, -3408, -3408, -3408,  1166,
   -3408, -3408,   817, -1490, -3408, -3408, -3408, -3408, -3408, -3408,
      83,   209,    -9, -3408, -3040,   570, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408,  -168,  -102, -3408, -3408,  -173, -3408, -3408,
    -212, -3408,    82, -2105, -3408, -3408, -3408, -3408,  2284, -1240,
   -3408,  3225, -3408,  -511,   644,  1843, -2193, -1305,  -847,  -836,
   -2267, -3408, -3408, -3408,   330,   960,  1320,   743,  1848, -1742,
    1391,  1457, -3408, -3408,   772, -3408, -2902, -3408, -3408, -3408,
     723, -3408,   730, -3408, -3408, -3408,  -960,   694, -1361, -3408,
     322, -2137, -2298, -3408,   538, -3408,   495, -3408,  -522, -1912,
   -2176,   -61, -3408, -3408,   507,   778,   828, -3408, -2818, -1641,
   -3408, -3408,    97, -3408, -3408, -3408,    87, -3408,   340,   221,
   -3408, -3408,  -931, -2013, -3408, -3408, -3408, -1774, -3193, -3408,
    2313,   156,  1820, -2909,   287, -2146, -3408,   334, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408,  1885,  -730, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -2174,   797, -3408, -3408,  1434, -3408, -3408,
   -3408, -1733,  -456, -1575, -2922, -3408, -3408, -3408, -3408, -3408,
   -3408,  1406, -3408, -3408,  2008,  2434, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408,   561,  1613, -3408, -3408,
   -3408, -3408, -3408, -3408,   804,  2349, -3408, -3408, -3408,    -3,
   -3408, -3408, -3408, -3408,  2092, -3408, -3408,  2820, -3408, -3408,
   -3408, -3408,  1245,  1654, -3408, -3408, -3408,  -902,  1606,  -537,
   -1526, -3408,  3218, -3408, -3408, -3408, -1554, -1218, -3408,  2934,
     279, -1906,  2084,  -593, -2453, -3408,   927,  -610,  3138, -3408,
   -1047,  -985, -3408, -3408,  -586, -3408, -3408, -3408,  -556, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
    1278, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,  1309, -3408,  1810, -3408,  -444, -3408,  2736, -3408, -3408,
   -3408, -2099, -1720,  1564,   854, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -2136, -3408, -3408, -3408, -3408, -3408,
   -3408, -1521, -3408, -1796,   267, -3408,   405, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408,   -52,  1048,   -50, -1848, -1017,  2709,
    1533, -3408, -3408, -1183,  2770, -1875, -3408, -3408, -3408,  1723,
   -3408, -3408, -3408, -3408, -3408,   824, -2337, -1290, -3408, -3408,
   -2839,  -838, -2065,  -818, -3408, -2100,   421, -1634, -1633, -2126,
      86, -1087, -3408, -3408, -3408, -3408, -3408,  -182, -3408, -3408,
   -3408,   443,  1635, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,  -461,  -437, -3408,  1867,  2511, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408,  2599,  2568,  1696, -3408, -3408,
   -2302, -3408, -3408,  1657, -3408,   675, -2110, -1610,   931, -3408,
   -3408,   934, -2859, -3408, -3408, -3408, -3408, -3408, -3408,   879,
    -214,    22,  3284, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
    2395,  1888,  3209, -3408, -3408, -3408, -3408, -3408,  2108, -3408,
   -3408, -3408, -3408, -3408,  2579,  3299,  -524, -1197, -3408,  -715,
   -3408, -3408,  -788, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408,  2218, -3408,  1142, -3408, -3408, -3408,  2624, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408,   994,   -57, -3408,    28,   -91,
   -3408,   -26, -3408, -3408, -3408,  -181, -3408,  -625,  -900, -1241,
     630, -1510,  -753,   978,  2621, -2896,  -579, -1055, -1051, -2087,
      57, -3408,  2997,     9,  -727,  -244,    -7, -2573,  -109,  -532,
   -3408, -2553, -3408, -3408, -3408, -3408,  2170, -3408, -3408, -3408,
   -3408,  1286, -3408, -3408, -3408,   947, -3408,   711,   510, -3408,
   -3408,  2075, -3408,  2213, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408, -3408,  2637,  3344,
    3046, -3408,  2678, -3408, -3408, -3408, -3408, -3408,   407, -3408,
     735, -3408, -1385,  2457,   556, -3408,  1371,  -202,  -459, -3408,
     393, -3408, -3408,  1087,  3357,  3055, -3408, -3408, -3408, -3408,
   -3408, -2492,  -807, -3408, -2542, -3408, -3408, -3408, -3408,  1846,
    -973,  2782,  1407, -3408, -3408, -3408,    58,  3411,  3414, -3408,
   -3408,  -134, -3408,  -153, -3408, -3408, -3408, -3408, -3408, -3408,
   -3408,  3285, -3408, -3408, -3408, -3408,  3286, -3408, -3408, -3408,
   -3408, -3408,  3288, -3408, -3408, -3408, -3408, -3408,  1609, -3408,
   -3408, -3408, -3408, -3408, -3408, -3408, -3408
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2309
static const yytype_int16 yytable[] =
{
     451,   877,  1140,   873,   956,  1335,   971,   979,  1337,   903,
    1022,  1372,   567,   489,   136,  1240,   495,  1499,   490,  2670,
    1014,  1016,  2123,  1151,  1650,   508,  1717,   506,   916,  2034,
    1269,   728,  1548,   513,  1300,   519,  1549,  2839,  2509,  2426,
    2618,  2536,  1760,  2075,  2429,  2700,   536,   449,  1612,  2917,
    2877,  2580,  1464,  1856,  1269,  3186,  2403,  1053,  1263,   998,
    2566,  2570,  2572,  1568,  1073,  1342,  2766,  1077,  2602,  2259,
    1576,  3168,  2759,  1522,  2761,  1040,  1343,  1071,  2252,  2265,
     493,  2584,  2585,  2269,  1724,  1301,   556,  2193,  2374,  1084,
    1085,  1086,  2375,   987,  2284,   887,  2555,  3173,  2593,  1785,
    1763,  1733,  2253,  3238,  2293,   588,  2603,  2666,   559,  3030,
     451,  1736,  1737,   451,   566,   572,  2647,   937,  2776,  1102,
    1103,  3210,  2781,  3466,  1192,   947,   948,  2160,  1660,  2363,
     556,  1192,  1135,  1578,  1579,  3374,  1798,  1582,  1583,  1584,
    1585,  2650,  1587,  1588,  1590,  1592,  1593,  1594,  1595,  1596,
     555,  1092,  1093,  1094,  2215,  2216,  1192,   561,  2240,  1302,
     563,  1906,  2582,  1136,  2116,  2677,  2678,  1187,  2634,  1102,
    1103,  2227,  3203,  3208,  1798,  2634,  3209,   892,  2648,  1102,
    1103,  2248,  2652,  1615,  2371,   576,  2136,  1671,  2245,  2246,
    2301,  3346,  2628,  2629,   582,  3218,  2668,  2669,   839,   840,
    2763,  3237,  1102,  1103,  2267,  2268,  2679,  2270,  2372,  1274,
    2273,  2274,  3311,  2404,  2277,  1154,  1080,  2740,  2229,  2286,
    1102,  1103,  3793,  2289,  2290,  2291,  2292,  1102,  1103, -1751,
    2296,   781,  2298,  2872,  2209,  1339,  2639,  1184,  2307,  2632,
    2945,  2311,  2312,  2313,  2336,  2638,  1339,  1787, -2213,  2346,
    1936,  1193,   909,  2884, -1333,  2352,  2353,  1615,  1193,  2356,
    3385,   114,  1102,  1103,  -761,  3336,  1759,   799,  3287,  1339,
    3377,  3174,  1221,  3775,  1325,  -478,  3372,  2387, -2147,  3055,
    1137, -1333,  2780,  1193,  2639,  1841,   607,  1156,  3070,  2358,
    2359,  2360,  2361,  1102,  1103,  1140,  1282,  3732,  -479,   502,
     959,  3071,  2378,  1632,  1346,   839,   840,  2733,  2734,  1912,
    1102,  1103,  1946,  2710,  2588,  3072,  2548,  2302,  2136,  1102,
    1103,  3638,  1781,  1102,  1103,   839,  3204,  1844,  1102,  1103,
    3833,  3522,  1198,  3833,   603,   893,  1102,  1103,   939,  2462,
    1102,  1103,   545,   608,   135,  1488,  1140,  2640,  1489,   128,
    1140,  2551,   951,   593,  1238,  1232,  1396,  1102,  1103, -1291,
    1781,  1298,   528,   116,  2325,  1870,  3104,  1313,  3448,  1267,
    1102,  1103,  1227,  1417,  1081,  1419,  1420,  2813,  3312,  1925,
    1102,  1103, -2147,   517,  1102,  1103,   526,   784,  3874,  3406,
     527,  2383,  1102,  1103, -1291,  -557,  1799,  3960,  3410,   135,
   -1333,  2745,  1926,  3115,   137, -2268,  1299,  2601,  3311,   503,
    3260,  2137,  2384,  3961,  1102,  1103,  3875,  1949,  3423,  3261,
    1756,   454,  2009,  3425,   952,   529,  1608,   129,  1102,  1103,
    1102,  1103,  1216,  2552,  1799,  1319,  1314,  2549,  2639,  3455,
    2379,  1102,  1103,  3489,  3729,  1462,   973,   981,  1104,   584,
    1148,  1105,  2171,  3365,   910,   566,  1418,   572,  1040,  1326,
     499,  3712,  2921,   609,  2912,  3475,  3512,  3513,   986,  1759,
    2711,  2885,   741,  1871,  3313,  1363,   572,   783,  1609,  2464,
     911,  3056,  1102,  1103,  1718,   779,  2952,  1721,  3366,   566,
     546,   789,  3175,  1342,  3775,  1726,  2930,   556,  2943,  1633,
    2746,  2172,  1139,   803,  1343,  1612, -1603,  2315,  1104,  1102,
    1103,  1105,   800,  3794,  1761,  3733,  1102,  1103,  2252,  2954,
    1102,  1103,  1738,  1739, -1333,   556,   889,  1573,  1251,  2767,
    2466,  1104,  1785,  3510,  1105,  1102,  1103,  2189,  1416,  1102,
    1103,  2374,  2253,  2137,   906,  2375,  1616,  3262,  2641,  1104,
    2946,  1856,  1105,   566,   782,   920,  1104,  2634,  2251,  1105,
    1138,   793,  1447,  1448,  1342,  1581,   556,   451,  2138,  3059,
    2583,   556,  3129,  1781,  3312,  1343,  2611,   945,  2634,   556,
     556,  1397,  1602,  1487,   957,   920,  3338,  2735,  3042,   566,
    1735,  1104,  1501,  1365,  1105,  3639,  -557,   597,   820,   988,
    3730,  2054,  1296,   993,  1514,  1515,  1516,  2051,  1661,  2556,
    1365,  3211,  2057,  1521,   931,  2060,  1275,  1745,  1634,  3314,
    1616,  2937,  1104,  1185,  1188,  1105,   870,  2630,  1786,  2942,
     930,  3315,  1102,  1103,  2651,  1150,  2653,  2371,  2522,  1104,
     894,  3347,  1105,  2664,  1102,  1103,  3441,  1041,  1104,  2773,
    3621,  1105,  1104,  1906,  3053,  1105,  2676,  1104,  1763,   985,
    1105,  2372,  2685,  2626,  2370,  1104,  2663, -2213,  1105,  1104,
    1106,  3681,  1105,  2882,  2883,  2592,  3197,  2699,  2671,  1082,
    1787,  2303,  2765,  1102,  1103,  3041,  1104, -1333,  2037,  1105,
    1911,  1609, -2213,  2631,   504, -2147,  1618,   940, -1333,  1104,
    2138, -1333,  1105,  1283,  1610,  1099,  2642,  1101,  -761,  1104,
    3216,  3217,  1105,  1104,  1365,  3316,  1105,  2326,  3220,  -478,
    1106,  1104, -2147,  3714,  1105,  3243,  2732,  2173,   966, -1291,
    1106,  1144,   451,  1146,  1947,   920,   451,   566,  1266,   451,
     566,   556,  -479,  1104,  1722,  1700,  1105,  3689,  1490,  1652,
    3523,  1491,  3741,  1106,  -557,  3881,  2738,  1104,  3124,  1104,
    1105,  1227,  1105,   500,  1667,  1746,  2536,  1557,  1558,  1747,
    1104,  1106,  2713,  1105,  2394,  3288,  1197,  -186,  1106,  1145,
    1365,  3780,  1362,  1149,  3158,  2814,  1153,   556,  3162,  1227,
    3190,  3713,  1557,  1975,  3177,  3073,  3149,   566,   556,   457,
    2750,  1912,   556,  2922,  2923,  1102,  1103,  1218,  2044,   556,
     596,  1104,  2377,  1106,  1105,  3205,  3015,  3133,   807,  1956,
    2747,  3157,  1765,  3367,   949,  3161,  2181,  3315,  2010,   747,
    3364,  3736,  1423,  3738,  1305,  3195,  3196,  1609,  1104,   870,
     566,  1105,  1252,  2780,  1106,  1104,  2780,  2780,  1105,  1104,
    2718,  1207,  1105,  2634,   804,  3659,  1102,  1103,  2692,  1957,
    2693,  1106,  1224,  2780,  1104,  1102,  1103,  1105,  1104,   967,
    1106,  1105,  2070,  2944,  1106,  3813,  1937,  3219,  1297,  1106,
    3565,  2308,  3236,  3239,  3241,  3242,  1137,  1106,  2014,  2015,
    3061,  1106,  -394,  2186,  1955,  2719,  2283,  2694,  1102,  1103,
    2252,  1338,  1962,  1102,  1103,  2031,  2032,  3576,  1106, -2148,
    2751,   498,  2374,  1269,  1102,  1103,  2375,  1610,  2695,  2395,
    3085,  1106,  2214,  1963,  2253,  1981,  3856,  2339,  1874,   556,
    1673,  1106,  1368,   556,  3066,  1106,  2184,  2916,   954,   955,
    1717,  1717,  1269,  1106,  2228,  2188,  1973,  2070,  2191,  2192,
    1974,  2696,  1102,  1103,  1102,  1103,  3055,  3450,  1977,  3122,
    2259,  1104,  3280,  3668,  1105,  1106,   808,  3663,  3664,  2052,
    2284,  1102,  1103,  1104,  2571,  3580,  1105,  1785,  2045,  1106,
     556,  1106,   556,  1102,  1103,  2340,  3144,  3565,  3565,  1102,
    1103,  1563,  1106,  2589,  1989,  2443,  1997,   582,  2251,  1102,
    1103,  3660,  2479, -2271,  3491,  3145,  2480,  2481,  2371, -1625,
    1856,  2061,  1104, -2148,  2960,  1105,  1798,  1041,  3070,  2035,
    1102,  1103,  1399,  3357,  3358,  2608,  2951,  3171,  1601,  1745,
    1041,  3071,  2372,  1106,  3146,  1102,  1103,  3519,  2484,  2485,
    1102,  1103,  3352,  2059,  1424,  3072,  1429,  2798,  2799,  2109,
    2309,  1342,  1102,  1103,  3167,   839,   840,  3979,  1102,  1103,
    1106,  1786,  1343,  1610,  1102,  1103,   637,  1106,  1102,  1103,
    3676,  1106,  3066,  2182,  1938,  2478, -1626,  2341,  2752,  3677,
    1550,  1950,  2074,  3390,  3067,  2488,  1106,  3685,  1102,  1103,
    1106,  2540,   968,   566,  2955,  1549,  2202,   950,  1102,  1103,
    2815,  2816,   510, -2271,  2836,  2837,   967,  1659,  3669,  1102,
    1103,  1906,  2961,  1102,  1103,  3565,  3565,  2370,  2926,  2845,
    2846,  2847,  1597,  1400,   642,  1787,  1674,  1401,   518,  1306,
     566,  2132,  2133,  3769,  1104,  1605,   523,  1105,  1402,  3391,
     556,  1777,  1307,  2025,  1102,  1103,  3695,  2795,   530,  2342,
     556,  2606,  1102,  1103,  2396,  1549,  3068, -1625,  3056,  2879,
    2880,  2881,  3292,  2046,  1256,   531,  1138,  2071,  2753,  3178,
    2174,  3452,  1707,  2110,  2621,  1102,  1103,  1746,  2697,  2047,
    3815,  1747,  1911,  1106,   932,  1104,  1657,  1637,  1105,  1640,
    3816,   556,  3086,  2376,  1104,  1106,  3565,  1105,  2001,  1102,
    1103,   533,  1781,   556,  1607,  3641,  1102,  1103,  1644,   566,
    2002,  3565,  1781,  2157,  1102,  1103,   653,  3520,   556,   556,
    1257,   579,  3067,  2768, -1626,  3565,  1708,  1104,  1658,  1676,
    1105,   969,  1104,  1211,  1106,  1105,  1212,  1685,  1767,  3854,
    2683,    43,  2071,  1104,  1549,  1634,  1105,  1258,  1712,  2003,
     451,   451,   451,   556,   451,   556,  1308,  2158,  1403,  1912,
    1697,  3670,  1925,  1102,  1103,  2377,  1719,   451,  2720,   566,
    3678, -2308,  3898,  3898,  1778,   451,  1799,  2907,  1309,  1687,
    3565,  1104,  2622,  1104,  1105,  1926,  1105,  1238,   669,  2038,
    1399,  1310,  3565,  3565,  3076,   556,  2598,  1701,  1702,  1703,
    1104,  1705,  2908,  1105,  3581,  1102,  1103,  2599,  3521,  1798,
     548,  2865,  1104,  1598,  1720,  1105,  3624,  1704,  1104,  1706,
    1713,  1105,  1725,  2927,  1095,  2635, -2148,  2635,  1104,   968,
    1609,  1105,  3565,  1102,  1103,  1599,  -394,   241,  2343,   243,
     566,  1745,  3565,   671,  2117,  3069,  3578,  1688,  1404,  1104,
    2111,  1370,  1105, -2148,   556,   549,  1106,  2039,   556,  1734,
     131,   557,  1797,   132,  1104,  1102,  1103,  1105,  1311,  1104,
    1213,  2004,  1105,  1873,  3565,  1371,  3565,  3457,  1102,  1103,
    2251,  1104,  3392,  1759,  1105,  3817,  3565,  1104,  1709,    55,
    1105,  1400,  2933,  1104,  3723,  1401,  1105,  1104,  2721,  3565,
    1105,  3565,  2118,  3565,  1102,  1103,  1402,  1106,   511,   566,
    3565,   451,   451,   451,  1923,   451,  1106,  1104,  1872,  3565,
    1105,   932,  2008,   993,  3435,  1935,  3623,  1104, -1603,  3286,
    1105,  2027,  3291,  1689,  3565,  3565,  3390,  3724,  1104,  2835,
    2909,  1105,  1104,  1259,  3604,  1105,  1102,  1103,  1436,  1106,
    3565,  3565,  1102,  1103,  1106,  3565,  1102,  1103,  1919,  1920,
    1921,  1102,  1103,  3605,  2796,  1106,  1200,   664,   969,  2797,
    1953,  1139,  1463,  1104,  3070,  2868,  1105,   696,   870,  1549,
    2808,  1104,  3642,  3069,  1105,  2600,  1600,  3071,  2370,  1746,
    1102,  1103,  3391,  3132,  3801,  1781,  2483,  1041,  1982,   811,
    2724,  3072,   551,  1106,  1104,  1106,  1786,  1105, -2308,  1714,
    2076,   839,   840,  3985,  2431,  2725,  1102,  1103,  2818,  1436,
    2819,  2518,  1106,  1102,  1103,  3073,  1403,  2437,  1104,  1102,
    1103,  1105,  1690,  2857,  1106,  1104,  2157,  3299,  1105,  3818,
    1106,  3373,  2040,  1104,  2672,  3867,  1105,  1365,  2026,  3235,
    1106,  1102,  1103,  3725,  1954,  1364,  1610,  2043,  1102,  1103,
    2452,  1437,  1260,  1270,  1961,  1201,  3802,  3618,  3643,  1799,
    3955,  1106,  3436,  1102,  1103,  3260,  2142,  2773,  1102,  1103,
     839,   840,  1261,  3785,  3261,  1964,  1106,   664,  3619,  1764,
     560,  1106,  1104,  3823,  3644,  1105,  1102,  1103,  3424,  2067,
    1965,  3426,   812,  1106,   562,  1972,  1267,   566,   664,  1106,
    1271,   785,   566,  1609,  2673,  1106,  1404,  1985,   556,  1106,
    2082,  2494,  1262,  1986,  1436,  2087,  2087,  1365,  2087,  1990,
    1102,  1103,  1452,  1994,  1104,  1436,  2377,  1105,  1436,  1106,
    1911,   556,  1102,  1103,   556,  1677,  2376,  1102,  1103,  1106,
     688,  3458,  1202,  1995,  3116,   573,   566,   566,   556,   556,
    1106,  2411,  1104,  1996,  1106,  1105,  2087,  2087,  2087,   813,
    2131,  3384,  1976, -1444,  2000,  1020,  1102,  1103,  2005,  3281,
    2150,  1102,  1103,   574,  2169,   131,  1102,  1103,   132,  2086,
    2086,   786,  2086,  2180,  1104,  1106,  3117,  1105,  1102,  1103,
    1798,  1379,  1380,  1106,  2176,  2108,  2674,  1104,  1207,  2013,
    1105,  2635,  3262, -1444,  3384,  1102,  1103,  2018,   584,  1102,
    1103,  3397,  1224,  2135,  3451,  2117,  1106,  2198,   556,   664,
    2086,  2086,  2086,  1104,  1976,  1240,  1105,  1506,   116,  1629,
    2197,  3305,  1630,  2913,   588,  1631,  1899,   556,  1510,  1768,
    1106,  1533,  3064,  2662,  2065,  3803,   585,  1106,  1678,   787,
    1769,   870,  2066,  1269,  2033,  1106,  1102,  1103,  2065,  1119,
     688,  2770,  2283,  3078,  3079,  1104,  2893,  2218,  1105,  2786,
    3720,  1104,  3721,  2118,  1105,  1104,  2225,  2226,  1105,   590,
    1104,   688,  2190,  1105,  3091,  1020,   595,  2230,  2231,  2232,
    2233,  2915,  2241,  2242,  2364,  1102,  1103,  1176,  3398,  2119,
    3212,  2208,   604,  3213,  1106,   745,  1020,  2623,   465,  1104,
    2540,  1717,  1105,  1798,  1549,  1951,  1355,  1356,  2792,   606,
    2049,  1391,  1392,   592,  2366,  3592,  3593,  3594,  3595,  1610,
    3404,  3405,  2427,  2310,  3399,  1104,   737,  2427,  1105,  2199,
     742,  1021,  1104,  3408,   780,  1105,  1106,  2324,  1104,  3411,
    1192,  1105,   796,  1414,  1952,  1139,  2247,  2200,  2334,  1899,
    2793,   923,  1072,  2606,  2486,  2120,   823,  1549,  2201,   792,
    1104,  1177,  3427,  1105,  1106,  3429,  1781,  1104,  2337,  2338,
    1105,  2345,  1899,  2347,  2348,  2349,  2350,  2351,  2800,  2061,
    2354,  2355,  1104,   884,  2683,  1105,   566,  1104,  1549,  3566,
    1105,  2380,   688,  1770,  1969,  1139,  1106,  1899,  3893,  2947,
     924,   556,   556,   798,  1178,  1104,  1978,  1139,  1105,  1106,
    2804, -1333,  2476,   882,   883,  1569,   886,  1020,  2772,  1179,
    1119,   905, -1603,  2805,   566,  1979,  1504,  2121,  1122,   566,
    2958,   808,  2202,  3764,   904,  1106,   783,  2366,  2963,  1104,
    1799,  2965,  1105,   913,  2497, -1603,   932,  3696,   960,  2806,
    3686,  1104,  3354,   943,  1105,   922,  1104,   537,   961,  1105,
     965,  3073,  1771, -1333,  1119,  2399,  2401,  1193,   114,   824,
    1991,  1139,  1119,  1076,   925,  2864,  3701,  1106,  1900,  3704,
    3705,  3706,  3707,  1106,  1609,  1104,  1772,  1106,  1105,  1781,
    1104,  3248,  1106,  1105, -1333,  1104,  1142,  2376,  1105,   538,
    3198,  2807,   995,  3201,  3202,  1139,  2809,  1104, -1333,   996,
    1105,   997,  1781, -1333,   566,  1992,  1139,  2834,   999,  2906,
    3214,  1106,  1993,  1139,  1104,  1998,  1139,  1105,  1104,  1102,
    1103,  1105,  3782, -1333,  1143,  2812,  2203,  1781,   825,  2495,
    1000, -1333,  2427,  1773,  2574,  2579,   566,  1106,  2868,  2243,
    2244, -1333,  1549,  3807,  1106,  2472,  1139,  1001,   133,  1147,
    1106,  2817, -1333,  1799,   455,   456,   539, -1333,  2820,  2500,
    2501,  1004,  3799,  3800,  2822,  1104, -1333,  1005,  1105,   954,
     955,  3812,  1106,  1006,   505,  1570,  2617,  2427,  1007,  1106,
     512,  2142,   839,   840,   516,  2204,  2824,  3885,  2234,  1122,
    1008,  1900,  2526,  2826,  1106,  1009,  3468,  1609,  1010,  1106,
    1011,  1284,  2810,  1139,  1104,  1012,  2122,  1105,  2827,  2541,
    2874,  2875,   894,  2828,  1900,  1774,  1015,  1106,   898,   899,
    1609,   900,   870,   901,  1017,  3221, -1333,  2560,  2562,  1018,
    1285,  3096,  1019,  1122,   566,  1119,   566,   566,  1023,  1900,
    1024,  1122,  1025,  2559,  1026,  1609,  2235,  2497, -1333,  1027,
    3296,  1106,  1028,  2254,  3889,  2967,  2968, -1333,  3054,  2968,
     926,   870,  1788,  1106,  1173,  3097,  3222,  1029,  1106,  1550,
    3223,  1286,  2236,  2497,  1175,   577,  1287,  3098,   566,   566,
    1030,  3954,  3298,  3956,  1901,  1031, -1333,  1131,  1132,  1133,
    1134,  1180,  2919,  3469,  3470,  2144,  2145,  1106,  3471,  3472,
    1610,  1032,  1106,  3101,  1139,  1035,  3972,  1106,  1036,  1901,
    1182,  3304,  3224,  3119,  3120,   118,  3306,  1042,  2324,  1106,
     927,  3307,   928,  1043,  2637,  2324,  1124,  1125,  2324,  2871,
   -1333,  3606,  2324,  2649,  2658,  1044,  1106,  1045,  2237,  2659,
    1106,  4003,  4004,  1046,  2658,   870,  2324,  2324,  1047,   566,
    3308, -1333,  2660,  2661,  3309,  2280,  2324,  1048,  1550,  3607,
    1571,  2680,  1789,  3253,  3254,  1049,  2688,   556,   870,  1050,
    1124,  1125,  2690,  2691,  1052,   566,  1572,  2687,  1440,  1441,
    1442,   114,  2324,  2709,  1054,  3969,   540,  1106,  1055, -1333,
    1453,  2117,  1370,   870,   826,   827,   828,   829,   830,   831,
    1158,  3589,  3284,  3293, -1603,  1056,  1119,   541,  2415,  1057,
    2238,   832,   998,  1288,  1122,  1058,  1371,  1902,  1059,  1119,
    1060,  1507,  1061,  1610,  1511,  3084,  1106,  3300,  1139,  3310,
    1139,  2689,  -695,  2416,  3323,  3324,   542,  2731,  2089,  1190,
    2090, -1333,  1902,  1062,  1529,  1530,  1610,  1063,  1534,  2118,
    2739,   556,  2324, -1333,  1127,  1128,  1129,  1130,  1131,  1132,
    1133,  1134,  1064,  3102,  1065,   115,  1066,  1551,  1552,  3608,
   -1333,  1610, -1333,  2362,  2417,  2119,  2254,  2418,  2152,  2153,
    2154,  1067,  1289,   116,  1068,  2419,  3438,  2244,   543,  3453,
    3454,  1191, -1333, -1333,  3511,  3120, -1333, -1333,  1127,  1128,
    1129,  1130,  1131,  1132,  1133,  1134,  3506,  3507,  1129,  1130,
    1131,  1132,  1133,  1134,  1199,  2755,  3988,  3989,  1790,  3514,
    3454,  1469,  1069,  3267,   954,   955,  1070,  1791,  3602,  3603,
    3225,  1109,  1110,  1792,  3631,  3632,  3226,  3995,  1811,  3636,
    3454,  2120,  1290,  2234,  3609,  1812,  1813,  1074,   117,  2198,
    1075,  1124,  1125,  3637,  3454,  1078,  2282,  1814,  1815,  3647,
    3648,  3610,  1079,  2857,  2082,  1111,  1197,   566,   566,   566,
    3649,  3650,  3227,  3529,  1112,   118,  1083,   556,  2280,  3529,
    3651,  3650,  1087,  3611,  1088,  1122,  -556,  1816,  1537,  1089,
     566,  1817,  1818,  1550,  1090,  2254,  1819,  1091,  1122,  2239,
    1141,  2235,  1820,  3824,  3632,  1205,  2255,   566,   566,   566,
    1821,  1113,  1206,  2121,  1473,  1370,  1549,  1822,  1793,  3289,
    2892,  1219,  1114,  2427,  1230,   119,  2894,  2236,  2896,  1231,
    1823,  3825,  3632,   749,   566,  3228,  2891,  2234,  1234,  1371,
    2684,  2108,  1235,  1291,  1339,  3830,  3120,  1824,  1238,  1115,
    -556,   795,  3858,  3859,  1825,  1826,  1249,   459,   806,  2254,
    1250,  1827,  3865,  3866,  3919,  2730,  4031,  4032,  1241,  1828,
    2255,  2199,  1254,  -788,  1255,  1829,  1292,  1539,  1539,   890,
    1128,  1129,  1130,  1131,  1132,  1133,  1134,  3805,  3805,  2200,
    1267,  2420,  1276,  2237,  1277,  2235,  1278,  -556,  3515,  3516,
    2201,  1279,  1830,  2256,  1116,  1794,  1280,  2324,  1281,  1474,
    3136,  3137,  2658,  1477,  3106,  3107,  1118,  3321,  3322,  1303,
    1478,  2236,  1124,  1125,  1304,   566,  1318,  1320,  2324,  1321,
    3229,  1323,  1328,  1333,  1370,  1124,  1125,   870,  1831,   460,
    1832,  1339,  2953,  2658,   120,  1347,  1345,  1349,  1833,  1352,
    2956,  2658,  3612,  1353,  2658,  1357,  1360,  1361,  1371,  2198,
    2198,  -556,   476,  1834,   556,  2238,  2281,  2256,  1408,  1410,
    -729,  1409,  1413,  2969,  2202,  1415,   556,  1416,  1192,  2282,
    3025,  1421,  1422,  1430,  3792,  1432,   451,  2237,  1137,  1436,
    3035,  1443,  1455,  2334,  1479,  1457,  3355,  1082,  1370,  1503,
    3040,  1493,  2122,  1549,  1504,  3478,  1505,   121,  1547,  1586,
    1559,  1119,  3050,  1564,  1580,  1835,  1939,   461,   477,   556,
    3737,  2421,  1371,  1022,  1073,  1077,  1606,  1613,  1614,  1619,
    1622,  1623,  1836,  3031,  1624,  1626,  1837,  1627,  1645,  1646,
    2970,  1649,  1240,  1481,  1651,   478,  1663,  1655,  3141, -1333,
    1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  1664,  2238,
    1665,   122,  1666,  -849,  2617,  1129,  1130,  1131,  1132,  1133,
    1134,  1672,  1838,  1680,  3531,   479,  1686,  1839,  2203,  3792,
    2422,  2199,  2199,  3052,  1840,  1983,  1695,  1699,  1723,  1987,
    3492,  1841,  1842,  1728,  3100,  1160,  1727,  1729,  -556,  2200,
    2200, -1333,  2560,  1730,  1732,  1193,  1742,  1120,  2423,  1744,
    2201,  2201,  2011,  1740,  1757,  1766,  1867,  1768,  2559,  2142,
    1365,  1843,   480,  1875,  1877,  1878,  2526,  2143,  1769,  1121,
   -1333,  1876, -1333,  1844,  1845,  1846,  1847,  2204,  2541,  3131,
    1879,   566,  1880,  1881,  3792,  1882, -1333,  1883,  1884,  2257,
     566, -1333,  1885,  1886,  2239,  1848,  2495,  1887,  1888,  1889,
    1890,  1891,  -556,  1892,  1893, -1333,   566,  3774,  1894,  3567,
    1482, -1333,  1161,  1913,  2169,  1895,  1914,  1916,  1928, -1333,
    1929,  2258,  1484,  1918,  2202,  2202,  1933,  1970,  1940, -1333,
    1122,  1550,  3652,  1942,  1960,  1943,  1944,  1959,  1966,   462,
   -1333,  1967,  1968,  2324,  1976, -1333,  3359,  1984,  1849,   954,
     955,  2324,  1980,  2658, -1333,  1988,  4023,   463,  2006,  2042,
    1549,  2007,  1550,  1850,  2012, -1054,  1851,  2658,  2016,  2017,
    3616,  2324,  1162,  2144,  2145,  2427,   -63,  2028,  2029,  3910,
    3911,   481,  3913,  1549,  2030,  2258,  2048,  4023,  2239,  1134,
    1852,  1549,  2058,   464,  1163,  -484,  -556,   465,   739,   740,
   -1171,  1853,   743,   744,  2077,  2078,   746,  2146,   748,  2102,
    2105,  2114,  2129,  2126, -1333,  2151,  2177,  2165,  2179,  2183,
    1123,  1770,  3946,  2185,  3947,  3948,  2207,  2211,  2203,  2203,
    2206,  2210,   466,  2213,  2219,  2217, -1333,  2254,  2091,  3343,
     467,  2220,  2221,  2222,   482, -1333,  2223,  2224,  2266,  2271,
    2275,  2272,  3250,  2276,  2278,  2279,  2285,  -788,  2092,  2288,
    -556,  2287,  2294,  3279,  2295,  2299,  2300,  1124,  1125,  2305,
    3271,  2306,  2093,  2365, -1333,  2327,  2402,   566,  1126,  2405,
    2386,  2094,  2414,  2433,  2409,  2434,  2432,  2204,  2204,  1164,
    1771,  2444,  2445,  2499,  2066,  2457,  2473,  1165,   483,  3779,
    3616,  2474,   484,  2482,  3777,  2475,  2491,  4017,  2492,  2504,
    2505,   954,   955,  2512,  1772,  2506,  2502,  2514, -1333,  2516,
     485,  3332,  2519,  2617,  2503,  2517,  1550,  1166,  2095,  2096,
    2520,  2527,  2531,     1,     2,  2543,  2544,  1119,  2545, -1333,
    2546,   566,  2158,  2564,   616,   486,  2157,  2563,     3,  2565,
       4,  2587,  2586,  2590,     5,  2594,  2097,  2595,  2596,  2612,
     487,  2619,  2620,  2665,  1167,  2667,  2717,  2723,     6,     7,
    2729,  1773,  2701,  3353,  2727,     8,  2736, -1333,  2730,     9,
      10,  2737,  3279,  2741,  2742,  2743,  1841,  2744,  1168,  1759,
    2427,  2773,    11,  2782,  3387,  1127,  1128,  1129,  1130,  1131,
    1132,  1133,  1134,  1934,  2783,  2777,  1169,  2784,    12,   132,
    2785,  3378,  2787,  2788,  2098,  2831,  2833,  2838,   637,  2841,
    2843,  2850,  2848,  1211,  2854,   566,  2863,  2859,    13, -1333,
    2862,  2876,  2870,  1999,  2878,  2873,    14,    15,    16,  2889,
   -1333, -1333,  3413,  2890,  2895,  3141,  2903,  2914,    17,    18,
    3430,  2920,  2924,  1774,  2925,  2928,  2940,  3434, -1333,  2941,
   -1333,    19,   616,  2950,  2099,  2959,  3026,  3033,  3037,   641,
    1157,  3029,  3050,    20,  3492,  3032,   642,  3439,  3039,  3044,
   -1333, -1333,  3046,  -401, -1333, -1333,  1814,  1815,  3051,    21,
    2142,  3062,   566,  3060,  3080,  3840,  3088,  3112,  3077,  4029,
    3114,  3087,   646,  3134,    22,  3099,  3150,  3123,  3151,    23,
    3840,  3142,    24,  3154,  3159,  3160,  1122,  3180,  -681,  -681,
    1817,  3155,  3181,  3179,  3851,  3777,  3942,  -681,  3199,  3378,
    3172,  1820,  2325,  3482,  3249,    25,   637,    26,  3275,  1821,
    3192,  3244,  3251,  3258,  3247,  3268,  3272,   566,  3238,  3269,
    3273,  3282,  3283,    27,  3284,  3285,  3294,  3295,  3297,  1823,
    3301,  3302,  3319,  3303,  3326,  3327,  3504,  3328,   653,  3330,
      28,  3337,  3339,  1339,    29,  3324,  1824,  1119,  3279,  3279,
    3340,  3344,  2893,  3345,  3348,  3942,  3350,   641,  3351, -1254,
    3363, -1259,  3616,  2427,   642,  3525,  3375,  3235,  3376,  3417,
    3403,  3409,  3407,  3418,  1829,  3419,  3421,  3422,  3442,  3428,
    3443,  1814,  1815,  3456,  3459,  3461,  4012,  3463,  3462,  3464,
     646,  3483,  3465,  3476,   664,  3495,  3498,  3496,  3500,  3532,
    3502,  3840,  3518,  3568,  3293,  3414,  3534,  3587,  3533,   668,
     669,  3936,  3588,  -681,  -681,  1817,  3575,  3573,   556,  3591,
    4012,  3597,  -681,  1124,  1125,  3598,  1820,  3279,  3628,  3600,
      30,  3626,  3630,  3640,  1821,  3633,  -271,  3654,  3672,  1832,
    3674,  3682,  3700,  2801,  3675,  3684,  3687,  1833,  3690,    31,
    3699,  3702,   735,  3703,  1823,  3964,   653,  3708,  3711,    32,
    3715,  3717,  1834,  3719,  2713,   566,  3731,  3741,  1339,    33,
    3840,  1824,  3840,  3744,  -289,  3770,  3771,  3772,   735,  3982,
    3773,  3784,  3574,  3821,  3787,  3809,  3826,  3827,  3840,    34,
    3828,  3829,    35,  3836,    36,  3847,  3837,    37,  3848,  1829,
      38,  3850,    39,  3841,  3869,  3870,  3871,    40,  3872,    41,
    3658,  3878,   664,  3881,  1835,  3665,    42,  3886,  3888,  3840,
    3840,    43,  3891,  3890,  4027,  3894,  1122,   668,   669,    44,
    3900,  1836, -2068,  3904,    45,  3905,  3912,  3909,    46,  3914,
    3915,  3917,  3918,  3924,  3937,  3938, -1405,  3949,  3951,  3957,
    3952,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,  3953,
    3958,    47,  3971,  3967,  1832,    48,  3968,  3962,  3975,  3977,
    1550,   556,  1833,  3980,  3983,  3981,  3482,   688,  3808,  3987,
    3991,  3379,  3993,  1840,  3380,  4000,  4001,  1834,  4015,  4018,
    4024,  1842,   735,  4028,   694,  3667,  2498,   735,  2357,   696,
    2388,  3504,   697,  3504,  3257,  3722,    49,  2627,   978,  3679,
    3259,  3570,  3849,  3901,  3444,  1351,  3447,  3572,    50,   790,
    4034,  3735,    51,  3996,  3545,    52,  3546,   735,  4005,  3548,
      53,  3549,  3551,  3552,  3745,  3694,  3553,  3921,  3554,  1835,
    3555,  3556,  3834,   735,  3922,  3559,  3899,  3846,  3560,  3561,
    3845,  3381,  3382,  2069,  1848,    54,  1836,  1412,  1810,  3577,
    3121,  1854,  2686,  1124,  1125,  2858,  3698,  3599,  3788,    55,
    3333,  3903,  3861,  3908,  3941,  1898,  3710,   605,  3274,  2314,
     566,  3509,  3043,  2497,   735,   735,   735,   735,  3814,  2760,
    3798,  3193,  2321,  2714,  3206,   688,   735,  2643,  3245,  3379,
    3182,  3207,  3380,  3527,  3386,  3857,  3420,  1849,  1840,  3412,
    3185,  3148,   694,  3728,  3734,  3526,  1842,   696,  1927,  3688,
     697,  3586,  1850,  3530,  3646,  1851,  2398,  3184,  2318,  2704,
    2195,  1743,  3389,  3183,  2528,  3907,  1896,  2134,  1002,  2853,
    1369,  2547,  2515,   902,  2156,  3617,  3103,  2430,  1245,  1852,
    2840,  2607,  3156,  1502,  3635,  3508,  3879,  1550,  3038,  3880,
    1853,  1454,  2489,  3188,  1540,  3505,  3986,  3494,  1034,  3381,
    3382,  3806,   752,   753,  1668,  2554,  2400,  1643,  3335,  1848,
    2511,  3127,  2534,  3126,  1051,   566,  3855,  3166,  3862,  3863,
    4033,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,   891,
     994,  2334,  2334,  2406,   876,  1932,  1377,  1378,  1379,  1380,
    1381,  1382,  2762,  1383,  1384,  1385,  1386,  1387,  1388,  1389,
    2187,  1390,  2079,  2966,  1711,  3940,  3113,  3873,  1097,  3965,
    3916,  4035,  1849,  3130,  3416,  1670,  2166,   566,  3152,  2911,
    3349,   819,  3497,  1233,  2113,  1684,  3596,  1850,   754,  1636,
    1851,  1675,  2842,  1917,  3590,   821,  1237,  1555,  2830,   599,
    3926,  2471,   600,     0,     0,   982,   983,  3934,   984,     0,
       0,     0,     0,     0,  1852,     0,   755,     0,     0,     0,
       0,     0,     0,     0,     0,  1853,     0,     0,     0,   756,
       0,  4030,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   757,     0,   758,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,   759,     0,  3973,     0,     0,     0,
       0,  3978,     0,     0,     0,  2389,     0,     0,  1391,  1392,
       0,     0,     0,     0,   760,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,   761,     0,
       0,     0,   735,   735,  1550,   762,     0,     0,     0,     0,
       0,   735,   735,   735,   735,   735,   735,   735,     0,     0,
       0,     0,   735,   566,     0,   735,   735,  1550,   735,  4013,
     735,     0,     0,     0,   735,  1550,     0,   735,   735,   735,
     735,     0,   735,   735,   763,     0,     0,     0,     0,     0,
     735,   735,     0,   735,   735,   735,   735,   735,     0,   735,
       0,   735,   735,   735,   735,   735,   735,   735,   735,   735,
     735,   735,     0,     0,   735,   735,     0,   735,     0,   735,
       0,     0,     0,   735,     0,   735,   735,     0,     0,     0,
       0,  1376,     0,     0,     0,     0,     0,   735,   735,     0,
       0,     0,     0,   735,     0,     0,   735,     0,     0,     0,
       0,     0,     0,   735,   735,   735,     0,   735,     0,     0,
       0,     0,     0,     0,   735,   735,   735,     0,   735,   735,
     735,   735,   735,     0,   735,   735,   735,   735,   735,   735,
     735,   735,     0,  1434,  1435,   735,   735,     0,     0,     0,
       0,     0,  1445,  1446,     0,     0,  1449,  1450,  1451,     0,
       0,     0,     0,  1456,     0,   764,  1458,  1459,     0,  1460,
       0,  1461,     0,     0,     0,     0,     0,     0,  1495,  1496,
    1497,  1498,     0,  1500,   765,     0,     0,     0,     0,     0,
     766,  1508,  1509,     0,  1512,  1513,     0,     0,   767,     0,
    1517,     0,  1518,  1519,  1520,     0,     0,  1523,  1524,  1525,
    1526,  1527,  1528,     0,     0,  1531,  1532,     0,  1535,     0,
    1536,   768,     0,     0,  1541,     0,  1545,  1546,     0,     0,
       0,     0,     0,     0,   769,   770,     0,     0,  1553,  1554,
       0,     0,     0,     0,  1097,     0,     0,  1560,     0,     0,
       0,   735,     0,     0,  1565,  1566,  1567,     0,     0,   735,
       0,     0,     1,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   771,     0,     3,     0,     0,
       0,     0,     0,     5,     0,     0,     0,  1603,     0,     0,
       0,     0,  1102,  1103,     0,     0,     0,     6,     7,     0,
       0,     0,     0,   772,     8,     0,     0,     0,     9,    10,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    11,     0,     0,     0,   773,     0,   774,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     817,   753,     0,     0,     0,     0,     0,    13,     0,     0,
       0,     0,     0,     0,     0,    14,    15,    16,   753,     0,
       0,     0,     0,     0,     0,     0,     0,    17,    18,     0,
    1465,  1466,  1467,  1468,  1469,     0,     0,     0,     0,     0,
       0,     0,  1683,     0,     0,     0,     0,     0,     0,     0,
    1698,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,   754,     0,     0,     0,
       0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
       0,    24,     0,   754,     0,     0,     0,     0,     0,     0,
     735,     0,     0,     0,   755,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,     0,    26,   756,     0,     0,
       0,   755,     0,     0,  1470,  1471,  1472,  1473,     0,     0,
       0,     0,    27,     0,   756,     0,     0,     0,     0,   757,
       0,   758,     0,     0,     0,     0,     0,     0,     0,    28,
       0,     0,   759,    29,     0,     0,   757,     0,   758,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,     0,   760,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   760,
       0,     0,     0,     0,     0,     0,   761,     0,     0,   735,
     735,   735,     0,   762,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   761,     0,   735,     0,     0,     0,     0,
     762,     0,  1474,     0,  1475,  1476,  1477,     0,     0,     0,
       0,     0,     0,  1478,     0,     0,     0,   735,     0,    30,
       0,  1945,   763,   735,     0,     0,   735,     0,   735,     0,
       0,     0,     0,     0,   735,     0,   735,   735,    31,   763,
       0,     0,     0,     0,     0,     0,     0,     0,    32,     0,
       0,  1104,     0,     0,  1105,     0,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    34,     0,
       0,    35,     0,    36,     0,     0,    37,  1479,     0,    38,
       0,    39,     0,     0,     0,     0,    40,   735,    41,     0,
       0,     0,     0,     0,     0,    42,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,    44,     0,
    2020,  2022,  2024,    45,     0,     0,     0,    46,     0,     0,
       0,     0,     0,     0,     0,  1480,  1481,     0,     0,     0,
       0,     0,     0,   764,     0,     0,     0,     0,     0,     0,
      47,     0,     0,     0,    48,     0,     0,     0,  2050,     0,
     764,     0,   765,     0,     0,     0,     0,  2055,   766,  2056,
       0,     0,     0,     0,     0,     0,   767,     0,     0,   765,
       0,     0,     0,     0,     0,   766,     0,     0,     0,     0,
       0,     0,     0,   767,     0,    49,     0,     0,     0,   768,
       0,     0,     0,     0,     0,     0,     0,    50,     0,     0,
       0,    51,   769,   770,    52,     0,   768,     0,     0,    53,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   769,
     770,     0,     0,     0,     0,     0,     0,     0,  2130,     0,
       0,     0,     0,     0,    54,     0,     0,     0,     0,     0,
       0,     0,     0,   771,     0,     0,     0,     0,    55,     0,
       0,     0,     0,  1482,     0,     0,     0,     0,     0,     0,
     771,     0,     0,  1106,  1483,  1484,     0,     0,     0,     0,
       0,   772,     0,     0,  2971,  2972,     0,     0,     0,     0,
    2973,     0,  2974,     0,  2975,  2976,     0,     0,   772,     0,
       0,     0,     0,   773,     0,   774,     0,     0,     0,     0,
    2977,     0,     0,     0,   735,     0,     0,     0,     0,     0,
     773,     0,   774,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2978,     0,     0,  2979,     0,     0,     0,     0,     0,
       0,     0,  2980,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,     0,     0,   735,  2981,
       0,     0,     0,   735,   735,     0,     0,     0,     0,     0,
       0,     0,   735,     0,     0,   735,  2982,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,   735,   735,     0,
     735,   735,   735,   735,   735,     0,     0,   735,  2983,     0,
    2984,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,  2985,  2986,   735,     0,   735,     0,   735,   735,
     735,   735,     0,     0,     0,   735,   735,   735,     0,     0,
       0,     0,   735,   735,   735,  2335,   735,     0,   735,     0,
     735,     0,   735,     0,   735,     0,     0,     0,     0,   735,
       0,     0,  2987,     0,     0,     0,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,   735,     0,     0,   735,
       0,     0,     0,     0,     0,   735,     0,     0,   735,     0,
    2988,     0,   735,     0,     0,     0,     0,     0,     0,  2989,
    2990,     0,  2991,     0,     0,  2408,     0,     0,     0,  2410,
       0,     0,     0,     0,  2412,  2413,     0,     0,     0,     0,
       0,     0,     0,  2428,     0,     0,     0,     0,     0,     0,
       0,  2992,  2993,  2994,     0,     0,  2435,     0,  2436,     0,
       0,  2438,  2439,  2440,  2441,  2442,     0,     0,     0,  2995,
    2996,  2997,     0,     0,     0,  2998,     0,  2446,  2999,     0,
       0,     0,     0,     0,     0,  2447,     0,  2448,     0,  2449,
    2450,  2451,     0,     0,  3000,  3001,  2454,  2455,  2456,     0,
       0,     0,     0,  2458,  2459,  2460,     0,  2461,     0,  2463,
       0,  2465,     0,  2467,     0,  2468,     0,     0,   837,     0,
    2469,     0,     0,     0,     0,     0,  3002,  3003,   799,   838,
    2477,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2487,     0,     0,  2490,
    3004,     0,   839,   840,     0,     0,     0,     0,     0,     0,
       0,     0,   841,     0,   842,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   843,
       0,   844,     0,   845,     0,     0,     0,     0,     0,     0,
       0,   846,     0,     0,     0,     0,     0,  3005,     0,     0,
       0,  3006,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1814,  1815,     0,     0,     0,     0, -1603,   847,     0,
       0,     0,   848,     0,     0,   849,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3008,     0,     0,  3009,  1817,     0,  3010,  3011,  3012,
    3013,   850,     0,   851,     0,     0,  1820,     0,   852,     0,
     853,     0,     0,     0,  1821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   854,   855,  1823,     0,     0,   856,     0,  3014,
    3015,     0,     0,     0,     0,     0,     0,     0,  1339,     0,
       0,  1824,     0,     0,     0,   857,     0,     0,     0,     0,
    3016,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   858,     0,     0,  1829,
       0,     0,     0,     0,   735,     0,     0,     0,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   859,     0,     0,     0,     0,     0,     0,
     735,   735,     0,     0,     0,     0,     0,  2702,     0,  1465,
    1466,  1467,  1468,  1469,  1812,     0,     0,     0,     0,     0,
     735,     0,     0,     0,     0,   860,  1814,  1815,     0,   735,
       0,   735,     0,   735,  1832,   861,     0,     0,     0,     0,
       0,     0,  1833,     0,     0,     0,     0,     0,   735,     0,
       0,     0,     0,   735,   862,     0,  1816,  1834,     0,     0,
    1817,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1820,     0,     0,     0,   735,     0,   863,     0,  1821,
       0,     0,     0,     0,     0,   735,  1822,     0,   864,   865,
       0,     0,   866,   867,     0,     0,     0,     0,     0,  1823,
       0,     0,     0,  1470,  1471,  1472,  1473,     0,     0,  1835,
       0,     0,     0,  1339,     0,  2769,  1824,     0,     0,  2771,
       0,     0,     0,  1825,  1814,  1815,  1836,     0,     0,     0,
    2703,     0,     0,   735,     0,     0,     0,   735,  1828,     0,
       0,  2790,  2791,     0,  1829,     0,     0,     0,     0,     0,
       0,   868,     0,     0,     0,     0,  -681,  -681,  1817,     0,
       0,  2811,     0,   869,     0,  -681,     0,     0,     0,  1820,
    2821,  1830,  2823,     0,  2825,     0,     0,  1821,  1840,     0,
     735,     0,     0,     0,     0,     0,  1842, -2094,     0,     0,
       0,   870,     0,     0,     0,     0,     0,  1823,     0,     0,
       0,  1474,     0,  1475,  1476,  1477,   735,     0,   871,  1832,
       0,  1339,  1478,     0,  1824,     0,  2849,  1833,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1834,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1829,     0,     0,     0,     0,     0,     0,  1848,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -2094,     0,     0,     0,     0,     0,
     872,     0,     0,     0,  2901,     0,     0,     0,  2905,     0,
       0,     0,     0,     0,  1835,     0,  1479,   735,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1836,  1849,     0,     0,  1837,     0,  1832,     0,     0,
       0,     0,     0,     0,     0,  1833,     0,  1850,     0,     0,
    1851,  2934,     0,     0,     0,     0,     0,     0,     0,     0,
    1834,     0,     0,     0,  1480,  1481,     0,     0,     0,   735,
       0,     0,     0,     0,  1852,     0,  1839,  2939,     0,     0,
       0,     0,     0,  1840,     0,  1853,     0,     0,     0,     0,
       0,  1842,     0,   735,   735,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
     735,     0,  1835,   735,     0,   735,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1836,
       0,     0,     0,  1845,   735,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,  1848,     0,     0,     0,  3027,  3028,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1840,     0,     0,     0,     0,     0,     0,     0,  1842,
       0,     0,  1482,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,  1483,  1484,     0,     0,  1849,     0,   735,
    3065,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1850,     0,     0,  1851,     0,   735,     0,     0,
       0,     0,     0,     0,  3082,  3083,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3090,     0,     0,  1852,
       0,  3092,  1848,     0,  3093,     0,  3094,  3095,     0,     0,
    1853,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3109,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1849,     0,  3109,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1850,     0,     0,  1851,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1852,     0,     0,
    3153,     0,     0,     0,     0,     0,     0,     0,  1853,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     735,   735,     0,     0,     0,     0,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3109,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,  3361,  3362,     0,     0,     0,     0,     0,     0,     0,
    2934,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3563,     0,     0,     0,     0,     0,     0,  3460,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3109,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   735,     0,  2934,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
    2901,     0,     0,     0,     0,     0,   735,     0,   735,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,     0,     0,     0,     0,  3563,  3563,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3622,     0,
       0,     0,     0,     0,     0,     0,     0,  3627,     0,  3629,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   735,     0,   735,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   735,     0,  3563,  3563,     0,     0,     0,
       0,     0,  3653,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3783,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   735,     0,  3563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2934,     0,     0,
       0,  3563,   735,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3563,     0,     0,     0,     0,
       0,     0,   735,     0,     0,     0,     0,     0,     0,     0,
       0,   735,  3739,     0,  3740,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3748,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   735,
    3563,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3563,  3563,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3563,     0,     0,  3838,     0,     0,     0,   735,
       0,     0,  3563,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3843,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   735,     0,     0,
       0,     0,     0,  3109,  3563,     0,  3563,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3563,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3563,
       0,  3563,     0,  3563,     0,     0,     0,     0,     0,     0,
    3563,     0,     0,     0,     0,     0,     0,     0,     0,  3563,
    3884,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3563,  3563,     0,     0,     0,     0,
     735,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3563,  3563,     0,     0,     0,  3563,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3928,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3950,     0,
       0,     0,     0,     0,     0,     0,     0,   138,     0,   612,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
    3966,     0,   613,     0,   146,   147,   148,   149,   150,   614,
     152,     0,   153,     0,     0,   615,   154,   616,   617,   618,
     155,   619,     0,   156,   157,   158,  1542,   159,     0,   160,
     161,     0,     0,   162,   620,   621,   163,     0,   164,   622,
     623,   166,     0,   167,   168,   169,   624,   171,     0,   625,
     173,  4014,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   626,   184,     0,   185,   627,   628,   186,
       0,     0,   187,   629,   630,     0,   631,   632,     0,   188,
     189,   190,   633,   634,   635,     0,     0,     0,     0,   636,
     193,   637,     0,     0,   638,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   639,     0,   217,   218,
     219,   640,   641,   220,   221,     0,   222,   223,   224,   642,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   643,   231,   644,   233,     0,   234,     0,   645,
       0,   235,   236,     0,   237,   646,     0,   238,   239,     0,
       0,     0,   647,   241,   242,   243,   648,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   649,   248,   249,
     650,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,  1543,
     258,     0,   651,   259,   260,     0,     0,     0,     0,     0,
     652,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   653,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   654,   282,   283,   284,   285,   655,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   656,   293,     0,
       0,   657,   295,   658,   296,     0,   297,   659,   660,   661,
     662,   663,   302,   303,   304,   305,     0,   664,   306,   307,
       0,     0,   308,   309,   310,   311,   665,   666,   667,   312,
     313,     0,   668,   669,     0,   314,   315,   670,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,   671,   324,   325,   326,
     327,   328,   672,   330,   331,   332,   673,   674,   335,   675,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   676,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   677,   678,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
     679,   367,   368,   369,   370,   371,   680,   373,   374,   375,
       0,   681,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,   682,   683,   399,   400,     0,
     401,   684,   403,   404,   405,   685,   686,   406,   407,   408,
     409,   687,   410,   411,     0,     0,   412,   413,   414,     0,
     688,   415,   416,     0,   689,   690,   691,   692,     0,     0,
       0,     0,  1544,   421,   422,     0,   693,   694,   695,   424,
     425,   426,   696,   427,   428,   697,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     698,   437,     0,     0,   699,   700,   701,   702,   438,     0,
       0,   439,   703,     0,   704,   440,   441,   442,   705,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,     0,
     706,     0,     0,     0,   707,   708,     0,     0,     0,     0,
     709,   710,     0,     0,   711,   712,     0,     0,   713,   714,
     138,     0,   612,   140,   141,   142,   143,  2897,     0,     0,
       0,     0,   144,     0,     0,   613,     0,   146,   147,   148,
     149,   150,   614,   152,     0,   153,     0,     0,  2898,   154,
     616,   617,   618,   155,   619,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   620,   621,   163,
       0,   164,   622,   623,   166,     0,   167,   168,   169,   624,
     171,     0,   625,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   626,   184,     0,   185,
     627,   628,   186,     0,     0,   187,   629,   630,     0,   631,
     632,     0,   188,   189,   190,   633,   634,   635,     0,     0,
       0,     0,   636,   193,   637,     0,     0,  2899,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   639,
       0,   217,   218,   219,   640,   641,   220,   221,     0,   222,
     223,   224,   642,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   643,   231,   644,   233,     0,
     234,     0,   645,     0,   235,   236,     0,   237,   646,     0,
     238,   239,     0,     0,     0,   647,   241,   242,   243,   648,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
     649,   248,   249,   650,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,   651,   259,   260,     0,     0,
       0,     0,     0,   652,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,   653,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,   654,   282,   283,   284,   285,
     655,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     656,   293,     0,     0,   657,   295,   658,   296,     0,   297,
     659,   660,   661,   662,   663,   302,   303,   304,   305,     0,
     664,   306,   307,     0,     0,   308,   309,   310,   311,   665,
     666,   667,   312,   313,     0,   668,   669,     0,   314,   315,
     670,  2900,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   671,
     324,   325,   326,   327,   328,   672,   330,   331,   332,   673,
     674,   335,   675,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   676,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,   677,   678,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,   679,   367,   368,   369,   370,   371,   680,
     373,   374,   375,     0,   681,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,   682,   683,
     399,   400,     0,   401,   684,   403,   404,   405,   685,   686,
     406,   407,   408,   409,   687,   410,   411,     0,     0,   412,
     413,   414,     0,   688,   415,   416,     0,   689,   690,   691,
     692,     0,     0,     0,     0,     0,   421,   422,     0,   693,
     694,   695,   424,   425,   426,   696,   427,   428,   697,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   698,   437,     0,     0,   699,   700,   701,
     702,   438,     0,     0,   439,   703,     0,   704,   440,   441,
     442,   705,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   706,     0,     0,     0,   707,   708,     0,
       0,     0,     0,   709,   710,     0,     0,   711,   712,     0,
       0,   713,   714,   138,     0,   612,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   613,     0,
     146,   147,   148,   149,   150,   614,   152,     0,   153,     0,
       0,   615,   154,   616,   617,   618,   155,   619,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     620,   621,   163,     0,   164,   622,   623,   166,     0,   167,
     168,   169,   624,   171,     0,   625,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   626,
     184,     0,   185,   627,   628,   186,     0,     0,   187,   629,
     630,     0,   631,   632,     0,   188,   189,   190,   633,   634,
     635,     0,     0,     0,     0,   636,   193,   637,     0,     0,
     638,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,   639,     0,   217,   218,   219,   640,   641,   220,
     221,     0,   222,   223,   224,   642,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   643,   231,
     644,   233,     0,   234,     0,   645,     0,   235,   236,     0,
     237,   646,     0,   238,   239,     0,     0,     0,   647,   241,
     242,   243,   648,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   649,   248,   249,   650,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   651,   259,
     260,     0,     0,     0,     0,     0,   652,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   653,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   654,   282,
     283,   284,   285,   655,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   656,   293,     0,     0,   657,   295,   658,
     296,     0,   297,   659,   660,   661,   662,   663,   302,   303,
     304,   305,     0,   664,   306,   307,     0,     0,   308,   309,
     310,   311,   665,   666,   667,   312,   313,     0,   668,   669,
       0,   314,   315,   670,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   671,   324,   325,   326,   327,   328,   672,   330,
     331,   332,   673,   674,   335,   675,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   676,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   677,   678,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,   679,   367,   368,   369,
     370,   371,   680,   373,   374,   375,     0,   681,   377,  1095,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,   682,   683,   399,   400,     0,   401,   684,   403,   404,
     405,   685,   686,   406,   407,   408,   409,   687,   410,   411,
       0,     0,   412,   413,   414,     0,   688,   415,   416,     0,
     689,   690,   691,   692,     0,     0,     0,     0,     0,   421,
     422,     0,   693,   694,   695,   424,   425,   426,   696,   427,
     428,   697,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   698,   437,     0,     0,
     699,   700,   701,   702,   438,     0,     0,   439,   703,     0,
     704,   440,   441,   442,   705,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,     0,   706,     0,     0,     0,
     707,   708,     0,     0,     0,     0,   709,  1096,     0,     0,
     711,   712,     0,     0,   713,   714,   138,     0,   612,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   613,     0,   146,   147,   148,   149,   150,   614,   152,
       0,   153,     0,     0,   615,   154,   616,   617,   618,   155,
     619,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   620,   621,   163,     0,   164,   622,   623,
     166,     0,   167,   168,   169,   624,   171,     0,   625,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   626,   184,     0,   185,   627,   628,   186,     0,
       0,   187,   629,   630,     0,   631,   632,     0,   188,   189,
     190,   633,   634,   635,     0,     0,     0,     0,   636,   193,
     637,     0,     0,   638,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   639,     0,   217,   218,   219,
     640,   641,   220,   221,     0,   222,   223,   224,   642,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   643,   231,   644,   233,     0,   234,     0,   645,     0,
     235,   236,     0,   237,   646,     0,   238,   239,     0,     0,
       0,   647,   241,   242,   243,   648,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   649,   248,   249,   650,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   651,   259,   260,     0,     0,     0,     0,     0,   652,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     653,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   654,   282,   283,   284,   285,   655,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   656,   293,     0,     0,
     657,   295,   658,   296,     0,   297,   659,   660,   661,   662,
     663,   302,   303,   304,   305,     0,   664,   306,   307,     0,
       0,   308,   309,   310,   311,   665,   666,   667,   312,   313,
       0,   668,   669,     0,   314,   315,   670,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   671,   324,   325,   326,   327,
     328,   672,   330,   331,   332,   673,   674,   335,   675,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   676,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,   677,   678,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,   679,
     367,   368,   369,   370,   371,   680,   373,   374,   375,     0,
     681,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,   682,   683,   399,   400,     0,   401,
     684,   403,   404,   405,   685,   686,   406,   407,   408,   409,
     687,   410,   411,     0,     0,   412,   413,   414,     0,   688,
     415,   416,     0,   689,   690,   691,   692,     0,     0,     0,
       0,     0,   421,   422,     0,   693,   694,   695,   424,   425,
     426,   696,   427,   428,   697,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   698,
     437,     0,     0,   699,   700,   701,   702,   438,     0,     0,
     439,   703,     0,   704,   440,   441,   442,   705,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   706,
       0,     0,     0,   707,   708,     0,     0,     0,     0,   709,
     710,  1455,     0,   711,   712,     0,     0,   713,   714,   138,
       0,   612,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   613,     0,   146,   147,   148,   149,
     150,   614,   152,     0,   153,     0,     0,   615,   154,   616,
     617,   618,   155,   619,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   620,   621,   163,     0,
     164,   622,   623,   166,     0,   167,   168,   169,   624,   171,
       0,   625,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   626,   184,     0,   185,   627,
     628,   186,     0,     0,   187,   629,   630,     0,   631,   632,
       0,   188,   189,   190,   633,   634,   635,     0,     0,     0,
       0,   636,   193,   637,     0,     0,   638,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,   639,     0,
     217,   218,   219,   640,   641,   220,   221,     0,   222,   223,
     224,   642,     0,   225,     0,     0,     0,   226,   227,  2019,
     228,     0,   229,     0,   643,   231,   644,   233,     0,   234,
       0,   645,     0,   235,   236,     0,   237,   646,     0,   238,
     239,     0,     0,     0,   647,   241,   242,   243,   648,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,   649,
     248,   249,   650,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,   651,   259,   260,     0,     0,     0,
       0,     0,   652,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,   653,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,   654,   282,   283,   284,   285,   655,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   656,
     293,     0,     0,   657,   295,   658,   296,     0,   297,   659,
     660,   661,   662,   663,   302,   303,   304,   305,     0,   664,
     306,   307,     0,     0,   308,   309,   310,   311,   665,   666,
     667,   312,   313,     0,   668,   669,     0,   314,   315,   670,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   671,   324,
     325,   326,   327,   328,   672,   330,   331,   332,   673,   674,
     335,   675,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   676,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     677,   678,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,   679,   367,   368,   369,   370,   371,   680,   373,
     374,   375,     0,   681,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,   682,   683,   399,
     400,     0,   401,   684,   403,   404,   405,   685,   686,   406,
     407,   408,   409,   687,   410,   411,     0,     0,   412,   413,
     414,     0,   688,   415,   416,     0,   689,   690,   691,   692,
       0,     0,     0,     0,     0,   421,   422,     0,   693,   694,
     695,   424,   425,   426,   696,   427,   428,   697,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   698,   437,     0,     0,   699,   700,   701,   702,
     438,     0,     0,   439,   703,     0,   704,   440,   441,   442,
     705,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,     0,   706,     0,     0,     0,   707,   708,     0,     0,
       0,     0,   709,   710,     0,     0,   711,   712,     0,     0,
     713,   714,   138,     0,   612,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   613,     0,   146,
     147,   148,   149,   150,   614,   152,     0,   153,     0,     0,
     615,   154,   616,   617,   618,   155,   619,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   620,
     621,   163,     0,   164,   622,   623,   166,     0,   167,   168,
     169,   624,   171,     0,   625,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   626,   184,
       0,   185,   627,   628,   186,     0,     0,   187,   629,   630,
       0,   631,   632,     0,   188,   189,   190,   633,   634,   635,
       0,     0,     0,     0,   636,   193,   637,     0,     0,   638,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   639,     0,   217,   218,   219,   640,   641,   220,   221,
       0,   222,   223,   224,   642,     0,   225,     0,     0,     0,
     226,   227,  2021,   228,     0,   229,     0,   643,   231,   644,
     233,     0,   234,     0,   645,     0,   235,   236,     0,   237,
     646,     0,   238,   239,     0,     0,     0,   647,   241,   242,
     243,   648,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   649,   248,   249,   650,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   651,   259,   260,
       0,     0,     0,     0,     0,   652,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   653,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   654,   282,   283,
     284,   285,   655,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   656,   293,     0,     0,   657,   295,   658,   296,
       0,   297,   659,   660,   661,   662,   663,   302,   303,   304,
     305,     0,   664,   306,   307,     0,     0,   308,   309,   310,
     311,   665,   666,   667,   312,   313,     0,   668,   669,     0,
     314,   315,   670,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   671,   324,   325,   326,   327,   328,   672,   330,   331,
     332,   673,   674,   335,   675,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   676,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   677,   678,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,   679,   367,   368,   369,   370,
     371,   680,   373,   374,   375,     0,   681,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
     682,   683,   399,   400,     0,   401,   684,   403,   404,   405,
     685,   686,   406,   407,   408,   409,   687,   410,   411,     0,
       0,   412,   413,   414,     0,   688,   415,   416,     0,   689,
     690,   691,   692,     0,     0,     0,     0,     0,   421,   422,
       0,   693,   694,   695,   424,   425,   426,   696,   427,   428,
     697,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   698,   437,     0,     0,   699,
     700,   701,   702,   438,     0,     0,   439,   703,     0,   704,
     440,   441,   442,   705,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   706,     0,     0,     0,   707,
     708,     0,     0,     0,     0,   709,   710,     0,     0,   711,
     712,     0,     0,   713,   714,   138,     0,   612,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     613,     0,   146,   147,   148,   149,   150,   614,   152,     0,
     153,     0,     0,   615,   154,   616,   617,   618,   155,   619,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   620,   621,   163,     0,   164,   622,   623,   166,
       0,   167,   168,   169,   624,   171,     0,   625,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   626,   184,     0,   185,   627,   628,   186,     0,     0,
     187,   629,   630,     0,   631,   632,     0,   188,   189,   190,
     633,   634,   635,     0,     0,     0,     0,   636,   193,   637,
       0,     0,   638,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   639,     0,   217,   218,   219,   640,
     641,   220,   221,     0,   222,   223,   224,   642,     0,   225,
       0,     0,     0,   226,   227,  2023,   228,     0,   229,     0,
     643,   231,   644,   233,     0,   234,     0,   645,     0,   235,
     236,     0,   237,   646,     0,   238,   239,     0,     0,     0,
     647,   241,   242,   243,   648,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,   649,   248,   249,   650,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
     651,   259,   260,     0,     0,     0,     0,     0,   652,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,   653,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
     654,   282,   283,   284,   285,   655,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   656,   293,     0,     0,   657,
     295,   658,   296,     0,   297,   659,   660,   661,   662,   663,
     302,   303,   304,   305,     0,   664,   306,   307,     0,     0,
     308,   309,   310,   311,   665,   666,   667,   312,   313,     0,
     668,   669,     0,   314,   315,   670,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   671,   324,   325,   326,   327,   328,
     672,   330,   331,   332,   673,   674,   335,   675,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     676,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,   677,   678,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,   679,   367,
     368,   369,   370,   371,   680,   373,   374,   375,     0,   681,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,   682,   683,   399,   400,     0,   401,   684,
     403,   404,   405,   685,   686,   406,   407,   408,   409,   687,
     410,   411,     0,     0,   412,   413,   414,     0,   688,   415,
     416,     0,   689,   690,   691,   692,     0,     0,     0,     0,
       0,   421,   422,     0,   693,   694,   695,   424,   425,   426,
     696,   427,   428,   697,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   698,   437,
       0,     0,   699,   700,   701,   702,   438,     0,     0,   439,
     703,     0,   704,   440,   441,   442,   705,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,     0,   706,     0,
       0,     0,   707,   708,     0,     0,     0,     0,   709,   710,
       0,     0,   711,   712,     0,     0,   713,   714,   138,     0,
     612,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   613,     0,   146,   147,   148,   149,   150,
     614,   152,     0,   153,     0,     0,   615,   154,   616,   617,
     618,   155,   619,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,   620,   621,   163,     0,   164,
     622,   623,   166,     0,   167,   168,   169,   624,   171,     0,
     625,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   626,   184,     0,   185,   627,   628,
     186,     0,     0,   187,   629,   630,     0,   631,   632,     0,
     188,   189,   190,   633,   634,   635,     0,     0,     0,     0,
     636,   193,   637,     0,     0,   638,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,   639,     0,   217,
     218,   219,   640,   641,   220,   221,     0,   222,   223,   224,
     642,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   643,   231,   644,   233,     0,   234,     0,
     645,     0,   235,   236,     0,   237,   646,     0,   238,   239,
       0,     0,     0,   647,   241,   242,   243,   648,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,   649,   248,
     249,   650,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,   651,   259,   260,     0,     0,     0,     0,
       0,   652,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,   653,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,   654,   282,   283,   284,   285,   655,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   656,   293,
       0,     0,   657,   295,   658,   296,     0,   297,   659,   660,
     661,   662,   663,   302,   303,   304,   305,     0,   664,   306,
     307,     0,     0,   308,   309,   310,   311,   665,   666,   667,
     312,   313,     0,   668,   669,     0,   314,   315,   670,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,   671,   324,   325,
     326,   327,   328,   672,   330,   331,   332,   673,   674,   335,
     675,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   676,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,   677,
     678,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,   679,   367,   368,   369,   370,   371,   680,   373,   374,
     375,     0,   681,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,   682,   683,   399,   400,
       0,   401,   684,   403,   404,   405,   685,   686,   406,   407,
     408,   409,   687,   410,   411,     0,     0,   412,   413,   414,
       0,   688,   415,   416,     0,   689,   690,   691,   692,     0,
       0,     0,     0,     0,   421,   422,     0,   693,   694,   695,
     424,   425,   426,   696,   427,   428,   697,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   698,   437,     0,     0,   699,   700,   701,   702,   438,
       0,     0,   439,   703,     0,   704,   440,   441,   442,   705,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   706,     0,     0,     0,   707,   708,     0,     0,     0,
       0,   709,   710,     0,     0,   711,   712,     0,     0,   713,
     714,   138,     0,   612,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   613,     0,   146,   147,
     148,   149,   150,   614,   152,     0,   153,     0,     0,   615,
     154,   616,   617,   618,   155,   619,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,   620,   621,
     163,     0,   164,   622,   623,   166,     0,   167,   168,   169,
     624,   171,     0,   625,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   626,   184,     0,
     185,   627,   628,   186,     0,     0,   187,   629,   630,     0,
     631,   632,     0,   188,   189,   190,   633,   634,   635,     0,
       0,     0,     0,   636,   193,   637,     0,     0,   638,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
     639,     0,   217,   218,   219,   640,   641,   220,   221,     0,
     222,   223,   224,   642,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   643,   231,   644,   233,
       0,   234,     0,   645,     0,   235,   236,     0,   237,   646,
       0,   238,   239,     0,     0,     0,   647,   241,   242,   243,
     648,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,   649,   248,   249,   650,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,   651,   259,   260,     0,
       0,     0,     0,     0,   652,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,   653,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,   654,   282,   283,   284,
     285,   655,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   656,   293,     0,     0,   657,   295,   658,   296,     0,
     297,   659,   660,   661,   662,   663,   302,   303,   304,   305,
       0,   664,   306,   307,     0,     0,   308,   309,   310,   311,
     665,   666,   667,   312,   313,     0,   668,   669,     0,   314,
     315,   670,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
     671,   324,   325,   326,   327,   328,   672,   330,   331,   332,
     673,   674,   335,   675,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   676,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,   677,   678,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,   679,   367,   368,   369,   370,   371,
     680,   373,   374,   375,     0,   681,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,   682,
     683,   399,   400,     0,   401,   684,   403,   404,   405,   685,
     686,   406,   407,   408,   409,   687,   410,   411,     0,     0,
     412,   413,   414,     0,   688,   415,   416,     0,   689,   690,
     691,   692,     0,     0,     0,     0,     0,   421,   422,     0,
     693,   694,   695,   424,   425,   426,   696,   427,   428,   697,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   698,   437,     0,     0,   699,   700,
     701,   702,   438,     0,     0,   439,   703,     0,   704,   440,
     441,   442,   705,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,     0,   706,     0,     0,     0,   707,   708,
       0,     0,     0,     0,   709,  1033,     0,     0,   711,   712,
       0,     0,   713,   714,   138,     0,   612,   140,   141,   142,
     143,  1574,     0,     0,     0,     0,  1575,     0,     0,   613,
       0,   146,   147,   148,   149,   150,   614,   152,     0,   153,
       0,     0,   615,   154,   616,   617,   618,   155,   619,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,   620,   621,   163,     0,   164,   622,   623,   166,     0,
     167,   168,   169,   624,   171,     0,   625,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     626,   184,     0,   185,   627,   628,   186,     0,     0,   187,
     629,   630,     0,   631,   632,     0,   188,   189,   190,   633,
     634,   635,     0,     0,     0,     0,   636,   193,   637,     0,
       0,   638,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,   639,     0,   217,   218,   219,   640,   641,
     220,   221,     0,   222,   223,   224,   642,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   643,
     231,   644,   233,     0,   234,     0,   645,     0,   235,   236,
       0,   237,   646,     0,   238,   239,     0,     0,     0,   647,
     241,   242,   243,   648,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,   649,   248,   249,   650,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,   651,
     259,   260,     0,     0,     0,     0,     0,   652,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,   653,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,   654,
     282,   283,   284,   285,   655,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   656,   293,     0,     0,   657,   295,
     658,   296,     0,   297,   659,   660,   661,   662,   663,   302,
     303,   304,   305,     0,   664,   306,   307,     0,     0,   308,
     309,   310,   311,   665,     0,   667,   312,   313,     0,   668,
     669,     0,   314,   315,   670,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,   671,   324,   325,   326,   327,   328,   672,
     330,   331,   332,   673,   674,   335,   675,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   676,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,   677,   678,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,   679,   367,   368,
     369,   370,   371,   680,   373,   374,   375,     0,   681,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,   682,   683,   399,   400,     0,   401,   684,   403,
     404,   405,   685,   686,   406,   407,   408,   409,   687,   410,
     411,     0,     0,   412,   413,   414,     0,   688,   415,   416,
       0,   689,   690,   691,   692,     0,     0,     0,     0,     0,
     421,   422,     0,   693,   694,   695,   424,   425,   426,   696,
     427,   428,   697,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   698,   437,     0,
       0,   699,   700,   701,   702,   438,     0,     0,   439,   703,
       0,   704,   440,   441,   442,   705,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   706,     0,     0,
       0,   707,   708,     0,     0,     0,     0,   709,   710,     0,
       0,   711,   712,     0,     0,   713,   714,   138,     0,   612,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   613,     0,   146,   147,   148,   149,   150,   614,
     152,     0,   153,     0,     0,   615,   154,   616,   617,   618,
     155,   619,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,   620,   621,   163,     0,   164,   622,
     623,   166,     0,   167,   168,   169,   624,   171,     0,   625,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   626,   184,     0,   185,   627,   628,   186,
       0,     0,   187,   629,   630,     0,   631,   632,     0,   188,
     189,   190,   633,   634,   635,     0,     0,     0,     0,   636,
     193,   637,     0,     0,   638,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,   639,     0,   217,   218,
     219,   640,   641,   220,   221,     0,   222,   223,   224,   642,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   643,   231,   644,   233,     0,   234,     0,   645,
       0,   235,   236,     0,   237,   646,     0,   238,   239,     0,
       0,     0,   647,   241,   242,   243,   648,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,   649,   248,   249,
    2407,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,   651,   259,   260,     0,     0,     0,     0,     0,
     652,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,   653,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,   654,   282,   283,   284,   285,   655,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   656,   293,     0,
       0,   657,   295,   658,   296,     0,   297,   659,   660,   661,
     662,   663,   302,   303,   304,   305,     0,   664,   306,   307,
       0,     0,   308,   309,   310,   311,   665,   666,   667,   312,
     313,     0,   668,   669,     0,   314,   315,   670,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,   671,   324,   325,   326,
     327,   328,   672,   330,   331,   332,   673,   674,   335,   675,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   676,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,   677,   678,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
     679,   367,   368,   369,   370,   371,   680,   373,   374,   375,
       0,   681,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,   682,   683,   399,   400,     0,
     401,   684,   403,   404,   405,   685,   686,   406,   407,   408,
     409,   687,   410,   411,     0,     0,   412,   413,   414,     0,
     688,   415,   416,     0,   689,   690,   691,   692,     0,     0,
       0,     0,     0,   421,   422,     0,   693,   694,   695,   424,
     425,   426,   696,   427,   428,   697,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     698,   437,     0,     0,   699,   700,   701,   702,   438,     0,
       0,   439,   703,     0,   704,   440,   441,   442,   705,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,     0,
     706,     0,     0,     0,   707,   708,     0,     0,     0,     0,
     709,   710,     0,     0,   711,   712,     0,     0,   713,   714,
     138,     0,   612,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   613,     0,   146,   147,   148,
     149,   150,   614,   152,     0,   153,     0,     0,   615,   154,
     616,   617,   618,   155,   619,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,   620,   621,   163,
       0,   164,   622,   623,   166,     0,   167,   168,   169,   624,
     171,     0,   625,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   626,   184,     0,   185,
     627,   628,   186,     0,     0,   187,   629,   630,     0,   631,
     632,     0,   188,   189,   190,   633,   634,   635,     0,     0,
       0,     0,   636,   193,   637,     0,     0,   638,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,   639,
       0,   217,   218,   219,   640,   641,   220,   221,     0,   222,
     223,   224,   642,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   643,   231,   644,   233,     0,
     234,     0,   645,     0,   235,   236,     0,   237,   646,     0,
     238,   239,     0,     0,     0,   647,   241,   242,   243,   648,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
     649,   248,   249,  2453,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,   651,   259,   260,     0,     0,
       0,     0,     0,   652,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,   653,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,   654,   282,   283,   284,   285,
     655,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     656,   293,     0,     0,   657,   295,   658,   296,     0,   297,
     659,   660,   661,   662,   663,   302,   303,   304,   305,     0,
     664,   306,   307,     0,     0,   308,   309,   310,   311,   665,
     666,   667,   312,   313,     0,   668,   669,     0,   314,   315,
     670,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,   671,
     324,   325,   326,   327,   328,   672,   330,   331,   332,   673,
     674,   335,   675,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   676,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,   677,   678,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,   679,   367,   368,   369,   370,   371,   680,
     373,   374,   375,     0,   681,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,   682,   683,
     399,   400,     0,   401,   684,   403,   404,   405,   685,   686,
     406,   407,   408,   409,   687,   410,   411,     0,     0,   412,
     413,   414,     0,   688,   415,   416,     0,   689,   690,   691,
     692,     0,     0,     0,     0,     0,   421,   422,     0,   693,
     694,   695,   424,   425,   426,   696,   427,   428,   697,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   698,   437,     0,     0,   699,   700,   701,
     702,   438,     0,     0,   439,   703,     0,   704,   440,   441,
     442,   705,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   706,     0,     0,     0,   707,   708,     0,
       0,     0,     0,   709,   710,     0,     0,   711,   712,     0,
       0,   713,   714,   138,     0,   612,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   613,     0,
     146,   147,   148,   149,   150,   614,   152,     0,   153,     0,
       0,   615,   154,   616,   617,   618,   155,   619,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
     620,   621,   163,     0,   164,   622,   623,   166,     0,   167,
     168,   169,   624,   171,     0,   625,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   626,
     184,     0,   185,   627,   628,   186,     0,     0,   187,   629,
     630,     0,   631,   632,     0,   188,   189,   190,   633,   634,
     635,     0,     0,     0,     0,   636,   193,   637,     0,     0,
    3108,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,   639,     0,   217,   218,   219,   640,   641,   220,
     221,     0,   222,   223,   224,   642,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   643,   231,
     644,   233,     0,   234,     0,   645,     0,   235,   236,     0,
     237,   646,     0,   238,   239,     0,     0,     0,   647,   241,
     242,   243,   648,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,   649,   248,   249,   650,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,   651,   259,
     260,     0,     0,     0,     0,     0,   652,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,   653,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,   654,   282,
     283,   284,   285,   655,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   656,   293,     0,     0,   657,   295,   658,
     296,     0,   297,   659,   660,   661,   662,   663,   302,   303,
     304,   305,     0,   664,   306,   307,     0,     0,   308,   309,
     310,   311,   665,   666,   667,   312,   313,     0,   668,   669,
       0,   314,   315,   670,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,   671,   324,   325,   326,   327,   328,   672,   330,
     331,   332,   673,   674,   335,   675,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   676,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,   677,   678,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,   679,   367,   368,   369,
     370,   371,   680,   373,   374,   375,     0,   681,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,   682,   683,   399,   400,     0,   401,   684,   403,   404,
     405,   685,   686,   406,   407,   408,   409,   687,   410,   411,
       0,     0,   412,   413,   414,     0,   688,   415,   416,     0,
     689,   690,   691,   692,     0,     0,     0,     0,     0,   421,
     422,     0,   693,   694,   695,   424,   425,   426,   696,   427,
     428,   697,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   698,   437,     0,     0,
     699,   700,   701,   702,   438,     0,     0,   439,   703,     0,
     704,   440,   441,   442,   705,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,     0,   706,     0,     0,     0,
     707,   708,     0,     0,     0,     0,   709,   710,     0,     0,
     711,   712,     0,     0,   713,   714,   138,     0,   612,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   613,     0,   146,   147,   148,   149,   150,   614,   152,
       0,   153,     0,     0,   615,   154,   616,   617,   618,   155,
     619,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,   620,   621,   163,     0,   164,   622,   623,
     166,     0,   167,   168,   169,   624,   171,     0,   625,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   626,   184,     0,   185,   627,   628,   186,     0,
       0,   187,   629,   630,     0,   631,   632,     0,   188,   189,
     190,   633,   634,   635,     0,     0,     0,     0,   636,   193,
     637,     0,     0,   638,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,   639,     0,   217,   218,   219,
     640,   641,   220,   221,     0,   222,   223,   224,   642,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   643,   231,   644,   233,     0,   234,     0,   645,     0,
     235,   236,     0,   237,   646,     0,   238,   239,     0,     0,
       0,   647,   241,   242,   243,   648,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,   649,   248,   249,   650,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,   651,   259,   260,     0,     0,     0,     0,     0,   652,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
     653,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,   654,   282,   283,   284,   285,   655,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   656,   293,     0,     0,
     657,   295,   658,   296,     0,   297,   659,   660,   661,   662,
     663,   302,   303,   304,   305,     0,   664,   306,   307,     0,
       0,   308,   309,   310,   311,   665,     0,   667,   312,   313,
       0,   668,   669,     0,   314,   315,   670,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,   671,   324,   325,   326,   327,
     328,   672,   330,   331,   332,   673,   674,   335,   675,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   676,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,   677,   678,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,   679,
     367,   368,   369,   370,   371,   680,   373,   374,   375,     0,
     681,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,   682,   683,   399,   400,     0,   401,
     684,   403,   404,   405,   685,   686,   406,   407,   408,   409,
     687,   410,   411,     0,     0,   412,   413,   414,     0,   688,
     415,   416,     0,   689,   690,   691,   692,     0,     0,     0,
       0,     0,   421,   422,     0,   693,   694,   695,   424,   425,
     426,   696,   427,   428,   697,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   698,
     437,     0,     0,   699,   700,   701,   702,   438,     0,     0,
     439,   703,     0,   704,   440,   441,   442,   705,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   706,
       0,     0,     0,   707,   708,     0,     0,     0,     0,   709,
     710,     0,     0,   711,   712,     0,     0,   713,   714,   138,
       0,   612,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   613,     0,   146,   147,   148,   149,
     150,   614,   152,     0,   153,     0,     0,   615,   154,   616,
     617,   618,   155,   619,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,   620,   621,   163,     0,
     164,   622,   623,   166,     0,   167,   168,   169,   624,   171,
       0,   625,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   626,   184,     0,   185,   627,
     628,   186,     0,     0,   187,   629,   630,     0,   631,   632,
       0,   188,   189,   190,   633,   634,   635,     0,     0,     0,
       0,   636,   193,   637,     0,     0,   638,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,   639,     0,
     217,   218,   219,   640,   641,   220,   221,     0,   222,   223,
     224,   642,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   643,   231,   644,   233,     0,   234,
       0,   645,     0,   235,   236,     0,   237,   646,     0,   238,
     239,     0,     0,     0,   647,   241,   242,   243,   648,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,   649,
     248,   249,  1589,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,   651,   259,   260,     0,     0,     0,
       0,     0,   652,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,   653,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,   654,   282,   283,   284,   285,   655,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   656,
     293,     0,     0,   657,   295,   658,   296,     0,   297,   659,
     660,   661,   662,   663,   302,   303,   304,   305,     0,   664,
     306,   307,     0,     0,   308,   309,   310,   311,   665,     0,
     667,   312,   313,     0,   668,   669,     0,   314,   315,   670,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,   671,   324,
     325,   326,   327,   328,   672,   330,   331,   332,   673,   674,
     335,   675,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   676,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
     677,   678,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,   679,   367,   368,   369,   370,   371,   680,   373,
     374,   375,     0,   681,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,   682,   683,   399,
     400,     0,   401,   684,   403,   404,   405,   685,   686,   406,
     407,   408,   409,   687,   410,   411,     0,     0,   412,   413,
     414,     0,   688,   415,   416,     0,   689,   690,   691,   692,
       0,     0,     0,     0,     0,   421,   422,     0,   693,   694,
     695,   424,   425,   426,   696,   427,   428,   697,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   698,   437,     0,     0,   699,   700,   701,   702,
     438,     0,     0,   439,   703,     0,   704,   440,   441,   442,
     705,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,     0,   706,     0,     0,     0,   707,   708,     0,     0,
       0,     0,   709,   710,     0,     0,   711,   712,     0,     0,
     713,   714,   138,     0,   612,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   613,     0,   146,
     147,   148,   149,   150,   614,   152,     0,   153,     0,     0,
     615,   154,   616,   617,   618,   155,   619,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,   620,
     621,   163,     0,   164,   622,   623,   166,     0,   167,   168,
     169,   624,   171,     0,   625,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   626,   184,
       0,   185,   627,   628,   186,     0,     0,   187,   629,   630,
       0,   631,   632,     0,   188,   189,   190,   633,   634,   635,
       0,     0,     0,     0,   636,   193,   637,     0,     0,   638,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,   639,     0,   217,   218,   219,   640,   641,   220,   221,
       0,   222,   223,   224,   642,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   643,   231,   644,
     233,     0,   234,     0,   645,     0,   235,   236,     0,   237,
     646,     0,   238,   239,     0,     0,     0,   647,   241,   242,
     243,   648,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,   649,   248,   249,  1591,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,   651,   259,   260,
       0,     0,     0,     0,     0,   652,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,   653,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,   654,   282,   283,
     284,   285,   655,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   656,   293,     0,     0,   657,   295,   658,   296,
       0,   297,   659,   660,   661,   662,   663,   302,   303,   304,
     305,     0,   664,   306,   307,     0,     0,   308,   309,   310,
     311,   665,     0,   667,   312,   313,     0,   668,   669,     0,
     314,   315,   670,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,   671,   324,   325,   326,   327,   328,   672,   330,   331,
     332,   673,   674,   335,   675,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   676,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,   677,   678,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,   679,   367,   368,   369,   370,
     371,   680,   373,   374,   375,     0,   681,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
     682,   683,   399,   400,     0,   401,   684,   403,   404,   405,
     685,   686,   406,   407,   408,   409,   687,   410,   411,     0,
       0,   412,   413,   414,     0,   688,   415,   416,     0,   689,
     690,   691,   692,     0,     0,     0,     0,     0,   421,   422,
       0,   693,   694,   695,   424,   425,   426,   696,   427,   428,
     697,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   698,   437,     0,     0,   699,
     700,   701,   702,   438,     0,     0,   439,   703,     0,   704,
     440,   441,   442,   705,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   706,     0,     0,     0,   707,
     708,     0,     0,     0,     0,   709,   710,     0,     0,   711,
     712,     0,     0,   713,   714,   138,     0,   612,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     613,     0,   146,   147,   148,   149,   150,   614,   152,     0,
     153,     0,     0,   615,   154,   616,   617,   618,   155,   619,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,   620,   621,   163,     0,   164,   622,   623,   166,
       0,   167,   168,   169,   624,   171,     0,   625,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   626,   184,     0,   185,   627,   628,   186,     0,     0,
     187,   629,   630,     0,   631,   632,     0,   188,   189,   190,
     633,   634,   635,     0,     0,     0,     0,   636,   193,   637,
       0,     0,   638,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,   639,     0,   217,   218,   219,   640,
     641,   220,   221,     0,   222,   223,   224,   642,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     643,   231,   644,   233,     0,   234,     0,   645,     0,   235,
     236,     0,   237,   646,     0,   238,   239,     0,     0,     0,
     647,   241,   242,   243,   648,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,   649,   248,   249,   650,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
     651,   259,   260,     0,     0,     0,     0,     0,   652,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,   653,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
     654,   282,   283,   284,   285,   655,   286,   287,  3860,     0,
       0,     0,   289,   290,   291,   656,   293,     0,     0,   657,
     295,   658,   296,     0,   297,   659,   660,   661,   662,   663,
     302,   303,   304,   305,     0,   664,   306,   307,     0,     0,
     308,   309,   310,   311,   665,     0,   667,   312,   313,     0,
     668,   669,     0,   314,   315,   670,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,   671,   324,   325,   326,   327,   328,
     672,   330,   331,   332,   673,   674,   335,   675,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     676,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,   677,   678,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,   679,   367,
     368,   369,   370,   371,   680,   373,   374,   375,     0,   681,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,   682,   683,   399,   400,     0,   401,   684,
     403,   404,   405,   685,   686,   406,   407,   408,   409,   687,
     410,   411,     0,     0,   412,   413,   414,     0,   688,   415,
     416,     0,   689,   690,   691,   692,     0,     0,     0,     0,
       0,   421,   422,     0,   693,   694,   695,   424,   425,   426,
     696,   427,   428,   697,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   698,   437,
       0,     0,   699,   700,   701,   702,   438,     0,     0,   439,
     703,     0,   704,   440,   441,   442,   705,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,     0,   706,     0,
       0,     0,   707,   708,     0,     0,     0,     0,   709,   710,
       0,     0,   711,   712,     0,     0,   713,   714,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,     0,     0,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,  2255,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
    2256,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,  1370,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,  1371,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,  2756,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,  2757,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,  -399,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,  2258,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,     0,     0,   399,   400,
       0,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,     0,   410,   411,     0,     0,   412,   413,   414,
       0,     0,   415,   416,     0,   417,   418,   419,   420,     0,
       0,     0,     0,     0,   421,   422,     0,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   436,   437,     0,     0,     0,     0,     0,     0,   438,
       0,     0,   439,     0,     0,     0,   440,   441,   442,   443,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
    2320,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,  2255,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,  2256,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,  1370,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,  1371,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,  2258,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,  2320,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,  2142,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,  2535,     0,     0,   144,     0,
       0,   145,   714,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,     0,     0,   138,     0,   139,   140,   141,   142,
     143,  4019,     0,     0,     0,     0,   144,  4020,   714,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,  1037,     0,
       0,     0,   144,     0,     0,   145,   714,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,  1226,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,   492,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,     0,     0,   138,  2085,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,   492,   145,
       0,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   218,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,  2319,     0,
       0,     0,   144,     0,     0,   145,  2320,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,     0,     0,   138,     0,
     139,   140,   141,   142,   143,     0,     0,     0,     0,     0,
     144,  4020,   714,   145,     0,   146,   147,   148,   149,   150,
     151,   152,     0,   153,     0,     0,     0,   154,     0,     0,
       0,   155,     0,     0,   156,   157,   158,     0,   159,     0,
     160,   161,     0,     0,   162,     0,     0,   163,     0,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,     0,
     172,   173,     0,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,     0,   185,     0,     0,
     186,     0,     0,   187,     0,     0,     0,     0,     0,     0,
     188,   189,   190,     0,     0,   191,     0,     0,     0,     0,
     192,   193,     0,     0,     0,     0,   194,     0,   195,     0,
       0,     0,   196,     0,   197,   198,   199,   200,     0,     0,
       0,   201,     0,     0,   202,   203,   204,     0,     0,     0,
     205,     0,   206,   207,     0,   208,   209,   210,     0,     0,
     211,     0,   212,   213,   214,   215,   216,     0,     0,   217,
     218,   219,     0,     0,   220,   221,     0,   222,   223,   224,
       0,     0,   225,     0,     0,     0,   226,   227,     0,   228,
       0,   229,     0,   230,   231,   232,   233,     0,   234,     0,
       0,     0,   235,   236,     0,   237,     0,     0,   238,   239,
       0,     0,     0,   240,   241,   242,   243,     0,     0,   244,
     245,     0,     0,   246,     0,   247,     0,     0,     0,   248,
     249,     0,     0,     0,   250,     0,   251,   252,     0,   253,
     254,     0,     0,     0,   255,     0,     0,   256,   257,     0,
       0,   258,     0,     0,   259,   260,     0,     0,     0,     0,
       0,   261,   262,     0,   263,     0,   264,     0,   265,   266,
       0,     0,     0,     0,     0,     0,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,   280,   281,     0,   282,   283,   284,   285,     0,   286,
     287,   288,     0,     0,     0,   289,   290,   291,   292,   293,
       0,     0,   294,   295,     0,   296,     0,   297,     0,   298,
     299,   300,   301,   302,   303,   304,   305,     0,     0,   306,
     307,     0,     0,   308,   309,   310,   311,     0,     0,     0,
     312,   313,     0,     0,     0,     0,   314,   315,   316,     0,
     317,   318,   319,     0,   320,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,     0,   336,   337,   338,     0,   339,     0,   340,   341,
     342,   343,     0,   344,   345,   346,     0,     0,   347,     0,
       0,     0,   348,   349,   350,   351,   352,     0,     0,   353,
     354,   355,     0,   356,   357,     0,   358,   359,   360,     0,
       0,   361,     0,   362,   363,   364,     0,   365,   366,     0,
       0,     0,   367,   368,   369,   370,   371,   372,   373,   374,
     375,     0,   376,   377,     0,     0,     0,   378,   379,   380,
     381,     0,     0,     0,   382,     0,     0,     0,   383,   384,
     385,   386,     0,   387,   388,   389,   390,   391,     0,     0,
       0,     0,     0,     0,   392,   393,     0,   394,     0,     0,
     395,     0,     0,   396,   397,   398,     0,     0,   399,   400,
       0,   401,   402,   403,   404,   405,     0,     0,   406,   407,
     408,   409,     0,   410,   411,     0,     0,   412,   413,   414,
       0,     0,   415,   416,     0,   417,   418,   419,   420,     0,
       0,     0,     0,     0,   421,   422,     0,     0,     0,   423,
     424,   425,   426,     0,   427,   428,     0,   429,   430,     0,
     431,   432,     0,     0,   433,     0,     0,   434,     0,   435,
       0,   436,   437,     0,     0,     0,     0,     0,     0,   438,
       0,     0,   439,     0,     0,     0,   440,   441,   442,   443,
       0,     0,     0,     0,   444,   445,     0,   446,   447,     0,
       0,   448,     0,     0,   138,     0,   139,   140,   141,   142,
     143,     0,     0,     0,     0,     0,   144,     0,     0,   145,
     492,   146,   147,   148,   149,   150,   151,   152,     0,   153,
       0,     0,     0,   154,     0,     0,     0,   155,     0,     0,
     156,   157,   158,     0,   159,     0,   160,   161,     0,     0,
     162,     0,     0,   163,     0,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,     0,   172,   173,     0,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,     0,   185,     0,     0,   186,     0,     0,   187,
       0,     0,     0,     0,     0,     0,   188,   189,   190,     0,
       0,   191,     0,     0,     0,     0,   192,   193,     0,     0,
       0,     0,   194,     0,   195,     0,     0,     0,   196,     0,
     197,   198,   199,   200,     0,     0,     0,   201,     0,     0,
     202,   203,   204,     0,     0,     0,   205,     0,   206,   207,
       0,   208,   209,   210,     0,     0,   211,     0,   212,   213,
     214,   215,   216,     0,     0,   217,   552,   219,     0,     0,
     220,   221,     0,   222,   223,   224,     0,     0,   225,     0,
       0,     0,   226,   227,     0,   228,     0,   229,     0,   230,
     231,   232,   233,     0,   234,     0,     0,     0,   235,   236,
       0,   237,     0,     0,   238,   239,     0,     0,     0,   240,
     241,   242,   243,     0,     0,   244,   245,     0,     0,   246,
       0,   247,     0,     0,     0,   248,   249,     0,     0,     0,
     250,     0,   251,   252,     0,   253,   254,     0,     0,     0,
     255,     0,     0,   256,   257,     0,     0,   258,     0,     0,
     259,   260,     0,     0,     0,     0,     0,   261,   262,     0,
     263,     0,   264,     0,   265,   266,     0,     0,     0,     0,
       0,     0,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,   280,   281,     0,
     282,   283,   284,   285,     0,   286,   287,   288,     0,     0,
       0,   289,   290,   291,   292,   293,     0,     0,   294,   295,
       0,   296,     0,   297,     0,   298,   299,   300,   301,   302,
     303,   304,   305,     0,     0,   306,   307,     0,     0,   308,
     309,   310,   311,     0,     0,     0,   312,   313,     0,     0,
       0,     0,   314,   315,   316,     0,   317,   318,   319,     0,
     320,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,   553,   328,   329,
     330,   331,   332,   333,   334,   335,     0,     0,   336,   337,
     338,     0,   339,     0,   340,   341,   342,   343,     0,   344,
     345,   346,     0,     0,   347,     0,     0,     0,   348,   349,
     350,   351,   352,     0,     0,   353,   354,   355,     0,   356,
     357,     0,   358,   359,   360,     0,     0,   361,     0,   362,
     363,   364,     0,   365,   366,     0,     0,     0,   367,   368,
     369,   370,   371,   372,   373,   374,   375,     0,   376,   377,
       0,     0,     0,   378,   379,   380,   381,     0,     0,     0,
     382,     0,     0,     0,   383,   384,   385,   386,     0,   387,
     388,   389,   390,   391,     0,     0,     0,     0,     0,     0,
     392,   393,     0,   394,     0,     0,   395,     0,     0,   396,
     397,   398,     0,     0,   399,   400,     0,   401,   402,   403,
     404,   405,     0,     0,   406,   407,   408,   409,     0,   410,
     411,     0,     0,   412,   413,   414,     0,     0,   415,   416,
       0,   417,   418,   419,   420,     0,     0,     0,     0,     0,
     421,   422,     0,     0,     0,   423,   424,   425,   426,     0,
     427,   428,     0,   429,   430,     0,   431,   432,     0,     0,
     433,     0,     0,   434,     0,   435,     0,   436,   437,     0,
       0,     0,     0,     0,     0,   438,     0,     0,   439,     0,
       0,     0,   440,   441,   442,   443,     0,     0,     0,     0,
     444,   445,     0,   446,   447,     0,     0,   448,     0,     0,
     138,     0,   139,   140,   141,   142,   143,     0,     0,     0,
       0,     0,   144,     0,     0,   145,   492,   146,   147,   148,
     149,   150,   151,   152,     0,   153,     0,     0,     0,   154,
       0,     0,     0,   155,     0,     0,   156,   157,   158,     0,
     159,     0,   160,   161,     0,     0,   162,     0,     0,   163,
       0,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,     0,   172,   173,     0,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,     0,   185,
       0,     0,   186,     0,     0,   187,     0,     0,     0,     0,
       0,     0,   188,   189,   190,     0,     0,   191,     0,     0,
       0,     0,   192,   193,     0,     0,     0,     0,   194,     0,
     195,     0,     0,     0,   196,     0,   197,   198,   199,   200,
       0,     0,     0,   201,     0,     0,   202,   203,   204,     0,
       0,     0,   205,     0,   206,   207,     0,   208,   209,   210,
       0,     0,   211,     0,   212,   213,   214,   215,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   222,
     223,   224,     0,     0,   225,     0,     0,     0,   226,   227,
       0,   228,     0,   229,     0,   230,   231,   232,   233,     0,
     234,     0,     0,     0,   235,   236,     0,   237,     0,     0,
     238,   239,     0,     0,     0,   240,   241,   242,   243,     0,
       0,   244,   245,     0,     0,   246,     0,   247,     0,     0,
       0,   248,   249,     0,     0,     0,   250,     0,   251,   252,
       0,   253,   254,     0,     0,     0,   255,     0,     0,   256,
     257,     0,     0,   258,     0,     0,   259,   260,     0,     0,
       0,     0,     0,   261,   262,     0,   263,     0,   264,     0,
     265,   266,     0,     0,     0,     0,     0,     0,     0,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,   280,   281,     0,   282,   283,   284,   285,
       0,   286,   287,   288,     0,     0,     0,   289,   290,   291,
     292,   293,     0,     0,   294,   295,     0,   296,     0,   297,
       0,   298,   299,   300,   301,   302,   303,   304,   305,     0,
       0,   306,   307,     0,     0,   308,   309,   310,   311,     0,
       0,     0,   312,   313,     0,     0,     0,     0,   314,   315,
     316,     0,   317,   318,   319,     0,   320,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,     0,   336,   337,   338,     0,   339,     0,
     340,   341,   342,   343,     0,   344,   345,   346,     0,     0,
     347,     0,     0,     0,   348,   349,   350,   351,   352,     0,
       0,   353,   354,   355,     0,   356,   357,     0,   358,   359,
     360,     0,     0,   361,     0,   362,   363,   364,     0,   365,
     366,     0,     0,     0,   367,   368,   369,   370,   371,   372,
     373,   374,   375,     0,   376,   377,     0,     0,     0,   378,
     379,   380,   381,     0,     0,     0,   382,     0,     0,     0,
     383,   384,   385,   386,     0,   387,   388,   389,   390,   391,
       0,     0,     0,     0,     0,     0,   392,   393,     0,   394,
       0,     0,   395,     0,     0,   396,   397,   398,     0,     0,
     399,   400,     0,   401,   402,   403,   404,   405,     0,     0,
     406,   407,   408,   409,     0,   410,   411,     0,     0,   412,
     413,   414,     0,     0,   415,   416,     0,   417,   418,   419,
     420,     0,     0,     0,     0,     0,   421,   422,     0,     0,
       0,   423,   424,   425,   426,     0,   427,   428,     0,   429,
     430,     0,   431,   432,     0,     0,   433,     0,     0,   434,
       0,   435,     0,   436,   437,     0,     0,     0,     0,     0,
       0,   438,     0,     0,   439,     0,     0,     0,   440,   441,
     442,   443,     0,     0,     0,     0,   444,   445,     0,   446,
     447,     0,     0,   448,     0,     0,   138,     0,   139,   140,
     141,   142,   143,     0,     0,     0,     0,     0,   144,     0,
       0,   145,   714,   146,   147,   148,   149,   150,   151,   152,
       0,   153,     0,     0,     0,   154,     0,     0,     0,   155,
       0,     0,   156,   157,   158,     0,   159,     0,   160,   161,
       0,     0,   162,     0,     0,   163,     0,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,     0,   172,   173,
       0,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,     0,   185,     0,     0,   186,     0,
       0,   187,     0,     0,     0,     0,     0,     0,   188,   189,
     190,     0,     0,   191,     0,     0,     0,     0,   192,   193,
       0,     0,     0,     0,   194,     0,   195,     0,     0,     0,
     196,     0,   197,   198,   199,   200,     0,     0,     0,   201,
       0,     0,   202,   203,   204,     0,     0,     0,   205,     0,
     206,   207,     0,   208,   209,   210,     0,     0,   211,     0,
     212,   213,   214,   215,   216,     0,     0,   217,   218,   219,
       0,     0,   220,   221,     0,   222,   223,   224,     0,     0,
     225,     0,     0,     0,   226,   227,     0,   228,     0,   229,
       0,   230,   231,   232,   233,     0,   234,     0,     0,     0,
     235,   236,     0,   237,     0,     0,   238,   239,     0,     0,
       0,   240,   241,   242,   243,     0,     0,   244,   245,     0,
       0,   246,     0,   247,     0,     0,     0,   248,   249,     0,
       0,     0,   250,     0,   251,   252,     0,   253,   254,     0,
       0,     0,   255,     0,     0,   256,   257,     0,     0,   258,
       0,     0,   259,   260,     0,     0,     0,     0,     0,   261,
     262,     0,   263,     0,   264,     0,   265,   266,     0,     0,
       0,     0,     0,     0,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,   280,
     281,     0,   282,   283,   284,   285,     0,   286,   287,   288,
       0,     0,     0,   289,   290,   291,   292,   293,     0,     0,
     294,   295,     0,   296,     0,   297,     0,   298,   299,   300,
     301,   302,   303,   304,   305,     0,     0,   306,   307,     0,
       0,   308,   309,   310,   311,     0,     0,     0,   312,   313,
       0,     0,     0,     0,   314,   315,   316,     0,   317,   318,
     319,     0,   320,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   321,   322,   323,     0,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,     0,
     336,   337,   338,     0,   339,     0,   340,   341,   342,   343,
       0,   344,   345,   346,     0,     0,   347,     0,     0,     0,
     348,   349,   350,   351,   352,     0,     0,   353,   354,   355,
       0,   356,   357,     0,   358,   359,   360,     0,     0,   361,
       0,   362,   363,   364,     0,   365,   366,     0,     0,     0,
     367,   368,   369,   370,   371,   372,   373,   374,   375,     0,
     376,   377,     0,     0,     0,   378,   379,   380,   381,     0,
       0,     0,   382,     0,     0,     0,   383,   384,   385,   386,
       0,   387,   388,   389,   390,   391,     0,     0,     0,     0,
       0,     0,   392,   393,     0,   394,     0,     0,   395,     0,
       0,   396,   397,   398,     0,     0,   399,   400,     0,   401,
     402,   403,   404,   405,     0,     0,   406,   407,   408,   409,
       0,   410,   411,     0,     0,   412,   413,   414,     0,     0,
     415,   416,     0,   417,   418,   419,   420,     0,     0,     0,
       0,     0,   421,   422,     0,     0,     0,   423,   424,   425,
     426,     0,   427,   428,     0,   429,   430,     0,   431,   432,
       0,     0,   433,     0,     0,   434,     0,   435,     0,   436,
     437,     0,     0,     0,     0,     0,     0,   438,     0,     0,
     439,     0,     0,     0,   440,   441,   442,   443,     0,     0,
       0,     0,   444,   445,     0,   446,   447,     0,     0,   448,
       0,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,  2320,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     564,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
       0,     0,   399,   400,     0,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,     0,   410,   411,     0,
       0,   412,   413,   414,     0,   135,   415,   416,     0,   417,
     418,   419,   420,     0,     0,     0,     0,     0,   421,   422,
       0,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   436,   437,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   439,     0,     0,     0,
     440,   441,   442,   443,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,  1561,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   564,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,     0,
     448,     0,   138,     0,   139,   140,   141,   142,   143,     0,
       0,     0,     0,     0,   144,     0,     0,   145,  2573,   146,
     147,   148,   149,   150,   151,   152,     0,   153,     0,     0,
       0,   154,     0,     0,     0,   155,     0,     0,   156,   157,
     158,     0,   159,     0,   160,   161,     0,     0,   162,     0,
       0,   163,     0,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,     0,   172,   173,     0,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
       0,   185,     0,     0,   186,     0,     0,   187,     0,     0,
       0,     0,     0,     0,   188,   189,   190,     0,     0,   191,
       0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     194,     0,   195,     0,     0,     0,   196,     0,   197,   198,
     199,   200,     0,     0,     0,   201,     0,     0,   202,   203,
     204,     0,     0,     0,   205,     0,   206,   207,     0,   208,
     209,   210,     0,     0,   211,     0,   212,   213,   214,   215,
     216,     0,     0,   217,   218,   219,     0,     0,   220,   221,
       0,   222,   223,   224,     0,     0,   225,     0,     0,     0,
     226,   227,     0,   228,     0,   229,     0,   230,   231,   232,
     233,     0,   234,     0,     0,     0,   235,   236,     0,   237,
       0,     0,   238,   239,     0,     0,     0,   240,   241,   242,
     243,     0,     0,   244,   245,     0,     0,   246,     0,   247,
       0,     0,     0,   248,   249,     0,     0,     0,   250,     0,
     251,   252,     0,   253,   254,     0,     0,     0,   255,     0,
       0,   256,   257,     0,     0,   258,     0,     0,   259,   260,
     564,     0,     0,     0,     0,   261,   262,     0,   263,     0,
     264,     0,   265,   266,     0,     0,     0,     0,     0,     0,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,   280,   281,     0,   282,   283,
     284,   285,     0,   286,   287,   288,     0,     0,     0,   289,
     290,   291,   292,   293,     0,     0,   294,   295,     0,   296,
       0,   297,     0,   298,   299,   300,   301,   302,   303,   304,
     305,     0,     0,   306,   307,     0,     0,   308,   309,   310,
     311,     0,     0,     0,   312,   313,     0,     0,     0,     0,
     314,   315,   316,     0,   317,   318,   319,     0,   320,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,     0,   336,   337,   338,     0,
     339,     0,   340,   341,   342,   343,     0,   344,   345,   346,
       0,     0,   347,     0,     0,     0,   348,   349,   350,   351,
     352,     0,     0,   353,   354,   355,     0,   356,   357,     0,
     358,   359,   360,     0,     0,   361,     0,   362,   363,   364,
       0,   365,   366,     0,     0,     0,   367,   368,   369,   370,
     371,   372,   373,   374,   375,     0,   376,   377,     0,     0,
       0,   378,   379,   380,   381,     0,     0,     0,   382,     0,
       0,     0,   383,   384,   385,   386,     0,   387,   388,   389,
     390,   391,     0,     0,     0,     0,     0,     0,   392,   393,
       0,   394,     0,     0,   395,     0,     0,   396,   397,   398,
       0,     0,   399,   400,     0,   401,   402,   403,   404,   405,
       0,     0,   406,   407,   408,   409,     0,   410,   411,     0,
       0,   412,   413,   414,     0,   135,   415,   416,     0,   417,
     418,   419,   420,     0,     0,     0,     0,     0,   421,   422,
       0,     0,     0,   423,   424,   425,   426,     0,   427,   428,
       0,   429,   430,     0,   431,   432,     0,     0,   433,     0,
       0,   434,     0,   435,     0,   436,   437,     0,     0,     0,
       0,     0,     0,   438,     0,     0,   439,     0,     0,     0,
     440,   441,   442,   443,     0,     0,     0,     0,   444,   445,
       0,   446,   447,     0,     0,   448,     0,   138,     0,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,  3138,   146,   147,   148,   149,   150,   151,
       0,     0,  -291,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3536,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3537,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3538,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3539,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3540,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3541,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -246,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3542,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -246,     0,
     361,     0,     0,   363,     0,     0,   365,   366,  3543,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,     0,   398,     0,     0,     0,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,     0,
       0,     0,     0,   433,     0,     0,   434,     0,     0,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,  -246,     0,   444,     0,     0,   446,     0,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,  4026,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,  1934,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
    2561,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,  2844,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,  3143,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,  2234,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,  2235,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,  2236,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,  2237,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,   954,   955,     0,   312,
     313,     0,     0,  2238,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,  4006,
    3995,  4007,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,  2239,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,  2425,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,  2567,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,  2070,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,   564,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,  2071,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,   135,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,  2575,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,  2576,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   564,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,   135,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,  2425,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2567,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,   564,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,   135,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,   914,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   564,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,   135,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,  1264,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,   564,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,   892,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,   893,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,   894,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,  2425,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,   564,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,   135,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2614,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,   564,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,   135,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,   564,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,   135,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
    2557,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
     135,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,  3930,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,  3931,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,   989,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    1366,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,  2167,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,  2168,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,   223,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,  2330,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,  2654,     0,     0,     0,
       0,   144,     0,     0,   145,     0,   146,   147,   148,   149,
     150,   151,   152,     0,   153,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,   160,   161,     0,     0,   162,     0,     0,   163,     0,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
       0,   172,   173,     0,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,   193,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,   201,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,   206,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,   216,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,   225,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,   235,   236,     0,   237,     0,     0,   238,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,   249,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,   256,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,   312,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,   319,     0,   320,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,     0,   336,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,   357,     0,   358,   359,   360,
       0,     0,   361,     0,   362,   363,   364,     0,   365,   366,
       0,     0,     0,   367,   368,   369,   370,   371,   372,   373,
     374,   375,     0,   376,   377,     0,     0,     0,   378,   379,
     380,   381,     0,     0,     0,   382,     0,     0,     0,   383,
     384,   385,   386,     0,   387,   388,   389,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,   397,   398,     0,     0,   399,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
     423,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,   431,   432,     0,     0,   433,     0,     0,   434,     0,
     435,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,   445,     0,   446,   447,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,   145,     0,   146,   147,
     148,   149,   150,   151,   152,     0,   153,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,   160,   161,     0,     0,   162,     0,     0,
     163,     0,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,     0,   172,   173,     0,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,   193,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,   201,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,   206,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,   216,
       0,     0,   217,   218,   219,     0,     0,   220,   221,     0,
     222,   223,   224,     0,     0,   225,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,   235,   236,     0,   237,     0,
       0,   238,   239,     0,     0,     0,   240,   241,   242,   243,
       0,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,   249,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,     0,     0,     0,   255,     0,     0,
     256,   257,     0,     0,   258,     0,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,     0,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,   312,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,   319,     0,   320,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,     0,   336,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,   357,     0,   358,
     359,   360,     0,     0,   361,     0,   362,   363,   364,     0,
     365,   366,     0,     0,     0,   367,   368,   369,   370,   371,
     372,   373,   374,   375,     0,   376,   377,     0,     0,     0,
     378,   379,   380,   381,     0,     0,     0,   382,     0,     0,
       0,   383,   384,   385,   386,     0,   387,   388,   389,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,   397,   398,     0,
       0,   399,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,   135,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,   423,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,   431,   432,     0,     0,   433,     0,     0,
     434,     0,   435,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,     0,     0,   444,   445,     0,
     446,   447,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,   145,     0,
     146,   147,   148,   149,   150,   151,   152,     0,   153,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,   160,   161,     0,     0,   162,
       0,     0,   163,     0,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,     0,   172,   173,     0,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,   193,     0,     0,     0,
    2167,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,   201,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,   206,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,   216,     0,     0,   217,   218,   219,     0,     0,   220,
     221,     0,   222,   223,   224,     0,     0,   225,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,   235,   236,     0,
     237,     0,     0,   238,   239,     0,     0,     0,   240,   241,
     242,   243,     0,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,   249,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,     0,     0,     0,   255,
       0,     0,   256,   257,     0,     0,   258,     0,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,     0,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,   312,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,   319,     0,   320,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,     0,   336,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,   357,
       0,   358,   359,   360,     0,     0,   361,     0,   362,   363,
     364,     0,   365,   366,     0,     0,     0,   367,   368,   369,
     370,   371,   372,   373,   374,   375,     0,   376,   377,     0,
       0,     0,   378,   379,   380,   381,     0,     0,     0,   382,
       0,     0,     0,   383,   384,   385,   386,     0,   387,   388,
     389,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,   397,
     398,     0,     0,   399,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,   423,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,   431,   432,     0,     0,   433,
       0,     0,   434,     0,   435,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,     0,     0,   444,
     445,     0,   446,   447,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
     145,     0,   146,   147,   148,   149,   150,   151,   152,     0,
     153,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,   160,   161,     0,
       0,   162,     0,     0,   163,     0,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,     0,   172,   173,     0,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,   193,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,   201,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,   206,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,   216,     0,     0,   217,   218,   219,     0,
       0,   220,   221,     0,   222,   223,   224,     0,     0,   225,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,   235,
     236,     0,   237,     0,     0,   238,   239,     0,     0,     0,
     240,   241,   242,   243,     0,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,   249,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,     0,     0,
       0,   255,     0,     0,   256,   257,     0,     0,   258,     0,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,     0,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,   312,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,   319,
       0,   320,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,     0,   336,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,   357,     0,   358,   359,   360,     0,     0,   361,     0,
     362,   363,   364,     0,   365,   366,     0,     0,     0,   367,
     368,   369,   370,   371,   372,   373,   374,   375,     0,   376,
     377,     0,     0,     0,   378,   379,   380,   381,     0,     0,
       0,   382,     0,     0,     0,   383,   384,   385,   386,     0,
     387,   388,   389,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,   397,   398,     0,     0,   399,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,   423,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,   431,   432,     0,
       0,   433,     0,     0,   434,     0,   435,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,     0,
       0,   444,   445,     0,   446,   447,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,   145,     0,   146,   147,   148,   149,   150,   151,
     152,     0,   153,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,   160,
     161,     0,     0,   162,     0,     0,   163,     0,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,     0,   172,
     173,     0,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
     193,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
     201,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,   206,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,   216,     0,     0,   217,   218,
     219,     0,     0,   220,   221,     0,   222,  1638,   224,     0,
       0,   225,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,   235,   236,     0,   237,     0,     0,   238,   239,     0,
       0,     0,   240,   241,   242,   243,     0,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,   249,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
       0,     0,     0,   255,     0,     0,   256,   257,     0,     0,
     258,     0,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,     0,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,  1639,   310,   311,     0,     0,     0,   312,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,   319,     0,   320,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
       0,   336,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,   357,     0,   358,   359,   360,     0,     0,
     361,     0,   362,   363,   364,     0,   365,   366,     0,     0,
       0,   367,   368,   369,   370,   371,   372,   373,   374,   375,
       0,   376,   377,     0,     0,     0,   378,   379,   380,   381,
       0,     0,     0,   382,     0,     0,     0,   383,   384,   385,
     386,     0,   387,   388,   389,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,   397,   398,     0,     0,   399,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,   423,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,   431,
     432,     0,     0,   433,     0,     0,   434,     0,   435,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,     0,     0,   444,   445,     0,   446,   447,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -291,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3536,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3537,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,  -261,
    -261,   205,     0,  -261,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3538,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3539,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3540,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3541,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -246,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3542,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -246,     0,   361,     0,     0,   363,     0,     0,   365,   366,
    3543,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,     0,   398,     0,     0,     0,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,     0,     0,     0,     0,   433,     0,     0,   434,     0,
       0,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,  -246,     0,   444,     0,     0,   446,     0,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -291,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3536,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3537,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,  -282,     0,   205,     0,  -282,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3538,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3539,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3540,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3541,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -246,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3542,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -246,     0,   361,     0,     0,   363,     0,     0,
     365,   366,  3543,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,     0,   398,     0,
       0,     0,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,     0,     0,     0,     0,   433,     0,     0,
     434,     0,     0,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,  -282,     0,  -246,     0,   444,     0,     0,
     446,     0,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -291,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3536,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3537,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,  -279,     0,   205,     0,  -279,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3538,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3539,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3540,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3541,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -246,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3542,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -246,     0,   361,     0,     0,   363,
       0,     0,   365,   366,  3543,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,     0,
     398,     0,     0,     0,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,     0,     0,     0,     0,   433,
       0,     0,   434,     0,     0,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,  -279,     0,  -246,     0,   444,
       0,     0,   446,     0,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -291,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3536,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3537,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,  3839,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3538,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3539,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3540,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3541,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -246,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3542,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -246,     0,   361,     0,
       0,   363,     0,     0,   365,   366,  3543,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,     0,   398,     0,     0,     0,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,     0,     0,     0,
       0,   433,     0,     0,   434,     0,     0,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,  -246,
       0,   444,     0,     0,   446,     0,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -291,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3536,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3537,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,  -284,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3538,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3539,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3540,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3541,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -246,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3542,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -246,     0,
     361,     0,     0,   363,     0,     0,   365,   366,  3543,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,     0,   398,     0,     0,     0,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,     0,
       0,     0,     0,   433,     0,     0,   434,     0,     0,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,  -246,     0,   444,     0,     0,   446,     0,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,  -291,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,  3536,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,  3537,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,  3935,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,  3538,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,  3539,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,  3540,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,  3541,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,  -246,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,  3542,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
    -246,     0,   361,     0,     0,   363,     0,     0,   365,   366,
    3543,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,     0,   398,     0,     0,     0,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,     0,     0,     0,     0,   433,     0,     0,   434,     0,
       0,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,  -246,     0,   444,     0,     0,   446,     0,
       0,   138,   448,   139,   140,   141,   142,   143,     0,     0,
       0,     0,     0,   144,     0,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,     0,  -291,     0,     0,     0,
     154,     0,     0,     0,   155,     0,     0,   156,   157,   158,
       0,   159,     0,     0,     0,     0,     0,   162,  3536,     0,
     163,     0,   164,     0,     0,     0,     0,   167,   168,  3537,
     170,   171,     0,   172,   173,     0,     0,   175,     0,   177,
     178,   179,   180,     0,   181,   182,     0,     0,   184,     0,
     185,     0,     0,   186,     0,     0,   187,     0,     0,     0,
       0,     0,     0,   188,   189,   190,     0,     0,   191,     0,
       0,     0,     0,   192,     0,     0,     0,     0,     0,   194,
       0,   195,     0,     0,     0,   196,     0,   197,   198,   199,
     200,     0,     0,     0,     0,     0,     0,   202,   203,   204,
       0,     0,     0,   205,     0,  3976,   207,     0,   208,   209,
     210,     0,     0,   211,     0,   212,   213,   214,   215,     0,
       0,     0,   217,   218,   219,     0,     0,   220,   221,  3538,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,     0,   228,     0,   229,     0,   230,   231,   232,   233,
       0,   234,     0,     0,     0,     0,   236,     0,     0,     0,
       0,     0,   239,     0,     0,     0,   240,   241,   242,   243,
    3539,     0,   244,   245,     0,     0,   246,     0,   247,     0,
       0,     0,   248,     0,     0,     0,     0,   250,     0,   251,
     252,     0,   253,   254,  3540,     0,     0,   255,     0,     0,
       0,   257,     0,     0,   258,  3541,     0,   259,   260,     0,
       0,     0,     0,     0,   261,   262,     0,   263,     0,   264,
       0,   265,   266,     0,     0,     0,     0,  -246,     0,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,   280,   281,     0,   282,   283,   284,
     285,     0,   286,   287,   288,     0,     0,     0,   289,   290,
     291,   292,   293,     0,     0,   294,   295,     0,   296,     0,
     297,     0,   298,   299,   300,   301,   302,   303,   304,   305,
       0,     0,   306,   307,     0,     0,   308,   309,   310,   311,
       0,     0,     0,     0,   313,     0,     0,     0,     0,   314,
     315,   316,     0,   317,   318,  3542,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   322,   323,
       0,     0,   325,   326,   327,     0,   329,   330,   331,   332,
     333,   334,     0,     0,     0,     0,   337,   338,     0,   339,
       0,   340,   341,   342,   343,     0,   344,   345,   346,     0,
       0,   347,     0,     0,     0,   348,   349,   350,   351,   352,
       0,     0,   353,   354,   355,     0,   356,     0,     0,   358,
       0,   360,  -246,     0,   361,     0,     0,   363,     0,     0,
     365,   366,  3543,     0,     0,     0,   368,   369,   370,   371,
     372,   373,     0,   375,     0,   376,     0,     0,     0,     0,
     378,   379,   380,     0,     0,     0,     0,   382,     0,     0,
       0,   383,     0,   385,     0,     0,   387,     0,     0,   390,
     391,     0,     0,     0,     0,     0,     0,   392,   393,     0,
     394,     0,     0,   395,     0,     0,   396,     0,   398,     0,
       0,     0,   400,     0,   401,   402,   403,   404,   405,     0,
       0,   406,   407,   408,   409,     0,   410,   411,     0,     0,
     412,   413,   414,     0,     0,   415,   416,     0,   417,   418,
     419,   420,     0,     0,     0,     0,     0,   421,   422,     0,
       0,     0,     0,   424,   425,   426,     0,   427,   428,     0,
     429,   430,     0,     0,     0,     0,     0,   433,     0,     0,
     434,     0,     0,     0,   436,   437,     0,     0,     0,     0,
       0,     0,   438,     0,     0,   439,     0,     0,     0,   440,
     441,   442,   443,     0,     0,  -246,     0,   444,     0,     0,
     446,     0,     0,   138,   448,   139,   140,   141,   142,   143,
       0,     0,     0,     0,     0,   144,     0,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,     0,  -291,     0,
       0,     0,   154,     0,     0,     0,   155,     0,     0,   156,
     157,   158,     0,   159,     0,     0,     0,     0,     0,   162,
    3536,     0,   163,     0,   164,     0,     0,     0,     0,   167,
     168,  3537,   170,   171,     0,   172,   173,     0,     0,   175,
       0,   177,   178,   179,   180,     0,   181,   182,     0,     0,
     184,     0,   185,     0,     0,   186,     0,     0,   187,     0,
       0,     0,     0,     0,     0,   188,   189,   190,     0,     0,
     191,     0,     0,     0,     0,   192,     0,     0,     0,     0,
       0,   194,     0,   195,     0,     0,     0,   196,     0,   197,
     198,   199,   200,     0,     0,     0,     0,     0,     0,   202,
     203,   204,     0,     0,     0,   205,     0,  -265,   207,     0,
     208,   209,   210,     0,     0,   211,     0,   212,   213,   214,
     215,     0,     0,     0,   217,   218,   219,     0,     0,   220,
     221,  3538,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,     0,   228,     0,   229,     0,   230,   231,
     232,   233,     0,   234,     0,     0,     0,     0,   236,     0,
       0,     0,     0,     0,   239,     0,     0,     0,   240,   241,
     242,   243,  3539,     0,   244,   245,     0,     0,   246,     0,
     247,     0,     0,     0,   248,     0,     0,     0,     0,   250,
       0,   251,   252,     0,   253,   254,  3540,     0,     0,   255,
       0,     0,     0,   257,     0,     0,   258,  3541,     0,   259,
     260,     0,     0,     0,     0,     0,   261,   262,     0,   263,
       0,   264,     0,   265,   266,     0,     0,     0,     0,  -246,
       0,     0,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,   280,   281,     0,   282,
     283,   284,   285,     0,   286,   287,   288,     0,     0,     0,
     289,   290,   291,   292,   293,     0,     0,   294,   295,     0,
     296,     0,   297,     0,   298,   299,   300,   301,   302,   303,
     304,   305,     0,     0,   306,   307,     0,     0,   308,   309,
     310,   311,     0,     0,     0,     0,   313,     0,     0,     0,
       0,   314,   315,   316,     0,   317,   318,  3542,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     322,   323,     0,     0,   325,   326,   327,     0,   329,   330,
     331,   332,   333,   334,     0,     0,     0,     0,   337,   338,
       0,   339,     0,   340,   341,   342,   343,     0,   344,   345,
     346,     0,     0,   347,     0,     0,     0,   348,   349,   350,
     351,   352,     0,     0,   353,   354,   355,     0,   356,     0,
       0,   358,     0,   360,  -246,     0,   361,     0,     0,   363,
       0,     0,   365,   366,  3543,     0,     0,     0,   368,   369,
     370,   371,   372,   373,     0,   375,     0,   376,     0,     0,
       0,     0,   378,   379,   380,     0,     0,     0,     0,   382,
       0,     0,     0,   383,     0,   385,     0,     0,   387,     0,
       0,   390,   391,     0,     0,     0,     0,     0,     0,   392,
     393,     0,   394,     0,     0,   395,     0,     0,   396,     0,
     398,     0,     0,     0,   400,     0,   401,   402,   403,   404,
     405,     0,     0,   406,   407,   408,   409,     0,   410,   411,
       0,     0,   412,   413,   414,     0,     0,   415,   416,     0,
     417,   418,   419,   420,     0,     0,     0,     0,     0,   421,
     422,     0,     0,     0,     0,   424,   425,   426,     0,   427,
     428,     0,   429,   430,     0,     0,     0,     0,     0,   433,
       0,     0,   434,     0,     0,     0,   436,   437,     0,     0,
       0,     0,     0,     0,   438,     0,     0,   439,     0,     0,
       0,   440,   441,   442,   443,     0,     0,  -246,     0,   444,
       0,     0,   446,     0,     0,   138,   448,   139,   140,   141,
     142,   143,     0,     0,     0,     0,     0,   144,     0,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
    -291,     0,     0,     0,   154,     0,     0,     0,   155,     0,
       0,   156,   157,   158,     0,   159,     0,     0,     0,     0,
       0,   162,  3536,     0,   163,     0,   164,     0,     0,     0,
       0,   167,   168,  3537,   170,   171,     0,   172,   173,     0,
       0,   175,     0,   177,   178,   179,   180,     0,   181,   182,
       0,     0,   184,     0,   185,     0,     0,   186,     0,     0,
     187,     0,     0,     0,     0,     0,     0,   188,   189,   190,
       0,     0,   191,     0,     0,     0,     0,   192,     0,     0,
       0,     0,     0,   194,     0,   195,     0,     0,     0,   196,
       0,   197,   198,   199,   200,     0,     0,     0,     0,     0,
       0,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     207,     0,   208,   209,   210,     0,     0,   211,     0,   212,
     213,   214,   215,     0,     0,     0,   217,   218,   219,     0,
       0,   220,   221,  3538,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,     0,   228,     0,   229,     0,
     230,   231,   232,   233,     0,   234,     0,     0,     0,     0,
     236,     0,     0,     0,     0,     0,   239,     0,     0,     0,
     240,   241,   242,   243,  3539,     0,   244,   245,     0,     0,
     246,     0,   247,     0,     0,     0,   248,     0,     0,     0,
       0,   250,     0,   251,   252,     0,   253,   254,  3540,     0,
       0,   255,     0,     0,     0,   257,     0,     0,   258,  3541,
       0,   259,   260,     0,     0,     0,     0,     0,   261,   262,
       0,   263,     0,   264,     0,   265,   266,     0,     0,     0,
       0,  -246,     0,     0,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,   280,   281,
       0,   282,   283,   284,   285,     0,   286,   287,   288,     0,
       0,     0,   289,   290,   291,   292,   293,     0,     0,   294,
     295,     0,   296,     0,   297,     0,   298,   299,   300,   301,
     302,   303,   304,   305,     0,     0,   306,   307,     0,     0,
     308,   309,   310,   311,     0,     0,     0,     0,   313,     0,
       0,     0,     0,   314,   315,   316,     0,   317,   318,  3542,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   322,   323,     0,     0,   325,   326,   327,     0,
     329,   330,   331,   332,   333,   334,     0,     0,     0,     0,
     337,   338,     0,   339,     0,   340,   341,   342,   343,     0,
     344,   345,   346,     0,     0,   347,     0,     0,     0,   348,
     349,   350,   351,   352,     0,     0,   353,   354,   355,     0,
     356,     0,     0,   358,     0,   360,  -246,     0,   361,     0,
       0,   363,     0,     0,   365,   366,  3543,     0,     0,     0,
     368,   369,   370,   371,   372,   373,     0,   375,     0,   376,
       0,     0,     0,     0,   378,   379,   380,     0,     0,     0,
       0,   382,     0,     0,     0,   383,     0,   385,     0,     0,
     387,     0,     0,   390,   391,     0,     0,     0,     0,     0,
       0,   392,   393,     0,   394,     0,     0,   395,     0,     0,
     396,     0,   398,     0,     0,     0,   400,     0,   401,   402,
     403,   404,   405,     0,     0,   406,   407,   408,   409,     0,
     410,   411,     0,     0,   412,   413,   414,     0,     0,   415,
     416,     0,   417,   418,   419,   420,     0,     0,     0,     0,
       0,   421,   422,     0,     0,     0,     0,   424,   425,   426,
       0,   427,   428,     0,   429,   430,     0,     0,     0,     0,
       0,   433,     0,     0,   434,     0,     0,     0,   436,   437,
       0,     0,     0,     0,     0,     0,   438,     0,     0,   439,
       0,     0,     0,   440,   441,   442,   443,     0,     0,  -246,
       0,   444,     0,     0,   446,     0,     0,   138,   448,   139,
     140,   141,   142,   143,     0,     0,     0,     0,     0,   144,
       0,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,     0,  -291,     0,     0,     0,   154,     0,     0,     0,
     155,     0,     0,   156,   157,   158,     0,   159,     0,     0,
       0,     0,     0,   162,  3536,     0,   163,     0,   164,     0,
       0,     0,     0,   167,   168,  3537,   170,   171,     0,   172,
     173,     0,     0,   175,     0,   177,   178,   179,   180,     0,
     181,   182,     0,     0,   184,     0,   185,     0,     0,   186,
       0,     0,   187,     0,     0,     0,     0,     0,     0,   188,
     189,   190,     0,     0,   191,     0,     0,     0,     0,   192,
       0,     0,     0,     0,     0,   194,     0,   195,     0,     0,
       0,   196,     0,   197,   198,   199,   200,     0,     0,     0,
       0,     0,     0,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   207,     0,   208,   209,   210,     0,     0,   211,
       0,   212,   213,   214,   215,     0,     0,     0,   217,   218,
     219,     0,     0,   220,   221,  3538,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,     0,   228,     0,
     229,     0,   230,   231,   232,   233,     0,   234,     0,     0,
       0,     0,   236,     0,     0,     0,     0,     0,   239,     0,
       0,     0,   240,   241,   242,   243,  3539,     0,   244,   245,
       0,     0,   246,     0,   247,     0,     0,     0,   248,     0,
       0,     0,     0,   250,     0,   251,   252,     0,   253,   254,
    3540,     0,     0,   255,     0,     0,     0,   257,     0,     0,
     258,  3541,     0,   259,   260,     0,     0,     0,     0,     0,
     261,   262,     0,   263,     0,   264,     0,   265,   266,     0,
       0,     0,     0,  -246,     0,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
     280,   281,     0,   282,   283,   284,   285,     0,   286,   287,
     288,     0,     0,     0,   289,   290,   291,   292,   293,     0,
       0,   294,   295,     0,   296,     0,   297,     0,   298,   299,
     300,   301,   302,   303,   304,   305,     0,     0,   306,   307,
       0,     0,   308,   309,   310,   311,     0,     0,     0,     0,
     313,     0,     0,     0,     0,   314,   315,   316,     0,   317,
     318,  3542,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   322,   323,     0,     0,   325,   326,
     327,     0,   329,   330,   331,   332,   333,   334,     0,     0,
       0,     0,   337,   338,     0,   339,     0,   340,   341,   342,
     343,     0,   344,   345,   346,     0,     0,   347,     0,     0,
       0,   348,   349,   350,   351,   352,     0,     0,   353,   354,
     355,     0,   356,     0,     0,   358,     0,   360,  -246,     0,
     361,     0,     0,   363,     0,     0,   365,   366,  3543,     0,
       0,     0,   368,   369,   370,   371,   372,   373,     0,   375,
       0,   376,     0,     0,     0,     0,   378,   379,   380,     0,
       0,     0,     0,   382,     0,     0,     0,   383,     0,   385,
       0,     0,   387,     0,     0,   390,   391,     0,     0,     0,
       0,     0,     0,   392,   393,     0,   394,     0,     0,   395,
       0,     0,   396,     0,   398,     0,     0,     0,   400,     0,
     401,   402,   403,   404,   405,     0,     0,   406,   407,   408,
     409,     0,   410,   411,     0,     0,   412,   413,   414,     0,
       0,   415,   416,     0,   417,   418,   419,   420,     0,     0,
       0,     0,     0,   421,   422,     0,     0,     0,     0,   424,
     425,   426,     0,   427,   428,     0,   429,   430,     0,     0,
       0,     0,     0,   433,     0,     0,  3842,     0,     0,     0,
     436,   437,     0,     0,     0,     0,     0,     0,   438,     0,
       0,   439,     0,     0,     0,   440,   441,   442,   443,     0,
       0,  -246,     0,   444,     0,     0,   446,     0,     0,   138,
     448,   139,   140,   141,   142,   143,     0,     0,     0,     0,
       0,   144,     0,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,     0,     0,     0,     0,     0,   154,     0,
       0,     0,   155,     0,     0,   156,   157,   158,     0,   159,
       0,     0,     0,     0,     0,   162,     0,     0,   163,     0,
     164,     0,     0,     0,     0,   167,   168,     0,   170,   171,
       0,   172,   173,     0,     0,   175,     0,   177,   178,   179,
     180,     0,   181,   182,     0,     0,   184,     0,   185,     0,
       0,   186,     0,     0,   187,     0,     0,     0,     0,     0,
       0,   188,   189,   190,     0,     0,   191,     0,     0,     0,
       0,   192,     0,     0,     0,     0,     0,   194,     0,   195,
       0,     0,     0,   196,     0,   197,   198,   199,   200,     0,
       0,     0,     0,     0,     0,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   207,     0,   208,   209,   210,     0,
       0,   211,     0,   212,   213,   214,   215,     0,     0,     0,
     217,   218,   219,     0,     0,   220,   221,     0,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,     0,
     228,     0,   229,     0,   230,   231,   232,   233,     0,   234,
       0,     0,     0,     0,   236,     0,     0,     0,     0,     0,
     239,     0,     0,     0,   240,   241,   242,   243,     0,     0,
     244,   245,     0,     0,   246,     0,   247,     0,     0,     0,
     248,     0,     0,     0,     0,   250,     0,   251,   252,     0,
     253,   254,     0,     0,     0,   255,     0,     0,     0,   257,
       0,     0,   258,     0,     0,   259,   260,     0,     0,     0,
       0,     0,   261,   262,     0,   263,     0,   264,     0,   265,
     266,     0,     0,     0,     0,     0,     0,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,   280,   281,     0,   282,   283,   284,   285,     0,
     286,   287,   288,     0,     0,     0,   289,   290,   291,   292,
     293,     0,     0,   294,   295,     0,   296,     0,   297,     0,
     298,   299,   300,   301,   302,   303,   304,   305,     0,     0,
     306,   307,     0,     0,   308,   309,   310,   311,     0,     0,
       0,     0,   313,     0,     0,     0,     0,   314,   315,   316,
       0,   317,   318,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   322,   323,     0,     0,
     325,   326,   327,     0,   329,   330,   331,   332,   333,   334,
       0,     0,     0,     0,   337,   338,     0,   339,     0,   340,
     341,   342,   343,     0,   344,   345,   346,     0,     0,   347,
       0,     0,     0,   348,   349,   350,   351,   352,     0,     0,
     353,   354,   355,     0,   356,     0,     0,   358,     0,   360,
       0,     0,   361,     0,     0,   363,     0,     0,   365,   366,
       0,     0,     0,     0,   368,   369,   370,   371,   372,   373,
       0,   375,     0,   376,     0,     0,     0,     0,   378,   379,
     380,     0,     0,     0,     0,   382,     0,     0,     0,   383,
       0,   385,     0,     0,   387,     0,     0,   390,   391,     0,
       0,     0,     0,     0,     0,   392,   393,     0,   394,     0,
       0,   395,     0,     0,   396,     0,   398,     0,     0,     0,
     400,     0,   401,   402,   403,   404,   405,     0,     0,   406,
     407,   408,   409,     0,   410,   411,     0,     0,   412,   413,
     414,     0,     0,   415,   416,     0,   417,   418,   419,   420,
       0,     0,     0,     0,     0,   421,   422,     0,     0,     0,
       0,   424,   425,   426,     0,   427,   428,     0,   429,   430,
       0,     0,     0,     0,     0,   433,     0,     0,   434,     0,
       0,     0,   436,   437,     0,     0,     0,     0,     0,     0,
     438,     0,     0,   439,     0,     0,     0,   440,   441,   442,
     443,     0,     0,     0,     0,   444,     0,     0,   446,     0,
       0,     0,   448
};

static const yytype_int16 yycheck[] =
{
       7,   525,   729,   525,   590,   907,   599,   600,   908,   546,
     635,   942,   121,    20,     5,   822,    23,  1034,    21,  2286,
     630,   631,  1655,   745,  1207,    32,  1267,    30,   560,  1555,
     848,   475,  1087,    36,   872,    42,  1087,  2490,  2103,  1951,
    2216,  2146,  1332,  1618,  1956,  2312,    53,     7,  1151,  2591,
    2542,  2177,  1025,  1358,   872,  2957,  1931,   667,   846,   615,
    2170,  2171,  2172,  1110,   689,   912,  2403,   692,  2204,  1811,
    1117,  2930,  2389,  1058,  2391,   654,   912,   687,  1809,  1812,
      23,  2181,  2182,  1816,  1281,   873,    93,  1740,  1915,   699,
     700,   701,  1915,   604,  1827,   532,  2161,  2936,  2197,  1350,
    1340,  1298,  1809,    33,  1837,    16,  2205,  2281,   115,  2722,
     117,  1308,  1309,   120,   121,   122,  2262,   578,  2416,    15,
      16,    58,  2420,    16,    18,   586,   587,  1681,    29,  1904,
     137,    18,   718,  1118,  1119,  3175,    24,  1122,  1123,  1124,
    1125,  2267,  1127,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
      93,   707,   708,   709,  1764,  1765,    18,   117,  1792,   874,
     120,  1412,   147,   719,  1654,  2291,  2292,    96,  2255,    15,
      16,  1781,  2990,  2991,    24,  2262,  2994,    35,  2265,    15,
      16,  1801,  2269,    50,  1915,   127,   157,   175,  1798,  1799,
      18,    71,  2245,  2246,   137,  3013,  2283,  2284,    57,    58,
    2393,  3019,    15,    16,  1814,  1815,  2293,  1817,  1915,    65,
    1820,  1821,    61,  1933,  1824,   747,    35,  2368,  1783,  1829,
      15,    16,   288,  1833,  1834,  1835,  1836,    15,    16,   339,
    1840,    63,  1842,  2535,  1755,   112,    60,    62,  1848,  2249,
     129,  1851,  1852,  1853,  1878,  2258,   112,  1350,   141,  1883,
    1433,   145,   294,   131,   141,  1889,  1890,    50,   145,  1893,
    3182,    11,    15,    16,   141,  3124,   345,    33,    20,   112,
    3179,   358,   804,  3680,   229,   141,  3172,   415,   141,   205,
      66,   175,  2419,   145,    60,   359,   205,   748,    20,  1899,
    1900,  1901,  1902,    15,    16,  1022,    65,   112,   141,    98,
     592,    33,   360,   178,   914,    57,    58,  2360,  2361,  1412,
      15,    16,   135,     8,  2189,    47,   130,   145,   157,    15,
      16,  3514,   210,    15,    16,    57,    58,   401,    15,    16,
     135,   116,   788,   135,   468,   193,    15,    16,   222,   175,
      15,    16,   431,   262,   498,    99,  1073,   171,   102,   251,
    1077,   172,   327,   462,   529,   816,   157,    15,    16,   170,
     210,   472,   448,   113,    74,   113,   409,   398,  3270,   245,
      15,    16,   809,   966,   193,   968,   969,   172,   227,   518,
      15,    16,   245,    40,    15,    16,   471,   496,   469,  3207,
     475,     8,    15,    16,   205,   171,   284,    77,  3216,   498,
     262,   116,   541,  2856,   208,   580,   517,  2203,    61,   208,
     213,   382,    29,    93,    15,    16,   497,    18,  3236,   222,
    1320,   278,   175,  3241,   399,   511,  1148,   329,    15,    16,
      15,    16,   586,   254,   284,   891,   467,  2157,    60,  3278,
     498,    15,    16,  3339,  3637,  1024,   599,   600,   344,   587,
     742,   347,   311,   170,   496,   462,   967,   464,  1037,   414,
      78,    90,  2598,   382,  2574,  3324,  3375,  3376,   602,   345,
     165,   349,   479,   221,   323,   936,   483,   587,   328,   175,
     522,   407,    15,    16,  1272,   492,  2662,  1275,   205,   496,
     579,   498,   579,  1340,  3901,  1283,  2606,   504,  2644,   374,
     215,   360,   581,   510,  1340,  1608,   143,   581,   344,    15,
      16,   347,   278,   579,  1332,   330,    15,    16,  2249,  2665,
      15,    16,  1310,  1311,   386,   532,   533,  1113,   244,  2404,
     175,   344,  1783,  3372,   347,    15,    16,  1734,   581,    15,
      16,  2368,  2249,   382,   551,  2368,   413,   350,   372,   344,
     439,  1856,   347,   560,   386,   562,   344,  2644,  1809,   347,
     346,   504,  1006,  1007,  1411,  1121,   573,   574,   539,  2762,
     555,   578,  2874,   210,   227,  1411,  2210,   584,  2665,   586,
     587,   382,  1138,  1027,   591,   592,  3128,  2362,  2739,   596,
    1305,   344,  1036,   581,   347,  3517,   372,   347,   509,   606,
    3640,  1586,   196,   610,  1048,  1049,  1050,  1580,   509,  2163,
     581,   548,  1597,  1057,   574,  1600,   472,   431,   493,   468,
     413,  2631,   344,   448,   553,   347,   476,  2247,  1350,  2642,
     573,   480,    15,    16,  2268,   744,  2270,  2368,  2128,   344,
     498,   521,   347,  2277,    15,    16,  3259,   654,   344,   579,
    3489,   347,   344,  1904,  2759,   347,  2290,   344,  1898,   601,
     347,  2368,  2296,  2228,  1915,   344,  2276,   560,   347,   344,
     566,  3573,   347,  2548,  2549,  2196,  2974,  2311,  2288,   498,
    1783,   509,  2402,    15,    16,  2738,   344,   581,   584,   347,
    1412,   328,   585,   581,   493,   558,  1157,   581,   585,   344,
     539,   563,   347,   472,   554,   712,   530,   714,   585,   344,
    3008,  3009,   347,   344,   581,   564,   347,   427,  3016,   585,
     566,   344,   585,  3619,   347,  3023,  2359,   586,    10,   540,
     566,   738,   739,   740,   557,   742,   743,   744,   847,   746,
     747,   748,   585,   344,  1276,  1256,   347,  3586,   502,  1210,
     535,   505,   557,   566,   530,   557,  2366,   344,  2868,   344,
     347,  1198,   347,   381,  1225,   579,  2871,   580,   581,   583,
     344,   566,   394,   347,    45,   527,   783,   580,   566,   739,
     581,  3683,   935,   743,  2920,   580,   746,   794,  2924,  1226,
    2964,   420,   580,   581,  2940,   527,  2906,   804,   805,   561,
     110,  1904,   809,  2599,  2600,    15,    16,   798,   160,   816,
     467,   344,  1915,   566,   347,   547,   548,  2882,   114,   541,
     535,  2920,  1344,   540,    54,  2924,   334,   480,   581,   486,
    3167,  3649,   985,  3651,    68,  2972,  2973,   328,   344,   476,
     847,   347,   558,  2980,   566,   344,  2983,  2984,   347,   344,
     325,   794,   347,  2940,   511,   175,    15,    16,    73,   581,
      75,   566,   805,  3000,   344,    15,    16,   347,   344,   151,
     566,   347,   145,  2647,   566,  3714,   581,  3014,   472,   566,
    3433,   124,  3019,  3020,  3021,  3022,    66,   566,   580,   581,
    2765,   566,   141,  1731,   581,   370,  1827,   112,    15,    16,
    2631,   908,   581,    15,    16,   580,   581,  3449,   566,   141,
     220,   363,  2739,  1731,    15,    16,  2739,   554,   133,   190,
      42,   566,  1760,   581,  2631,  1504,  3785,   109,  1365,   936,
     178,   566,   939,   940,   109,   566,  1724,  2590,   324,   325,
    2181,  2182,  1760,   566,   581,  1733,   581,   145,  1736,  1737,
     581,   166,    15,    16,    15,    16,   205,  3274,   581,  2865,
    2702,   344,  3062,   261,   347,   566,   262,  3540,  3541,   149,
    2703,    15,    16,   344,   172,   231,   347,  2228,   330,   566,
     987,   566,   989,    15,    16,   167,   386,  3540,  3541,    15,
      16,  1100,   566,  2190,   581,  1980,   581,   940,  2249,    15,
      16,   321,  2049,   245,  3341,   405,   580,   581,  2739,   431,
    2315,  1604,   344,   245,    19,   347,    24,  1024,    20,  1556,
      15,    16,    56,  3159,  3160,  2208,  2659,  2933,  1137,   431,
    1037,    33,  2739,   566,   434,    15,    16,   176,  2055,  2056,
      15,    16,  3152,  1599,   987,    47,   989,   580,   581,   262,
     293,  1898,    15,    16,  2929,    57,    58,  3959,    15,    16,
     566,  1783,  1898,   554,    15,    16,   109,   566,    15,    16,
      51,   566,   109,   581,   580,  2048,   431,   259,   388,    60,
    1087,   580,  1614,   280,   259,  2058,   566,  3579,    15,    16,
     566,  2146,   374,  1100,  2669,  2146,   314,   327,    15,    16,
     580,   581,   426,   345,   580,   581,   151,  1216,   406,    15,
      16,  2362,   117,    15,    16,  3668,  3669,  2368,   336,  2504,
    2505,  2506,    31,   157,   167,  2228,   374,   161,    41,   363,
    1137,  1663,  1664,  3675,   344,  1142,   342,   347,   172,   336,
    1147,   391,   376,   175,    15,    16,  3599,  2437,   448,   331,
    1157,  2206,    15,    16,   425,  2206,   331,   579,   407,  2544,
    2545,  2546,  3074,   515,    95,   493,   346,   440,   478,  2943,
    1692,  3276,   256,   386,   113,    15,    16,   579,   393,   531,
     138,   583,  1904,   566,   466,   344,   190,  1194,   347,  1196,
     148,  1198,   314,  1915,   344,   566,  3749,   347,   581,    15,
      16,   363,   210,  1210,  1147,    50,    15,    16,  1199,  1216,
     581,  3764,   210,   175,    15,    16,   259,   356,  1225,  1226,
     151,   134,   259,  2406,   579,  3778,   310,   344,   232,  1236,
     347,   513,   344,   246,   566,   347,   249,  1244,  1347,  3781,
    2295,   431,   440,   344,  2295,   493,   347,   178,   259,   581,
    1257,  1258,  1259,  1260,  1261,  1262,   490,   219,   292,  2362,
    1251,   559,   518,    15,    16,  2368,  1273,  1274,    22,  1276,
     251,   553,  3845,  3846,   524,  1282,   284,   335,   512,   183,
    3833,   344,   221,   344,   347,   541,   347,   529,   331,   183,
      56,   472,  3845,  3846,   331,  1302,   229,  1257,  1258,  1259,
     344,  1261,   360,   347,   560,    15,    16,   240,   447,    24,
       0,  2529,   344,   222,  1274,   347,  3492,  1260,   344,  1262,
     331,   347,  1282,   541,   431,  2256,   558,  2258,   344,   374,
     328,   347,  3885,    15,    16,   244,   585,   201,   520,   203,
    1347,   431,  3895,   354,   109,   520,  3451,   251,   382,   344,
     563,   208,   347,   585,  1361,   141,   566,   251,  1365,  1302,
     490,   145,  1353,   493,   344,    15,    16,   347,   549,   344,
     383,   581,   347,  1364,  3927,   232,  3929,  3289,    15,    16,
    2631,   344,   579,   345,   347,   343,  3939,   344,   472,   579,
     347,   157,  2610,   344,   186,   161,   347,   344,   152,  3952,
     347,  3954,   167,  3956,    15,    16,   172,   566,   538,  1416,
    3963,  1418,  1419,  1420,  1421,  1422,   566,   344,  1361,  3972,
     347,   466,   581,  1430,   431,  1432,  3491,   344,   143,  3070,
     347,   581,  3073,   337,  3987,  3988,   280,   229,   344,  2486,
     498,   347,   344,   374,   222,   347,    15,    16,    12,   566,
    4003,  4004,    15,    16,   566,  4008,    15,    16,  1418,  1419,
    1420,    15,    16,   241,   581,   566,    76,   315,   513,   581,
     580,   581,   579,   344,    20,  2530,   347,   520,   476,  2530,
     581,   344,   327,   520,   347,   418,   395,    33,  2739,   579,
      15,    16,   336,  2878,   259,   210,  2052,  1504,  1505,   278,
     122,    47,   369,   566,   344,   566,  2228,   347,   553,   520,
    1619,    57,    58,  3966,  1958,   137,    15,    16,   581,    12,
     581,  2114,   566,    15,    16,   527,   292,  1971,   344,    15,
      16,   347,   436,  2518,   566,   344,   175,   581,   347,   497,
     566,  3174,   436,   344,   165,  3812,   347,   581,   580,   551,
     566,    15,    16,   345,   580,   509,   554,  1564,    15,    16,
    2004,   125,   493,   175,   580,   175,   331,   560,   413,   284,
     139,   566,   579,    15,    16,   213,   431,   579,    15,    16,
      57,    58,   513,  3693,   222,   580,   566,   315,   581,    66,
     145,   566,   344,  3719,   439,   347,    15,    16,  3239,  1606,
     580,  3242,   381,   566,   186,   580,   245,  1614,   315,   566,
     222,   114,  1619,   328,   235,   566,   382,   580,  1625,   566,
    1627,  2065,   553,   580,    12,  1632,  1633,   581,  1635,   580,
      15,    16,   125,   580,   344,    12,  2739,   347,    12,   566,
    2362,  1648,    15,    16,  1651,    12,  2368,    15,    16,   566,
     498,  3292,   262,   580,   190,   493,  1663,  1664,  1665,  1666,
     566,   501,   344,   580,   566,   347,  1673,  1674,  1675,   448,
    1661,  3181,   573,   541,   580,   523,    15,    16,   580,   580,
    1671,    15,    16,   151,  1691,   490,    15,    16,   493,  1632,
    1633,   194,  1635,  1700,   344,   566,   232,   347,    15,    16,
      24,   266,   267,   566,  1695,  1648,   327,   344,  1651,   580,
     347,  2642,   350,   581,  3224,    15,    16,   580,   587,    15,
      16,   446,  1665,  1666,   579,   109,   566,    89,  1735,   315,
    1673,  1674,  1675,   344,   573,  2542,   347,   125,   113,  1183,
    1747,   580,  1186,  2581,    16,  1189,    70,  1754,   125,    70,
     566,   125,  2769,  2275,   579,   520,   509,   566,   125,   262,
      81,   476,   587,  2581,   580,   566,    15,    16,   579,   126,
     498,   580,  2703,  2790,  2791,   344,   587,  1768,   347,   580,
    3628,   344,  3630,   167,   347,   344,  1777,  1778,   347,   204,
     344,   498,  1735,   347,  2811,   523,   464,  1788,  1789,  1790,
    1791,  2589,  1793,  1794,  1913,    15,    16,   421,   533,   193,
     548,  1754,   493,   551,   566,   483,   523,   201,   495,   344,
    2875,  3062,   347,    24,  2875,   541,   924,   925,   580,   208,
      16,   396,   397,   186,   158,  3469,  3470,  3471,  3472,   554,
    3201,  3202,  1951,  1850,   569,   344,   204,  1956,   347,   211,
     186,   579,   344,  3214,   339,   347,   566,  1864,   344,  3220,
      18,   347,    46,   961,   580,   581,   581,   229,  1875,    70,
     580,     6,   579,  2928,    16,   259,    12,  2928,   240,   219,
     344,   495,  3243,   347,   566,  3246,   210,   344,  1879,  1880,
     347,  1882,    70,  1884,  1885,  1886,  1887,  1888,   580,  2492,
    1891,  1892,   344,   560,  2959,   347,  1913,   344,  2959,  3435,
     347,  1918,   498,   234,   580,   581,   566,    70,   128,  2649,
      55,  1928,  1929,   175,   538,   344,   580,   581,   347,   566,
     580,    89,  2041,   527,   528,   160,   530,   523,   501,   553,
     126,   585,   143,   580,  1951,   580,   581,   331,   305,  1956,
    2680,   262,   314,  3669,   580,   566,   587,   158,  2688,   344,
     284,  2691,   347,   536,  2073,   143,   466,  3600,   171,   580,
    3580,   344,  3155,   579,   347,   341,   344,    30,     6,   347,
     407,   527,   303,   141,   126,  1928,  1929,   145,    11,   125,
     580,   581,   126,   579,   129,  2527,  3606,   566,   322,  3609,
    3610,  3611,  3612,   566,   328,   344,   327,   566,   347,   210,
     344,  3028,   566,   347,   172,   344,   587,  2739,   347,    72,
    2980,   580,   579,  2983,  2984,   581,   580,   344,   186,   579,
     347,   579,   210,   191,  2041,   580,   581,  2481,   579,  2571,
    3000,   566,   580,   581,   344,   580,   581,   347,   344,    15,
      16,   347,  3686,   211,   154,   580,   418,   210,   194,  2066,
     579,   219,  2171,   384,  2173,  2174,  2073,   566,  3123,   580,
     581,   229,  3123,  3706,   566,   580,   581,   579,     3,   336,
     566,   580,   240,   284,     9,    10,   139,   245,   580,   580,
     581,   579,  3702,  3703,   580,   344,   254,   579,   347,   324,
     325,  3711,   566,   579,    29,   330,  2215,  2216,   579,   566,
      35,   431,    57,    58,    39,   477,   580,  3833,   109,   305,
     579,   322,  2129,   580,   566,   579,   184,   328,   579,   566,
     579,    12,   580,   581,   344,   579,   520,   347,   580,  2146,
     580,   581,   498,   580,   322,   466,   579,   566,   539,   540,
     328,   542,   476,   544,   579,    25,   314,  2164,  2165,   579,
      41,   580,   579,   305,  2171,   126,  2173,  2174,   579,   322,
     579,   305,   579,  2164,   579,   328,   167,  2286,   336,   579,
    3080,   566,   579,    69,   501,   580,   581,   345,   580,   581,
     325,   476,    95,   566,   373,   580,    66,   579,   566,  2206,
      70,    82,   193,  2312,   421,   130,    87,   580,  2215,  2216,
     579,  3927,   580,  3929,   392,   579,   374,   574,   575,   576,
     577,   342,   584,   281,   282,   545,   546,   566,   286,   287,
     554,   579,   566,   580,   581,   579,  3952,   566,   579,   392,
     490,   580,   112,   580,   581,   205,   580,   579,  2255,   566,
     385,   580,   387,   579,  2257,  2262,   442,   443,  2265,   579,
     418,    70,  2269,  2266,  2271,   579,   566,   579,   259,  2272,
     566,  3987,  3988,   579,  2281,   476,  2283,  2284,   579,  2286,
     580,   439,  2273,  2274,   580,   171,  2293,   579,  2295,    98,
     515,  2294,   195,   580,   581,   579,  2299,  2304,   476,   579,
     442,   443,  2305,  2306,   579,  2312,   531,  2298,   999,  1000,
    1001,    11,  2319,  2320,   579,  3949,   369,   566,   579,   477,
    1011,   109,   208,   476,   460,   461,   462,   463,   464,   465,
     541,   580,   580,   581,   143,   579,   126,   390,    33,   579,
     331,   477,  2898,   224,   305,   579,   232,   525,   579,   126,
     579,  1042,   579,   554,  1045,  2799,   566,   580,   581,   580,
     581,  2304,   232,    58,   580,   581,   419,  2358,  1633,   336,
    1635,   529,   525,   579,  1065,  1066,   554,   579,  1069,   167,
     581,  2388,  2389,   541,   570,   571,   572,   573,   574,   575,
     576,   577,   579,  2837,   579,    95,   579,  1088,  1089,   208,
     558,   554,   560,   581,    99,   193,    69,   102,  1673,  1674,
    1675,   579,   293,   113,   579,   110,   580,   581,   471,   580,
     581,   581,   580,   581,   580,   581,   584,   585,   570,   571,
     572,   573,   574,   575,   576,   577,  3367,  3368,   572,   573,
     574,   575,   576,   577,   452,  2388,   135,   136,   351,   580,
     581,   107,   579,  3046,   324,   325,   579,   360,   580,   581,
     330,   145,   146,   366,   580,   581,   336,   458,     6,   580,
     581,   259,   353,   109,   283,    13,    14,   579,   178,    89,
     579,   442,   443,   580,   581,   579,   372,    25,    26,   580,
     581,   300,   579,  3478,  2501,   179,  2503,  2504,  2505,  2506,
     580,   581,   372,  3403,   188,   205,   579,  2514,   171,  3409,
     580,   581,   579,   322,   579,   305,    60,    55,   174,   579,
    2527,    59,    60,  2530,   579,    69,    64,   579,   305,   520,
     579,   167,    70,   580,   581,    48,    80,  2544,  2545,  2546,
      78,   225,   175,   331,   200,   208,  3597,    85,   451,  3071,
    2557,   256,   236,  2662,    48,   255,  2563,   193,  2565,   581,
      98,   580,   581,   488,  2571,   435,  2557,   109,   336,   232,
     112,  2514,   426,   454,   112,   580,   581,   115,   529,   263,
      60,   506,   580,   581,   122,   123,   150,    95,   513,    69,
     439,   129,   580,   581,   580,   581,   580,   581,   574,   137,
      80,   211,   517,   141,   579,   143,   487,  1074,  1075,   534,
     571,   572,   573,   574,   575,   576,   577,  3704,  3705,   229,
     245,   316,   172,   259,   472,   167,   472,   171,  3381,  3382,
     240,   472,   170,   177,   318,   538,   278,  2644,   490,   295,
    2884,  2885,  2649,   299,  2846,  2847,    31,  3106,  3107,   256,
     306,   193,   442,   443,   142,  2662,    79,   581,  2665,   338,
     530,   486,   580,   141,   208,   442,   443,   476,   206,   177,
     208,   112,  2663,  2680,   374,   586,    98,     6,   216,   579,
    2671,  2688,   491,    97,  2691,     4,   430,   553,   232,    89,
      89,   171,    95,   231,  2701,   331,   359,   177,    54,   154,
     208,   399,    98,  2710,   314,   202,  2713,   581,    18,   372,
    2717,   178,   178,   581,  3699,   587,  2723,   259,    66,    12,
    2727,   557,   580,  2730,   380,   580,   336,   498,   208,     9,
    2737,   125,   520,  3784,   581,  3328,   587,   437,   580,   244,
     580,   126,  2749,   587,   579,   283,  1437,   255,   151,  2756,
    3650,   446,   232,  3378,  3379,  3380,   587,   143,   581,   586,
      48,   560,   300,  2723,   581,   490,   304,   579,   278,   251,
    2713,   278,  3579,   429,   581,   178,   581,   358,  2887,    89,
     570,   571,   572,   573,   574,   575,   576,   577,   509,   331,
     581,   491,   509,   493,  2903,   572,   573,   574,   575,   576,
     577,   581,   340,   581,  3414,   208,   581,   345,   418,  3794,
     505,   211,   211,  2756,   352,  1506,   222,   574,   172,  1510,
    3342,   359,   360,   488,  2831,   119,   223,   162,   372,   229,
     229,   141,  2839,   172,   581,   145,   581,   222,   533,   450,
     240,   240,  1533,   534,   361,   121,   336,    70,  2839,   431,
     581,   389,   255,   579,   581,   145,  2863,   439,    81,   244,
     170,   580,   172,   401,   402,   403,   404,   477,  2875,  2876,
     145,  2878,   145,   145,  3859,   145,   186,   145,   145,   359,
    2887,   191,   145,   145,   520,   423,  2893,   145,   145,   145,
     145,   145,   372,   145,   145,   205,  2903,   120,   581,  3436,
     556,   211,   196,   562,  2911,   536,   540,    46,   336,   219,
     581,   455,   568,   178,   314,   314,   175,   581,   580,   229,
     305,  2928,  3532,   580,   574,   580,   580,   580,   580,   437,
     240,   580,   175,  2940,   573,   245,   336,   580,   476,   324,
     325,  2948,   579,  2950,   254,   580,  4001,   455,   580,   440,
    4001,   580,  2959,   491,   580,   579,   494,  2964,   581,   581,
    3484,  2968,   256,   545,   546,  3074,   369,   580,   580,  3869,
    3870,   374,  3872,  4024,   580,   455,   579,  4032,   520,   577,
     518,  4032,   579,   491,   278,   493,   530,   495,   477,   478,
     580,   529,   481,   482,   581,   386,   485,   579,   487,   558,
     209,   579,   579,   482,   314,   184,   175,   587,   580,   448,
     395,   234,  3912,   381,  3914,  3915,   581,   172,   418,   418,
     439,   581,   530,    46,   466,   312,   336,    69,   145,  3138,
     538,   466,   466,   466,   437,   345,   466,   430,   359,   359,
     509,   359,  3033,   121,   230,   491,   230,   585,   165,   121,
     530,   491,   359,  3060,    46,   359,   357,   442,   443,   359,
    3051,   359,   179,   255,   374,   402,   541,  3074,   453,   587,
     579,   188,   139,   218,   580,   218,   580,   477,   477,   373,
     303,   580,   580,   254,   587,   580,   587,   381,   491,  3682,
    3614,   587,   495,   580,  3680,   587,   580,  3999,   581,   509,
     509,   324,   325,   498,   327,   509,   587,   581,   418,   563,
     513,  3118,    46,  3222,   587,   251,  3123,   411,   235,   236,
     579,   509,   579,    13,    14,   342,   175,   126,   175,   439,
     175,  3138,   219,   226,    35,   538,   175,   587,    28,   587,
      30,   331,   560,   581,    34,   229,   263,   229,   348,   296,
     553,    98,    98,   232,   448,   232,   587,   509,    48,    49,
     580,   384,   579,  3154,   579,    55,   341,   477,   581,    59,
      60,   186,  3179,   498,   415,   336,   359,   579,   472,   345,
    3289,   579,    72,   220,  3187,   570,   571,   572,   573,   574,
     575,   576,   577,   574,   220,   579,   490,   580,    88,   493,
     580,   102,   580,   580,   321,   587,   580,   580,   109,   580,
     574,   336,   579,   246,   205,  3222,   581,   359,   108,   529,
     580,   587,   581,   222,   175,   580,   116,   117,   118,   535,
     540,   541,  3223,   222,   242,  3344,    66,   266,   128,   129,
    3247,   229,   229,   466,   336,   581,   232,  3254,   558,   232,
     560,   141,    35,   581,   371,   581,   370,    70,    18,   160,
     749,   336,  3269,   153,  3786,   336,   167,  3258,   579,   427,
     580,   581,   336,    46,   584,   585,    25,    26,   452,   169,
     431,   245,  3289,   579,   433,  3749,   560,   132,   580,  4016,
     238,   580,   193,   186,   184,   580,   579,   581,   579,   189,
    3764,   441,   192,   145,   229,   229,   305,   112,    57,    58,
      59,   580,   112,   579,  3778,  3901,  3909,    66,   368,   102,
     581,    70,    74,  3330,   448,   215,   109,   217,    18,    78,
     580,   579,   128,   452,   587,   580,   580,  3344,    33,   581,
     580,   580,   580,   233,   580,   580,   580,   580,   580,    98,
     302,   234,   560,   381,   219,   580,  3363,   579,   259,   579,
     250,   580,    46,   112,   254,   581,   115,   126,  3375,  3376,
     191,   581,   587,   302,   386,  3968,   498,   160,   498,   541,
     579,   541,  3906,  3492,   167,  3392,   579,   551,   579,   535,
     579,   579,   551,   112,   143,   232,   232,   330,   580,   331,
     581,    25,    26,   579,   331,   302,  3992,   498,   156,   498,
     193,   545,   498,   232,   315,   580,    16,   580,   541,   326,
     541,  3885,   219,   560,   581,   326,   470,   331,   546,   330,
     331,  3895,   580,    57,    58,    59,   415,  3444,  3445,   342,
    4026,   535,    66,   442,   443,   493,    70,  3454,   579,   481,
     340,   267,   579,   579,    78,   172,   557,   140,    30,   208,
     588,   172,   500,   222,   580,   580,   355,   216,   580,   359,
     579,   121,   475,   121,    98,  3939,   259,   579,   143,   369,
     374,    68,   231,   145,   394,  3492,     5,   557,   112,   379,
    3954,   115,  3956,   175,    30,    60,   342,    60,   501,  3963,
     128,   581,  3445,   247,   580,   482,    46,    46,  3972,   399,
     579,   579,   402,   219,   404,   342,   139,   407,   342,   143,
     410,   120,   412,   585,    46,    46,   138,   417,    46,   419,
    3537,    16,   315,   557,   283,  3542,   426,   139,   204,  4003,
    4004,   431,   585,   261,  4008,   111,   305,   330,   331,   439,
     134,   300,   588,   580,   444,   580,    46,   579,   448,    46,
      46,   270,   580,    52,   585,   424,   580,   145,   139,   189,
     501,   570,   571,   572,   573,   574,   575,   576,   577,   581,
     581,   471,    52,   580,   208,   475,   581,   585,   406,   172,
    3597,  3598,   216,   172,   205,   172,  3603,   498,  3707,   501,
     559,   502,   112,   352,   505,   331,   579,   231,   546,   247,
     439,   360,   615,   173,   515,  3547,  2077,   620,  1894,   520,
     244,  3628,   523,  3630,  3039,  3632,   516,  2244,   600,  3570,
    3044,  3440,  3773,  3853,  3266,   921,  3269,  3443,   528,   501,
    4026,  3648,   532,  3980,  3433,   535,  3433,   650,  3989,  3433,
     540,  3433,  3433,  3433,  3661,  3598,  3433,  3882,  3433,   283,
    3433,  3433,  3742,   666,  3882,  3433,  3846,  3768,  3433,  3433,
    3767,   572,   573,  1608,   423,   565,   300,   959,  1356,  3450,
    2863,  1358,  2297,   442,   443,  2519,  3603,  3478,  3697,   579,
    3120,  3859,  3794,  3866,  3906,  1411,  3614,   472,  3054,  1856,
    3707,  3371,  2742,  3812,   707,   708,   709,   710,  3715,  2389,
    3701,  2968,  1864,  2322,  2991,   498,   719,  2260,  3024,   502,
    2948,  2991,   505,  3401,  3186,  3786,  3231,   476,   352,  3222,
    2952,  2903,   515,  3636,  3647,  3395,   360,   520,  1425,  3583,
     523,  3454,   491,  3409,  3523,   494,  1926,  2950,  1863,  2315,
    1742,  1317,  3191,  2949,  2141,  3864,  1407,  1665,   620,  2514,
     940,  2155,  2108,   545,  1680,  3486,  2839,  1957,   834,   518,
    2492,  2207,  2918,  1037,  3507,  3370,  3828,  3784,  2730,  3829,
     529,  1011,  2059,  2959,  1075,  3364,  3968,  3344,   650,   572,
     573,  3705,    12,    13,  1226,  2160,  1929,  1198,  3123,   423,
    2104,  2870,  2145,  2869,   666,  3812,  3784,  2928,  3799,  3800,
    4024,   570,   571,   572,   573,   574,   575,   576,   577,   535,
     611,  3828,  3829,  1935,   525,  1430,   264,   265,   266,   267,
     268,   269,   581,   271,   272,   273,   274,   275,   276,   277,
    1732,   279,  1624,  2701,  1265,  3902,  2852,  3819,   710,  3940,
    3876,  4032,   476,  2875,  3224,  1231,  1686,  3864,  2911,  2573,
    3149,   517,  3352,   817,  1651,  1244,  3473,   491,    88,  1191,
     494,  1234,  2501,  1416,  3467,   518,   821,  1095,  2471,   468,
    3887,  2035,   468,    -1,    -1,   600,   600,  3894,   600,    -1,
      -1,    -1,    -1,    -1,   518,    -1,   116,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   529,    -1,    -1,    -1,   129,
      -1,  4020,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   151,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,
     943,    -1,    -1,    -1,   164,    -1,  3953,    -1,    -1,    -1,
      -1,  3958,    -1,    -1,    -1,   579,    -1,    -1,   396,   397,
      -1,    -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3992,    -1,    -1,   208,    -1,
      -1,    -1,   995,   996,  4001,   215,    -1,    -1,    -1,    -1,
      -1,  1004,  1005,  1006,  1007,  1008,  1009,  1010,    -1,    -1,
      -1,    -1,  1015,  4020,    -1,  1018,  1019,  4024,  1021,  4026,
    1023,    -1,    -1,    -1,  1027,  4032,    -1,  1030,  1031,  1032,
    1033,    -1,  1035,  1036,   254,    -1,    -1,    -1,    -1,    -1,
    1043,  1044,    -1,  1046,  1047,  1048,  1049,  1050,    -1,  1052,
      -1,  1054,  1055,  1056,  1057,  1058,  1059,  1060,  1061,  1062,
    1063,  1064,    -1,    -1,  1067,  1068,    -1,  1070,    -1,  1072,
      -1,    -1,    -1,  1076,    -1,  1078,  1079,    -1,    -1,    -1,
      -1,   943,    -1,    -1,    -1,    -1,    -1,  1090,  1091,    -1,
      -1,    -1,    -1,  1096,    -1,    -1,  1099,    -1,    -1,    -1,
      -1,    -1,    -1,  1106,  1107,  1108,    -1,  1110,    -1,    -1,
      -1,    -1,    -1,    -1,  1117,  1118,  1119,    -1,  1121,  1122,
    1123,  1124,  1125,    -1,  1127,  1128,  1129,  1130,  1131,  1132,
    1133,  1134,    -1,   995,   996,  1138,  1139,    -1,    -1,    -1,
      -1,    -1,  1004,  1005,    -1,    -1,  1008,  1009,  1010,    -1,
      -1,    -1,    -1,  1015,    -1,   375,  1018,  1019,    -1,  1021,
      -1,  1023,    -1,    -1,    -1,    -1,    -1,    -1,  1030,  1031,
    1032,  1033,    -1,  1035,   394,    -1,    -1,    -1,    -1,    -1,
     400,  1043,  1044,    -1,  1046,  1047,    -1,    -1,   408,    -1,
    1052,    -1,  1054,  1055,  1056,    -1,    -1,  1059,  1060,  1061,
    1062,  1063,  1064,    -1,    -1,  1067,  1068,    -1,  1070,    -1,
    1072,   431,    -1,    -1,  1076,    -1,  1078,  1079,    -1,    -1,
      -1,    -1,    -1,    -1,   444,   445,    -1,    -1,  1090,  1091,
      -1,    -1,    -1,    -1,  1096,    -1,    -1,  1099,    -1,    -1,
      -1,  1244,    -1,    -1,  1106,  1107,  1108,    -1,    -1,  1252,
      -1,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   485,    -1,    28,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,  1139,    -1,    -1,
      -1,    -1,    15,    16,    -1,    -1,    -1,    48,    49,    -1,
      -1,    -1,    -1,   513,    55,    -1,    -1,    -1,    59,    60,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,   535,    -1,   537,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      12,    13,    -1,    -1,    -1,    -1,    -1,   108,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   116,   117,   118,    13,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   128,   129,    -1,
     103,   104,   105,   106,   107,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1244,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1252,    -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,
      -1,    -1,    -1,   184,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   192,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,
    1443,    -1,    -1,    -1,   116,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   215,    -1,   217,   129,    -1,    -1,
      -1,   116,    -1,    -1,   197,   198,   199,   200,    -1,    -1,
      -1,    -1,   233,    -1,   129,    -1,    -1,    -1,    -1,   151,
      -1,   153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,
      -1,    -1,   164,   254,    -1,    -1,   151,    -1,   153,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,
      -1,    -1,   184,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,
      -1,    -1,    -1,    -1,    -1,    -1,   208,    -1,    -1,  1542,
    1543,  1544,    -1,   215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   208,    -1,  1558,    -1,    -1,    -1,    -1,
     215,    -1,   295,    -1,   297,   298,   299,    -1,    -1,    -1,
      -1,    -1,    -1,   306,    -1,    -1,    -1,  1580,    -1,   340,
      -1,  1443,   254,  1586,    -1,    -1,  1589,    -1,  1591,    -1,
      -1,    -1,    -1,    -1,  1597,    -1,  1599,  1600,   359,   254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,
      -1,   344,    -1,    -1,   347,    -1,    -1,    -1,   379,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   399,    -1,
      -1,   402,    -1,   404,    -1,    -1,   407,   380,    -1,   410,
      -1,   412,    -1,    -1,    -1,    -1,   417,  1660,   419,    -1,
      -1,    -1,    -1,    -1,    -1,   426,    -1,    -1,    -1,    -1,
     431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   439,    -1,
    1542,  1543,  1544,   444,    -1,    -1,    -1,   448,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   428,   429,    -1,    -1,    -1,
      -1,    -1,    -1,   375,    -1,    -1,    -1,    -1,    -1,    -1,
     471,    -1,    -1,    -1,   475,    -1,    -1,    -1,  1580,    -1,
     375,    -1,   394,    -1,    -1,    -1,    -1,  1589,   400,  1591,
      -1,    -1,    -1,    -1,    -1,    -1,   408,    -1,    -1,   394,
      -1,    -1,    -1,    -1,    -1,   400,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   408,    -1,   516,    -1,    -1,    -1,   431,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   528,    -1,    -1,
      -1,   532,   444,   445,   535,    -1,   431,    -1,    -1,   540,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   444,
     445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1660,    -1,
      -1,    -1,    -1,    -1,   565,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   485,    -1,    -1,    -1,    -1,   579,    -1,
      -1,    -1,    -1,   556,    -1,    -1,    -1,    -1,    -1,    -1,
     485,    -1,    -1,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   513,    -1,    -1,    32,    33,    -1,    -1,    -1,    -1,
      38,    -1,    40,    -1,    42,    43,    -1,    -1,   513,    -1,
      -1,    -1,    -1,   535,    -1,   537,    -1,    -1,    -1,    -1,
      58,    -1,    -1,    -1,  1877,    -1,    -1,    -1,    -1,    -1,
     535,    -1,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1937,    -1,    -1,    -1,  1941,   127,
      -1,    -1,    -1,  1946,  1947,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1955,    -1,    -1,  1958,   144,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1968,    -1,  1970,  1971,    -1,
    1973,  1974,  1975,  1976,  1977,    -1,    -1,  1980,   166,    -1,
     168,    -1,    -1,    -1,    -1,    -1,  1989,    -1,    -1,    -1,
      -1,    -1,   180,   181,  1997,    -1,  1999,    -1,  2001,  2002,
    2003,  2004,    -1,    -1,    -1,  2008,  2009,  2010,    -1,    -1,
      -1,    -1,  2015,  2016,  2017,  1877,  2019,    -1,  2021,    -1,
    2023,    -1,  2025,    -1,  2027,    -1,    -1,    -1,    -1,  2032,
      -1,    -1,   220,    -1,    -1,    -1,    -1,    -1,    -1,  2042,
      -1,    -1,    -1,    -1,    -1,    -1,  2049,    -1,    -1,  2052,
      -1,    -1,    -1,    -1,    -1,  2058,    -1,    -1,  2061,    -1,
     248,    -1,  2065,    -1,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,    -1,  1937,    -1,    -1,    -1,  1941,
      -1,    -1,    -1,    -1,  1946,  1947,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1955,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,   290,   291,    -1,    -1,  1968,    -1,  1970,    -1,
      -1,  1973,  1974,  1975,  1976,  1977,    -1,    -1,    -1,   307,
     308,   309,    -1,    -1,    -1,   313,    -1,  1989,   316,    -1,
      -1,    -1,    -1,    -1,    -1,  1997,    -1,  1999,    -1,  2001,
    2002,  2003,    -1,    -1,   332,   333,  2008,  2009,  2010,    -1,
      -1,    -1,    -1,  2015,  2016,  2017,    -1,  2019,    -1,  2021,
      -1,  2023,    -1,  2025,    -1,  2027,    -1,    -1,    23,    -1,
    2032,    -1,    -1,    -1,    -1,    -1,   364,   365,    33,    34,
    2042,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2058,    -1,    -1,  2061,
     388,    -1,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    67,    -1,    69,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
      -1,    86,    -1,    88,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    96,    -1,    -1,    -1,    -1,    -1,   435,    -1,    -1,
      -1,   439,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   449,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,   142,   143,    -1,
      -1,    -1,   147,    -1,    -1,   150,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   499,    -1,    -1,   502,    59,    -1,   505,   506,   507,
     508,   176,    -1,   178,    -1,    -1,    70,    -1,   183,    -1,
     185,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   207,   208,    98,    -1,    -1,   212,    -1,   547,
     548,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   112,    -1,
      -1,   115,    -1,    -1,    -1,   230,    -1,    -1,    -1,    -1,
     568,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   251,    -1,    -1,   143,
      -1,    -1,    -1,    -1,  2407,    -1,    -1,    -1,  2411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
    2433,  2434,    -1,    -1,    -1,    -1,    -1,     6,    -1,   103,
     104,   105,   106,   107,    13,    -1,    -1,    -1,    -1,    -1,
    2453,    -1,    -1,    -1,    -1,   310,    25,    26,    -1,  2462,
      -1,  2464,    -1,  2466,   208,   320,    -1,    -1,    -1,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,    -1,  2481,    -1,
      -1,    -1,    -1,  2486,   339,    -1,    55,   231,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    -1,    -1,    -1,  2508,    -1,   362,    -1,    78,
      -1,    -1,    -1,    -1,    -1,  2518,    85,    -1,   373,   374,
      -1,    -1,   377,   378,    -1,    -1,    -1,    -1,    -1,    98,
      -1,    -1,    -1,   197,   198,   199,   200,    -1,    -1,   283,
      -1,    -1,    -1,   112,    -1,  2407,   115,    -1,    -1,  2411,
      -1,    -1,    -1,   122,    25,    26,   300,    -1,    -1,    -1,
     129,    -1,    -1,  2566,    -1,    -1,    -1,  2570,   137,    -1,
      -1,  2433,  2434,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,   436,    -1,    -1,    -1,    -1,    57,    58,    59,    -1,
      -1,  2453,    -1,   448,    -1,    66,    -1,    -1,    -1,    70,
    2462,   170,  2464,    -1,  2466,    -1,    -1,    78,   352,    -1,
    2613,    -1,    -1,    -1,    -1,    -1,   360,   472,    -1,    -1,
      -1,   476,    -1,    -1,    -1,    -1,    -1,    98,    -1,    -1,
      -1,   295,    -1,   297,   298,   299,  2639,    -1,   493,   208,
      -1,   112,   306,    -1,   115,    -1,  2508,   216,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,   423,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   549,    -1,    -1,    -1,    -1,    -1,
     555,    -1,    -1,    -1,  2566,    -1,    -1,    -1,  2570,    -1,
      -1,    -1,    -1,    -1,   283,    -1,   380,  2720,  2721,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   300,   476,    -1,    -1,   304,    -1,   208,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   216,    -1,   491,    -1,    -1,
     494,  2613,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     231,    -1,    -1,    -1,   428,   429,    -1,    -1,    -1,  2772,
      -1,    -1,    -1,    -1,   518,    -1,   345,  2639,    -1,    -1,
      -1,    -1,    -1,   352,    -1,   529,    -1,    -1,    -1,    -1,
      -1,   360,    -1,  2796,  2797,    -1,  2799,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2808,    -1,    -1,    -1,    -1,
    2813,    -1,   283,  2816,    -1,  2818,  2819,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   300,
      -1,    -1,    -1,   402,  2837,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2848,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   423,    -1,    -1,    -1,  2720,  2721,
      -1,    -1,    -1,    -1,    -1,    -1,  2869,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
      -1,    -1,   556,    -1,    -1,  2898,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   567,   568,    -1,    -1,   476,    -1,  2912,
    2772,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   491,    -1,    -1,   494,    -1,  2930,    -1,    -1,
      -1,    -1,    -1,    -1,  2796,  2797,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2808,    -1,    -1,   518,
      -1,  2813,   423,    -1,  2816,    -1,  2818,  2819,    -1,    -1,
     529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2848,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   476,    -1,  2869,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     491,    -1,    -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   518,    -1,    -1,
    2912,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   529,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2930,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3163,  3164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,    -1,
      -1,  3163,  3164,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3352,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3433,    -1,    -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3324,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3478,    -1,  3339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3490,    -1,    -1,
    3352,    -1,    -1,    -1,    -1,    -1,  3499,    -1,  3501,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3534,    -1,    -1,    -1,    -1,    -1,  3540,  3541,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3619,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3490,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3499,    -1,  3501,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3654,    -1,  3656,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3666,    -1,  3668,  3669,    -1,    -1,    -1,
      -1,    -1,  3534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3687,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3699,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3747,    -1,  3749,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3619,    -1,    -1,
      -1,  3764,  3765,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3778,    -1,    -1,    -1,    -1,
      -1,    -1,  3785,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3794,  3654,    -1,  3656,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3666,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3832,
    3833,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3845,  3846,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3859,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3885,    -1,    -1,  3747,    -1,    -1,    -1,  3892,
      -1,    -1,  3895,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3765,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3920,    -1,    -1,
      -1,    -1,    -1,  3785,  3927,    -1,  3929,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3939,    -1,    -1,  3942,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3952,
      -1,  3954,    -1,  3956,    -1,    -1,    -1,    -1,    -1,    -1,
    3963,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3972,
    3832,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3987,  3988,    -1,    -1,    -1,    -1,
    3993,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4003,  4004,    -1,    -1,    -1,  4008,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3892,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3920,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
    3942,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    44,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,  3993,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,   187,
      -1,   189,   190,    -1,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,
     218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,   237,
     238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,   510,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,
     568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,
     578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    92,    -1,    94,
      95,    -1,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,   204,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
     215,   216,   217,   218,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,    -1,    -1,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,   336,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,    -1,    -1,   494,
     495,   496,    -1,   498,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,    -1,   552,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,
      -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,
      -1,   586,   587,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    -1,    94,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,   154,    -1,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,
     572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,
     582,   583,    -1,    -1,   586,   587,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,    -1,    -1,   494,   495,   496,    -1,   498,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,
     579,   580,    -1,   582,   583,    -1,    -1,   586,   587,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    -1,    94,    95,
      -1,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,
     216,   217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,
      -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,
     586,   587,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,    -1,    -1,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,    -1,   552,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,
     573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,
     583,    -1,    -1,   586,   587,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    -1,    94,    95,    -1,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,   187,    -1,   189,
     190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
     240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,
      -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,
      -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,
      97,    98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,
     107,   108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,   160,   161,   162,    -1,   164,   165,   166,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
     187,    -1,   189,   190,    -1,   192,   193,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,
     217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,   315,   316,
     317,    -1,    -1,   320,   321,   322,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,   406,
     407,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,    -1,    -1,   494,   495,   496,
      -1,   498,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,   542,   543,   544,   545,   546,
      -1,    -1,   549,   550,    -1,   552,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,
      -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,
     587,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    -1,    -1,    90,    91,    92,    -1,
      94,    95,    -1,    97,    98,    99,   100,   101,   102,    -1,
      -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
     154,    -1,   156,   157,   158,   159,   160,   161,   162,    -1,
     164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,   193,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,
     544,   545,   546,    -1,    -1,   549,   550,    -1,   552,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,
      -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,
      -1,    -1,   586,   587,     5,    -1,     7,     8,     9,    10,
      11,    12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    -1,    -1,    90,
      91,    92,    -1,    94,    95,    -1,    97,    98,    99,   100,
     101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
      -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,   154,    -1,   156,   157,   158,   159,   160,
     161,   162,    -1,   164,   165,   166,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,   187,    -1,   189,   190,
      -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,   204,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,   240,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,    -1,    -1,   320,
     321,   322,   323,   324,    -1,   326,   327,   328,    -1,   330,
     331,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,   406,   407,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,   473,   474,   475,   476,    -1,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,    -1,    -1,   494,   495,   496,    -1,   498,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,   542,   543,   544,   545,   546,    -1,    -1,   549,   550,
      -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
      -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,
      -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      -1,    -1,    90,    91,    92,    -1,    94,    95,    -1,    97,
      98,    99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,   154,    -1,   156,   157,
     158,   159,   160,   161,   162,    -1,   164,   165,   166,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,   187,
      -1,   189,   190,    -1,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,
     218,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,   301,   302,    -1,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,   542,   543,   544,   545,   546,    -1,
      -1,   549,   550,    -1,   552,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,
     568,    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,
     578,   579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    -1,    -1,    90,    91,    92,    -1,    94,
      95,    -1,    97,    98,    99,   100,   101,   102,    -1,    -1,
      -1,    -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,   154,
      -1,   156,   157,   158,   159,   160,   161,   162,    -1,   164,
     165,   166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,   204,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
     215,   216,   217,   218,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,    -1,    -1,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,   406,   407,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,   473,   474,
     475,   476,    -1,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,    -1,    -1,   494,
     495,   496,    -1,   498,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,   542,   543,   544,
     545,   546,    -1,    -1,   549,   550,    -1,   552,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,
      -1,    -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,
      -1,   586,   587,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    -1,    -1,    90,    91,
      92,    -1,    94,    95,    -1,    97,    98,    99,   100,   101,
     102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,   154,    -1,   156,   157,   158,   159,   160,   161,
     162,    -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,
     192,   193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,   301,
     302,    -1,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,   406,   407,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
     542,   543,   544,   545,   546,    -1,    -1,   549,   550,    -1,
     552,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,
     572,   573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,
     582,   583,    -1,    -1,   586,   587,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    -1,
      -1,    90,    91,    92,    -1,    94,    95,    -1,    97,    98,
      99,   100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,
     109,    -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,
     159,   160,   161,   162,    -1,   164,   165,   166,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,   187,    -1,
     189,   190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,   204,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,   215,   216,   217,   218,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,   240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
     259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,    -1,
      -1,   320,   321,   322,   323,   324,    -1,   326,   327,   328,
      -1,   330,   331,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,    -1,    -1,   494,   495,   496,    -1,   498,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,
     549,   550,    -1,   552,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,
     579,    -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    -1,    -1,    90,    91,    92,    -1,    94,    95,
      -1,    97,    98,    99,   100,   101,   102,    -1,    -1,    -1,
      -1,   107,   108,   109,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,   154,    -1,
     156,   157,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,   187,    -1,   189,   190,    -1,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,   215,
     216,   217,   218,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,   240,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,   259,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,    -1,    -1,   320,   321,   322,   323,   324,    -1,
     326,   327,   328,    -1,   330,   331,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
     406,   407,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,   542,   543,   544,   545,
     546,    -1,    -1,   549,   550,    -1,   552,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,    -1,   568,    -1,    -1,    -1,   572,   573,    -1,    -1,
      -1,    -1,   578,   579,    -1,    -1,   582,   583,    -1,    -1,
     586,   587,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    -1,    -1,    90,    91,    92,
      -1,    94,    95,    -1,    97,    98,    99,   100,   101,   102,
      -1,    -1,    -1,    -1,   107,   108,   109,    -1,    -1,   112,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,   154,    -1,   156,   157,   158,   159,   160,   161,   162,
      -1,   164,   165,   166,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,   187,    -1,   189,   190,    -1,   192,
     193,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,   215,   216,   217,   218,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,   240,   241,   242,
      -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,   259,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,    -1,    -1,   320,   321,   322,
     323,   324,    -1,   326,   327,   328,    -1,   330,   331,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,   406,   407,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
     473,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,   542,
     543,   544,   545,   546,    -1,    -1,   549,   550,    -1,   552,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,    -1,    -1,   572,
     573,    -1,    -1,    -1,    -1,   578,   579,    -1,    -1,   582,
     583,    -1,    -1,   586,   587,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    -1,    -1,
      90,    91,    92,    -1,    94,    95,    -1,    97,    98,    99,
     100,   101,   102,    -1,    -1,    -1,    -1,   107,   108,   109,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,   154,    -1,   156,   157,   158,   159,
     160,   161,   162,    -1,   164,   165,   166,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,   187,    -1,   189,
     190,    -1,   192,   193,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,   215,   216,   217,   218,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
     240,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,   259,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,   301,   302,    -1,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,    -1,    -1,
     320,   321,   322,   323,   324,    -1,   326,   327,   328,    -1,
     330,   331,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,   542,   543,   544,   545,   546,    -1,    -1,   549,
     550,    -1,   552,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,
      -1,    -1,   572,   573,    -1,    -1,    -1,    -1,   578,   579,
      -1,    -1,   582,   583,    -1,    -1,   586,   587,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    80,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
     177,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,   208,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,   232,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,    -1,   244,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,    -1,
      -1,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,   455,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,    -1,   490,   491,    -1,    -1,   494,   495,   496,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,
     517,   518,   519,    -1,   521,   522,    -1,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,
      -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     587,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,   177,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,   208,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,   232,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,   455,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,   580,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,   580,    -1,    -1,    -1,    -1,    17,   586,   587,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,   579,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,   219,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,    -1,    -1,     5,   574,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,   587,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,   579,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,   586,   587,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,
      57,    -1,    59,    -1,    61,    62,    63,    64,    65,    -1,
      67,    68,    -1,    70,    71,    72,    73,    74,    75,    76,
      -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,
      87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,
     107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,
      -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,
      -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,
     137,    -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
     157,   158,    -1,    -1,   161,   162,    -1,   164,   165,   166,
      -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,   183,    -1,   185,    -1,
      -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,
      -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,
     207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,
     217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,
     227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,
      -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,
      -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,   256,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
      -1,   278,   279,    -1,   281,   282,   283,   284,    -1,   286,
     287,   288,    -1,    -1,    -1,   292,   293,   294,   295,   296,
      -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,
     307,   308,   309,   310,   311,   312,   313,    -1,    -1,   316,
     317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,
     327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,
     337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
      -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,
      -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,    -1,   400,   401,    -1,   403,   404,   405,    -1,
      -1,   408,    -1,   410,   411,   412,    -1,   414,   415,    -1,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,
     437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,
     447,   448,    -1,   450,   451,   452,   453,   454,    -1,    -1,
      -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,
     467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,
      -1,   478,   479,   480,   481,   482,    -1,    -1,   485,   486,
     487,   488,    -1,   490,   491,    -1,    -1,   494,   495,   496,
      -1,    -1,   499,   500,    -1,   502,   503,   504,   505,    -1,
      -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,
     517,   518,   519,    -1,   521,   522,    -1,   524,   525,    -1,
     527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,
      -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,
      -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,
      -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,
      -1,   568,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     587,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,
      61,    62,    63,    64,    65,    -1,    67,    68,    -1,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    -1,
      81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,
      -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,
      -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,
     121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,
     131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,
      -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,
     161,   162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,
      -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,
      -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,
     201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,
      -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,
     221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,
     231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,
     241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,
     251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,    -1,
     281,   282,   283,   284,    -1,   286,   287,   288,    -1,    -1,
      -1,   292,   293,   294,   295,   296,    -1,    -1,   299,   300,
      -1,   302,    -1,   304,    -1,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,
     321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,
      -1,    -1,   333,   334,   335,    -1,   337,   338,   339,    -1,
     341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,    -1,    -1,   369,   370,
     371,    -1,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,    -1,   400,
     401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,
     411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,    -1,   429,   430,
      -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,
     441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,
     461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,
     471,   472,    -1,    -1,   475,   476,    -1,   478,   479,   480,
     481,   482,    -1,    -1,   485,   486,   487,   488,    -1,   490,
     491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,
      -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,
     511,   512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,
     521,   522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,
     531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,
      -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,
      -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,
     561,   562,    -1,   564,   565,    -1,    -1,   568,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   587,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      -1,    56,    57,    -1,    59,    -1,    61,    62,    63,    64,
      65,    -1,    67,    68,    -1,    70,    71,    72,    73,    74,
      75,    76,    -1,    78,    79,    -1,    81,    82,    -1,    84,
      -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,
      -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,
      -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,
     115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,
      -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,
      -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,   144,
      -1,    -1,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,   164,
     165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,   183,    -1,
     185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,
     195,   196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,
      -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,
      -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,
      -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,
     235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,
      -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,
     255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,    -1,   278,   279,    -1,   281,   282,   283,   284,
      -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,   294,
     295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,
      -1,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
      -1,   316,   317,    -1,    -1,   320,   321,   322,   323,    -1,
      -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,
     335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,   382,    -1,    -1,
     385,    -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,    -1,   400,   401,    -1,   403,   404,
     405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,
     415,    -1,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,
     435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,
     445,   446,   447,   448,    -1,   450,   451,   452,   453,   454,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,
      -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,
     475,   476,    -1,   478,   479,   480,   481,   482,    -1,    -1,
     485,   486,   487,   488,    -1,   490,   491,    -1,    -1,   494,
     495,   496,    -1,    -1,   499,   500,    -1,   502,   503,   504,
     505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,
      -1,   516,   517,   518,   519,    -1,   521,   522,    -1,   524,
     525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,
      -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,
      -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,
     555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,
     565,    -1,    -1,   568,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   587,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,
      59,    -1,    61,    62,    63,    64,    65,    -1,    67,    68,
      -1,    70,    71,    72,    73,    74,    75,    76,    -1,    78,
      79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,
      -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,
      99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,
      -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,
     119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,
      -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,
     139,   140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,
     149,   150,   151,   152,   153,    -1,    -1,   156,   157,   158,
      -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,
     169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,
     189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,
      -1,   200,   201,   202,   203,    -1,    -1,   206,   207,    -1,
      -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,
      -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,
      -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,
      -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,
     249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,    -1,   278,
     279,    -1,   281,   282,   283,   284,    -1,   286,   287,   288,
      -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,
     299,   300,    -1,   302,    -1,   304,    -1,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,    -1,   316,   317,    -1,
      -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,   328,
      -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,
     339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   351,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,    -1,    -1,
     369,   370,   371,    -1,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
      -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,   408,
      -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,    -1,
     429,   430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,
      -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,
      -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,
      -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,   478,
     479,   480,   481,   482,    -1,    -1,   485,   486,   487,   488,
      -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,
     499,   500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,
      -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,
     519,    -1,   521,   522,    -1,   524,   525,    -1,   527,   528,
      -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,
     539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,
     549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,
      -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,   568,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   587,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,    -1,    -1,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
      -1,    -1,   475,   476,    -1,   478,   479,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,   522,
      -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,   586,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,    -1,
     568,    -1,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,   586,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,    62,
      63,    64,    65,    -1,    67,    68,    -1,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    -1,    81,    82,
      -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,
      -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,
      -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,
     113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,
     123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,
     133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,
     143,   144,    -1,    -1,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,
      -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
     183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,
      -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,
     203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,
      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,
     223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,
      -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,
     243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,
     253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,    -1,   278,   279,    -1,   281,   282,
     283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,
     293,   294,   295,   296,    -1,    -1,   299,   300,    -1,   302,
      -1,   304,    -1,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,
     323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,
     333,   334,   335,    -1,   337,   338,   339,    -1,   341,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,    -1,   369,   370,   371,    -1,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,   382,
      -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,
     403,   404,   405,    -1,    -1,   408,    -1,   410,   411,   412,
      -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,    -1,   429,   430,    -1,    -1,
      -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,
      -1,    -1,   445,   446,   447,   448,    -1,   450,   451,   452,
     453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,
      -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,
      -1,    -1,   475,   476,    -1,   478,   479,   480,   481,   482,
      -1,    -1,   485,   486,   487,   488,    -1,   490,   491,    -1,
      -1,   494,   495,   496,    -1,   498,   499,   500,    -1,   502,
     503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,
      -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,   522,
      -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,
      -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,
      -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,
     553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,
      -1,   564,   565,    -1,    -1,   568,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,   586,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
     228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,
     238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,    -1,   403,    -1,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,    -1,   414,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,    -1,   427,
      -1,   429,    -1,    -1,    -1,    -1,   434,   435,   436,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,    -1,   447,
      -1,    -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,    -1,   472,    -1,    -1,    -1,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,    -1,
      -1,    -1,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,   581,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,   574,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
     574,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,   574,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,   574,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,   109,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,   193,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,   259,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,    -1,    -1,   331,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,   457,
     458,   459,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,   520,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,   112,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,   145,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,   243,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,   440,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,   112,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    92,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,   243,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,   193,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,   498,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,   243,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,   243,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,   498,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,   243,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,   498,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      18,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
     498,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    83,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,   155,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,   112,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    57,    -1,    59,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    70,    71,    72,    73,    74,    75,
      76,    -1,    78,    79,    -1,    81,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,   108,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,   128,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,   153,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,   169,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,   189,   190,    -1,   192,    -1,    -1,   195,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,   217,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,   234,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,   327,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,   341,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   351,   352,   353,    -1,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,    -1,    -1,   369,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
      -1,    -1,   408,    -1,   410,   411,   412,    -1,   414,   415,
      -1,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,    -1,   429,   430,    -1,    -1,    -1,   434,   435,
     436,   437,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
     446,   447,   448,    -1,   450,   451,   452,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,   471,   472,    -1,    -1,   475,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
     516,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,   527,   528,    -1,    -1,   531,    -1,    -1,   534,    -1,
     536,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,   562,    -1,   564,   565,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    -1,    56,    57,    -1,    59,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    70,    71,    72,    73,
      74,    75,    76,    -1,    78,    79,    -1,    81,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,   108,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,   128,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,   153,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,    -1,
     164,   165,   166,    -1,    -1,   169,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,   189,   190,    -1,   192,    -1,
      -1,   195,   196,    -1,    -1,    -1,   200,   201,   202,   203,
      -1,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,   217,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,    -1,    -1,    -1,   231,    -1,    -1,
     234,   235,    -1,    -1,   238,    -1,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,   327,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,   341,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,   401,    -1,   403,
     404,   405,    -1,    -1,   408,    -1,   410,   411,   412,    -1,
     414,   415,    -1,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,    -1,   429,   430,    -1,    -1,    -1,
     434,   435,   436,   437,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,   446,   447,   448,    -1,   450,   451,   452,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,   471,   472,    -1,
      -1,   475,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,   498,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,   516,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,   527,   528,    -1,    -1,   531,    -1,    -1,
     534,    -1,   536,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,    -1,    -1,   561,   562,    -1,
     564,   565,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    -1,    56,    57,    -1,    59,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    70,    71,
      72,    73,    74,    75,    76,    -1,    78,    79,    -1,    81,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,    -1,
     112,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,   128,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,    -1,   164,   165,   166,    -1,    -1,   169,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,   189,   190,    -1,
     192,    -1,    -1,   195,   196,    -1,    -1,    -1,   200,   201,
     202,   203,    -1,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,    -1,    -1,    -1,   231,
      -1,    -1,   234,   235,    -1,    -1,   238,    -1,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,   327,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,   341,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,    -1,    -1,   369,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,   401,
      -1,   403,   404,   405,    -1,    -1,   408,    -1,   410,   411,
     412,    -1,   414,   415,    -1,    -1,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,    -1,   429,   430,    -1,
      -1,    -1,   434,   435,   436,   437,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,   446,   447,   448,    -1,   450,   451,
     452,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,   471,
     472,    -1,    -1,   475,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,   516,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,   527,   528,    -1,    -1,   531,
      -1,    -1,   534,    -1,   536,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,    -1,    -1,   561,
     562,    -1,   564,   565,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    -1,    56,    57,    -1,    59,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,
      -1,    81,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,   108,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,   128,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,   153,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,    -1,   164,   165,   166,    -1,    -1,   169,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,   189,
     190,    -1,   192,    -1,    -1,   195,   196,    -1,    -1,    -1,
     200,   201,   202,   203,    -1,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,   217,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,    -1,    -1,
      -1,   231,    -1,    -1,   234,   235,    -1,    -1,   238,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,   327,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   351,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,    -1,    -1,   369,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,   401,    -1,   403,   404,   405,    -1,    -1,   408,    -1,
     410,   411,   412,    -1,   414,   415,    -1,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,    -1,   429,
     430,    -1,    -1,    -1,   434,   435,   436,   437,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,   446,   447,   448,    -1,
     450,   451,   452,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,   471,   472,    -1,    -1,   475,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,   516,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,   527,   528,    -1,
      -1,   531,    -1,    -1,   534,    -1,   536,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,    -1,
      -1,   561,   562,    -1,   564,   565,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    -1,    56,    57,
      -1,    59,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    70,    71,    72,    73,    74,    75,    76,    -1,
      78,    79,    -1,    81,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
     108,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
     128,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,    -1,   164,   165,   166,    -1,
      -1,   169,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,   189,   190,    -1,   192,    -1,    -1,   195,   196,    -1,
      -1,    -1,   200,   201,   202,   203,    -1,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,   217,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
      -1,    -1,    -1,   231,    -1,    -1,   234,   235,    -1,    -1,
     238,    -1,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,   327,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,   341,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   351,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,    -1,
      -1,   369,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,   401,    -1,   403,   404,   405,    -1,    -1,
     408,    -1,   410,   411,   412,    -1,   414,   415,    -1,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
      -1,   429,   430,    -1,    -1,    -1,   434,   435,   436,   437,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,   446,   447,
     448,    -1,   450,   451,   452,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,   471,   472,    -1,    -1,   475,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,   516,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,   527,
     528,    -1,    -1,   531,    -1,    -1,   534,    -1,   536,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,    -1,    -1,   561,   562,    -1,   564,   565,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,   135,
     136,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,
      -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   353,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,    -1,   403,    -1,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,    -1,   414,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
      -1,   427,    -1,   429,    -1,    -1,    -1,    -1,   434,   435,
     436,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
      -1,   447,    -1,    -1,   450,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,    -1,    -1,    -1,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,   534,    -1,
      -1,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,   559,    -1,   561,    -1,    -1,   564,    -1,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,   135,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,
      -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
      -1,   405,   406,    -1,   408,    -1,    -1,   411,    -1,    -1,
     414,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,    -1,   427,    -1,   429,    -1,    -1,    -1,    -1,
     434,   435,   436,    -1,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,    -1,   447,    -1,    -1,   450,    -1,    -1,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,    -1,   472,    -1,
      -1,    -1,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,
     534,    -1,    -1,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,   557,    -1,   559,    -1,   561,    -1,    -1,
     564,    -1,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,   133,    -1,   135,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,   231,
      -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     352,   353,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
      -1,   403,    -1,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,    -1,   414,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,    -1,   427,    -1,   429,    -1,    -1,
      -1,    -1,   434,   435,   436,    -1,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,    -1,   447,    -1,    -1,   450,    -1,
      -1,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     472,    -1,    -1,    -1,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,   534,    -1,    -1,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,   557,    -1,   559,    -1,   561,
      -1,    -1,   564,    -1,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,   228,    -1,
      -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,    -1,   403,    -1,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,    -1,   414,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,    -1,   427,    -1,   429,
      -1,    -1,    -1,    -1,   434,   435,   436,    -1,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,    -1,   447,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,    -1,   472,    -1,    -1,    -1,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,   559,
      -1,   561,    -1,    -1,   564,    -1,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,   139,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
     228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,
     238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,    -1,   403,    -1,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,    -1,   414,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,    -1,   427,
      -1,   429,    -1,    -1,    -1,    -1,   434,   435,   436,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,    -1,   447,
      -1,    -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,    -1,   472,    -1,    -1,    -1,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,    -1,
      -1,    -1,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    63,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,   139,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,   163,   164,   165,
     166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,   200,   201,   202,   203,   204,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,   228,    -1,    -1,   231,    -1,    -1,    -1,   235,
      -1,    -1,   238,   239,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,   261,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,   339,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   353,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,    -1,   403,    -1,   405,
     406,    -1,   408,    -1,    -1,   411,    -1,    -1,   414,   415,
     416,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
      -1,   427,    -1,   429,    -1,    -1,    -1,    -1,   434,   435,
     436,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
      -1,   447,    -1,    -1,   450,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,    -1,    -1,    -1,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,   534,    -1,
      -1,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,   559,    -1,   561,    -1,    -1,   564,    -1,
      -1,     5,   568,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    -1,    56,    -1,    -1,    -1,    -1,    61,    62,    63,
      64,    65,    -1,    67,    68,    -1,    -1,    71,    -1,    73,
      74,    75,    76,    -1,    78,    79,    -1,    -1,    82,    -1,
      84,    -1,    -1,    87,    -1,    -1,    90,    -1,    -1,    -1,
      -1,    -1,    -1,    97,    98,    99,    -1,    -1,   102,    -1,
      -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,   113,
      -1,   115,    -1,    -1,    -1,   119,    -1,   121,   122,   123,
     124,    -1,    -1,    -1,    -1,    -1,    -1,   131,   132,   133,
      -1,    -1,    -1,   137,    -1,   139,   140,    -1,   142,   143,
     144,    -1,    -1,   147,    -1,   149,   150,   151,   152,    -1,
      -1,    -1,   156,   157,   158,    -1,    -1,   161,   162,   163,
     164,   165,   166,    -1,    -1,    -1,    -1,    -1,    -1,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,   183,
      -1,   185,    -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,   200,   201,   202,   203,
     204,    -1,   206,   207,    -1,    -1,   210,    -1,   212,    -1,
      -1,    -1,   216,    -1,    -1,    -1,    -1,   221,    -1,   223,
     224,    -1,   226,   227,   228,    -1,    -1,   231,    -1,    -1,
      -1,   235,    -1,    -1,   238,   239,    -1,   241,   242,    -1,
      -1,    -1,    -1,    -1,   248,   249,    -1,   251,    -1,   253,
      -1,   255,   256,    -1,    -1,    -1,    -1,   261,    -1,    -1,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,    -1,   278,   279,    -1,   281,   282,   283,
     284,    -1,   286,   287,   288,    -1,    -1,    -1,   292,   293,
     294,   295,   296,    -1,    -1,   299,   300,    -1,   302,    -1,
     304,    -1,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,    -1,   316,   317,    -1,    -1,   320,   321,   322,   323,
      -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,    -1,   333,
     334,   335,    -1,   337,   338,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   352,   353,
      -1,    -1,   356,   357,   358,    -1,   360,   361,   362,   363,
     364,   365,    -1,    -1,    -1,    -1,   370,   371,    -1,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,   382,    -1,
      -1,   385,    -1,    -1,    -1,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,    -1,   400,    -1,    -1,   403,
      -1,   405,   406,    -1,   408,    -1,    -1,   411,    -1,    -1,
     414,   415,   416,    -1,    -1,    -1,   420,   421,   422,   423,
     424,   425,    -1,   427,    -1,   429,    -1,    -1,    -1,    -1,
     434,   435,   436,    -1,    -1,    -1,    -1,   441,    -1,    -1,
      -1,   445,    -1,   447,    -1,    -1,   450,    -1,    -1,   453,
     454,    -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,
     464,    -1,    -1,   467,    -1,    -1,   470,    -1,   472,    -1,
      -1,    -1,   476,    -1,   478,   479,   480,   481,   482,    -1,
      -1,   485,   486,   487,   488,    -1,   490,   491,    -1,    -1,
     494,   495,   496,    -1,    -1,   499,   500,    -1,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,   511,   512,    -1,
      -1,    -1,    -1,   517,   518,   519,    -1,   521,   522,    -1,
     524,   525,    -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,
     534,    -1,    -1,    -1,   538,   539,    -1,    -1,    -1,    -1,
      -1,    -1,   546,    -1,    -1,   549,    -1,    -1,    -1,   553,
     554,   555,   556,    -1,    -1,   559,    -1,   561,    -1,    -1,
     564,    -1,    -1,     5,   568,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    -1,    56,    -1,    -1,    -1,    -1,    61,
      62,    63,    64,    65,    -1,    67,    68,    -1,    -1,    71,
      -1,    73,    74,    75,    76,    -1,    78,    79,    -1,    -1,
      82,    -1,    84,    -1,    -1,    87,    -1,    -1,    90,    -1,
      -1,    -1,    -1,    -1,    -1,    97,    98,    99,    -1,    -1,
     102,    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,
      -1,   113,    -1,   115,    -1,    -1,    -1,   119,    -1,   121,
     122,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,   131,
     132,   133,    -1,    -1,    -1,   137,    -1,   139,   140,    -1,
     142,   143,   144,    -1,    -1,   147,    -1,   149,   150,   151,
     152,    -1,    -1,    -1,   156,   157,   158,    -1,    -1,   161,
     162,   163,   164,   165,   166,    -1,    -1,    -1,    -1,    -1,
      -1,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,   183,    -1,   185,    -1,    -1,    -1,    -1,   190,    -1,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,   200,   201,
     202,   203,   204,    -1,   206,   207,    -1,    -1,   210,    -1,
     212,    -1,    -1,    -1,   216,    -1,    -1,    -1,    -1,   221,
      -1,   223,   224,    -1,   226,   227,   228,    -1,    -1,   231,
      -1,    -1,    -1,   235,    -1,    -1,   238,   239,    -1,   241,
     242,    -1,    -1,    -1,    -1,    -1,   248,   249,    -1,   251,
      -1,   253,    -1,   255,   256,    -1,    -1,    -1,    -1,   261,
      -1,    -1,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,    -1,   278,   279,    -1,   281,
     282,   283,   284,    -1,   286,   287,   288,    -1,    -1,    -1,
     292,   293,   294,   295,   296,    -1,    -1,   299,   300,    -1,
     302,    -1,   304,    -1,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,    -1,   316,   317,    -1,    -1,   320,   321,
     322,   323,    -1,    -1,    -1,    -1,   328,    -1,    -1,    -1,
      -1,   333,   334,   335,    -1,   337,   338,   339,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     352,   353,    -1,    -1,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,    -1,    -1,    -1,    -1,   370,   371,
      -1,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
     382,    -1,    -1,   385,    -1,    -1,    -1,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,    -1,   400,    -1,
      -1,   403,    -1,   405,   406,    -1,   408,    -1,    -1,   411,
      -1,    -1,   414,   415,   416,    -1,    -1,    -1,   420,   421,
     422,   423,   424,   425,    -1,   427,    -1,   429,    -1,    -1,
      -1,    -1,   434,   435,   436,    -1,    -1,    -1,    -1,   441,
      -1,    -1,    -1,   445,    -1,   447,    -1,    -1,   450,    -1,
      -1,   453,   454,    -1,    -1,    -1,    -1,    -1,    -1,   461,
     462,    -1,   464,    -1,    -1,   467,    -1,    -1,   470,    -1,
     472,    -1,    -1,    -1,   476,    -1,   478,   479,   480,   481,
     482,    -1,    -1,   485,   486,   487,   488,    -1,   490,   491,
      -1,    -1,   494,   495,   496,    -1,    -1,   499,   500,    -1,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,   511,
     512,    -1,    -1,    -1,    -1,   517,   518,   519,    -1,   521,
     522,    -1,   524,   525,    -1,    -1,    -1,    -1,    -1,   531,
      -1,    -1,   534,    -1,    -1,    -1,   538,   539,    -1,    -1,
      -1,    -1,    -1,    -1,   546,    -1,    -1,   549,    -1,    -1,
      -1,   553,   554,   555,   556,    -1,    -1,   559,    -1,   561,
      -1,    -1,   564,    -1,    -1,     5,   568,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    -1,    56,    -1,    -1,    -1,
      -1,    61,    62,    63,    64,    65,    -1,    67,    68,    -1,
      -1,    71,    -1,    73,    74,    75,    76,    -1,    78,    79,
      -1,    -1,    82,    -1,    84,    -1,    -1,    87,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,    -1,    97,    98,    99,
      -1,    -1,   102,    -1,    -1,    -1,    -1,   107,    -1,    -1,
      -1,    -1,    -1,   113,    -1,   115,    -1,    -1,    -1,   119,
      -1,   121,   122,   123,   124,    -1,    -1,    -1,    -1,    -1,
      -1,   131,   132,   133,    -1,    -1,    -1,   137,    -1,    -1,
     140,    -1,   142,   143,   144,    -1,    -1,   147,    -1,   149,
     150,   151,   152,    -1,    -1,    -1,   156,   157,   158,    -1,
      -1,   161,   162,   163,   164,   165,   166,    -1,    -1,    -1,
      -1,    -1,    -1,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,   183,    -1,   185,    -1,    -1,    -1,    -1,
     190,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
     200,   201,   202,   203,   204,    -1,   206,   207,    -1,    -1,
     210,    -1,   212,    -1,    -1,    -1,   216,    -1,    -1,    -1,
      -1,   221,    -1,   223,   224,    -1,   226,   227,   228,    -1,
      -1,   231,    -1,    -1,    -1,   235,    -1,    -1,   238,   239,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   248,   249,
      -1,   251,    -1,   253,    -1,   255,   256,    -1,    -1,    -1,
      -1,   261,    -1,    -1,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,    -1,   278,   279,
      -1,   281,   282,   283,   284,    -1,   286,   287,   288,    -1,
      -1,    -1,   292,   293,   294,   295,   296,    -1,    -1,   299,
     300,    -1,   302,    -1,   304,    -1,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,    -1,   316,   317,    -1,    -1,
     320,   321,   322,   323,    -1,    -1,    -1,    -1,   328,    -1,
      -1,    -1,    -1,   333,   334,   335,    -1,   337,   338,   339,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   352,   353,    -1,    -1,   356,   357,   358,    -1,
     360,   361,   362,   363,   364,   365,    -1,    -1,    -1,    -1,
     370,   371,    -1,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,   382,    -1,    -1,   385,    -1,    -1,    -1,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,    -1,
     400,    -1,    -1,   403,    -1,   405,   406,    -1,   408,    -1,
      -1,   411,    -1,    -1,   414,   415,   416,    -1,    -1,    -1,
     420,   421,   422,   423,   424,   425,    -1,   427,    -1,   429,
      -1,    -1,    -1,    -1,   434,   435,   436,    -1,    -1,    -1,
      -1,   441,    -1,    -1,    -1,   445,    -1,   447,    -1,    -1,
     450,    -1,    -1,   453,   454,    -1,    -1,    -1,    -1,    -1,
      -1,   461,   462,    -1,   464,    -1,    -1,   467,    -1,    -1,
     470,    -1,   472,    -1,    -1,    -1,   476,    -1,   478,   479,
     480,   481,   482,    -1,    -1,   485,   486,   487,   488,    -1,
     490,   491,    -1,    -1,   494,   495,   496,    -1,    -1,   499,
     500,    -1,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,   511,   512,    -1,    -1,    -1,    -1,   517,   518,   519,
      -1,   521,   522,    -1,   524,   525,    -1,    -1,    -1,    -1,
      -1,   531,    -1,    -1,   534,    -1,    -1,    -1,   538,   539,
      -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,    -1,   549,
      -1,    -1,    -1,   553,   554,   555,   556,    -1,    -1,   559,
      -1,   561,    -1,    -1,   564,    -1,    -1,     5,   568,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    -1,    56,    -1,
      -1,    -1,    -1,    61,    62,    63,    64,    65,    -1,    67,
      68,    -1,    -1,    71,    -1,    73,    74,    75,    76,    -1,
      78,    79,    -1,    -1,    82,    -1,    84,    -1,    -1,    87,
      -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,    -1,    97,
      98,    99,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
      -1,    -1,    -1,    -1,    -1,   113,    -1,   115,    -1,    -1,
      -1,   119,    -1,   121,   122,   123,   124,    -1,    -1,    -1,
      -1,    -1,    -1,   131,   132,   133,    -1,    -1,    -1,   137,
      -1,    -1,   140,    -1,   142,   143,   144,    -1,    -1,   147,
      -1,   149,   150,   151,   152,    -1,    -1,    -1,   156,   157,
     158,    -1,    -1,   161,   162,   163,   164,   165,   166,    -1,
      -1,    -1,    -1,    -1,    -1,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,   183,    -1,   185,    -1,    -1,
      -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,   200,   201,   202,   203,   204,    -1,   206,   207,
      -1,    -1,   210,    -1,   212,    -1,    -1,    -1,   216,    -1,
      -1,    -1,    -1,   221,    -1,   223,   224,    -1,   226,   227,
     228,    -1,    -1,   231,    -1,    -1,    -1,   235,    -1,    -1,
     238,   239,    -1,   241,   242,    -1,    -1,    -1,    -1,    -1,
     248,   249,    -1,   251,    -1,   253,    -1,   255,   256,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,    -1,
     278,   279,    -1,   281,   282,   283,   284,    -1,   286,   287,
     288,    -1,    -1,    -1,   292,   293,   294,   295,   296,    -1,
      -1,   299,   300,    -1,   302,    -1,   304,    -1,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,    -1,   316,   317,
      -1,    -1,   320,   321,   322,   323,    -1,    -1,    -1,    -1,
     328,    -1,    -1,    -1,    -1,   333,   334,   335,    -1,   337,
     338,   339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   352,   353,    -1,    -1,   356,   357,
     358,    -1,   360,   361,   362,   363,   364,   365,    -1,    -1,
      -1,    -1,   370,   371,    -1,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,   382,    -1,    -1,   385,    -1,    -1,
      -1,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,    -1,   400,    -1,    -1,   403,    -1,   405,   406,    -1,
     408,    -1,    -1,   411,    -1,    -1,   414,   415,   416,    -1,
      -1,    -1,   420,   421,   422,   423,   424,   425,    -1,   427,
      -1,   429,    -1,    -1,    -1,    -1,   434,   435,   436,    -1,
      -1,    -1,    -1,   441,    -1,    -1,    -1,   445,    -1,   447,
      -1,    -1,   450,    -1,    -1,   453,   454,    -1,    -1,    -1,
      -1,    -1,    -1,   461,   462,    -1,   464,    -1,    -1,   467,
      -1,    -1,   470,    -1,   472,    -1,    -1,    -1,   476,    -1,
     478,   479,   480,   481,   482,    -1,    -1,   485,   486,   487,
     488,    -1,   490,   491,    -1,    -1,   494,   495,   496,    -1,
      -1,   499,   500,    -1,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,   511,   512,    -1,    -1,    -1,    -1,   517,
     518,   519,    -1,   521,   522,    -1,   524,   525,    -1,    -1,
      -1,    -1,    -1,   531,    -1,    -1,   534,    -1,    -1,    -1,
     538,   539,    -1,    -1,    -1,    -1,    -1,    -1,   546,    -1,
      -1,   549,    -1,    -1,    -1,   553,   554,   555,   556,    -1,
      -1,   559,    -1,   561,    -1,    -1,   564,    -1,    -1,     5,
     568,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    54,    -1,
      56,    -1,    -1,    -1,    -1,    61,    62,    -1,    64,    65,
      -1,    67,    68,    -1,    -1,    71,    -1,    73,    74,    75,
      76,    -1,    78,    79,    -1,    -1,    82,    -1,    84,    -1,
      -1,    87,    -1,    -1,    90,    -1,    -1,    -1,    -1,    -1,
      -1,    97,    98,    99,    -1,    -1,   102,    -1,    -1,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,   113,    -1,   115,
      -1,    -1,    -1,   119,    -1,   121,   122,   123,   124,    -1,
      -1,    -1,    -1,    -1,    -1,   131,   132,   133,    -1,    -1,
      -1,   137,    -1,    -1,   140,    -1,   142,   143,   144,    -1,
      -1,   147,    -1,   149,   150,   151,   152,    -1,    -1,    -1,
     156,   157,   158,    -1,    -1,   161,   162,    -1,   164,   165,
     166,    -1,    -1,    -1,    -1,    -1,    -1,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,   183,    -1,   185,
      -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,   200,   201,   202,   203,    -1,    -1,
     206,   207,    -1,    -1,   210,    -1,   212,    -1,    -1,    -1,
     216,    -1,    -1,    -1,    -1,   221,    -1,   223,   224,    -1,
     226,   227,    -1,    -1,    -1,   231,    -1,    -1,    -1,   235,
      -1,    -1,   238,    -1,    -1,   241,   242,    -1,    -1,    -1,
      -1,    -1,   248,   249,    -1,   251,    -1,   253,    -1,   255,
     256,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,    -1,   278,   279,    -1,   281,   282,   283,   284,    -1,
     286,   287,   288,    -1,    -1,    -1,   292,   293,   294,   295,
     296,    -1,    -1,   299,   300,    -1,   302,    -1,   304,    -1,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,    -1,
     316,   317,    -1,    -1,   320,   321,   322,   323,    -1,    -1,
      -1,    -1,   328,    -1,    -1,    -1,    -1,   333,   334,   335,
      -1,   337,   338,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   352,   353,    -1,    -1,
     356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
      -1,    -1,    -1,    -1,   370,   371,    -1,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,   382,    -1,    -1,   385,
      -1,    -1,    -1,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,    -1,   400,    -1,    -1,   403,    -1,   405,
      -1,    -1,   408,    -1,    -1,   411,    -1,    -1,   414,   415,
      -1,    -1,    -1,    -1,   420,   421,   422,   423,   424,   425,
      -1,   427,    -1,   429,    -1,    -1,    -1,    -1,   434,   435,
     436,    -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   445,
      -1,   447,    -1,    -1,   450,    -1,    -1,   453,   454,    -1,
      -1,    -1,    -1,    -1,    -1,   461,   462,    -1,   464,    -1,
      -1,   467,    -1,    -1,   470,    -1,   472,    -1,    -1,    -1,
     476,    -1,   478,   479,   480,   481,   482,    -1,    -1,   485,
     486,   487,   488,    -1,   490,   491,    -1,    -1,   494,   495,
     496,    -1,    -1,   499,   500,    -1,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,   511,   512,    -1,    -1,    -1,
      -1,   517,   518,   519,    -1,   521,   522,    -1,   524,   525,
      -1,    -1,    -1,    -1,    -1,   531,    -1,    -1,   534,    -1,
      -1,    -1,   538,   539,    -1,    -1,    -1,    -1,    -1,    -1,
     546,    -1,    -1,   549,    -1,    -1,    -1,   553,   554,   555,
     556,    -1,    -1,    -1,    -1,   561,    -1,    -1,   564,    -1,
      -1,    -1,   568
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    28,    30,    34,    48,    49,    55,    59,
      60,    72,    88,   108,   116,   117,   118,   128,   129,   141,
     153,   169,   184,   189,   192,   215,   217,   233,   250,   254,
     340,   359,   369,   379,   399,   402,   404,   407,   410,   412,
     417,   419,   426,   431,   439,   444,   448,   471,   475,   516,
     528,   532,   535,   540,   565,   579,   590,   593,   594,   595,
     596,   597,   599,   604,   606,   611,   639,   771,   907,   945,
     948,   956,   958,   960,   963,   968,   970,   971,   976,   979,
     984,   988,   996,   997,  1146,  1148,  1156,  1159,  1184,  1192,
    1203,  1209,  1222,  1225,  1228,  1234,  1238,  1242,  1244,  1245,
    1291,  1308,  1314,  1316,  1323,  1325,  1350,  1356,  1357,  1358,
    1359,  1406,  1414,  1415,    11,    95,   113,   178,   205,   255,
     374,   437,   491,   941,  1375,  1376,  1377,  1380,   251,   329,
     978,   490,   493,  1310,  1351,   498,  1282,   208,     5,     7,
       8,     9,    10,    11,    17,    20,    22,    23,    24,    25,
      26,    27,    28,    30,    34,    38,    41,    42,    43,    45,
      47,    48,    51,    54,    56,    57,    59,    61,    62,    63,
      64,    65,    67,    68,    70,    71,    72,    73,    74,    75,
      76,    78,    79,    81,    82,    84,    87,    90,    97,    98,
      99,   102,   107,   108,   113,   115,   119,   121,   122,   123,
     124,   128,   131,   132,   133,   137,   139,   140,   142,   143,
     144,   147,   149,   150,   151,   152,   153,   156,   157,   158,
     161,   162,   164,   165,   166,   169,   173,   174,   176,   178,
     180,   181,   182,   183,   185,   189,   190,   192,   195,   196,
     200,   201,   202,   203,   206,   207,   210,   212,   216,   217,
     221,   223,   224,   226,   227,   231,   234,   235,   238,   241,
     242,   248,   249,   251,   253,   255,   256,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     278,   279,   281,   282,   283,   284,   286,   287,   288,   292,
     293,   294,   295,   296,   299,   300,   302,   304,   306,   307,
     308,   309,   310,   311,   312,   313,   316,   317,   320,   321,
     322,   323,   327,   328,   333,   334,   335,   337,   338,   339,
     341,   351,   352,   353,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   369,   370,   371,   373,
     375,   376,   377,   378,   380,   381,   382,   385,   389,   390,
     391,   392,   393,   396,   397,   398,   400,   401,   403,   404,
     405,   408,   410,   411,   412,   414,   415,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   429,   430,   434,   435,
     436,   437,   441,   445,   446,   447,   448,   450,   451,   452,
     453,   454,   461,   462,   464,   467,   470,   471,   472,   475,
     476,   478,   479,   480,   481,   482,   485,   486,   487,   488,
     490,   491,   494,   495,   496,   499,   500,   502,   503,   504,
     505,   511,   512,   516,   517,   518,   519,   521,   522,   524,
     525,   527,   528,   531,   534,   536,   538,   539,   546,   549,
     553,   554,   555,   556,   561,   562,   564,   565,   568,   633,
    1281,  1285,  1289,  1290,   278,  1310,  1310,   561,  1352,    95,
     177,   255,   437,   455,   491,   495,   530,   538,   615,   616,
     819,   820,   821,   894,  1193,  1147,    95,   151,   178,   208,
     255,   374,   437,   491,   495,   513,   538,   553,  1155,  1285,
     978,   632,   587,  1279,  1280,  1285,   605,  1157,   363,    78,
     381,  1243,    98,   208,   493,  1310,   978,   772,  1285,  1239,
     426,   538,  1310,   978,  1160,  1235,  1310,   632,  1352,  1285,
     999,  1001,  1002,   342,  1293,  1210,   471,   475,   448,   511,
     448,   493,  1204,   363,  1315,  1185,  1285,    30,    72,   139,
     369,   390,   419,   471,  1408,   431,   579,   998,     0,   141,
     591,   369,   157,   358,  1226,  1279,  1285,   145,   918,  1285,
     145,   633,   186,   633,   243,  1282,  1285,  1287,   720,   721,
     724,   747,  1285,   493,   151,   913,  1375,  1310,   959,  1352,
     985,   986,  1279,   640,   587,   509,   961,   972,    16,  1353,
     204,   822,   186,  1287,   722,   747,   632,   347,  1372,  1376,
    1377,  1378,  1379,  1380,   493,   820,   208,   205,   262,   382,
    1201,  1202,     7,    20,    27,    33,    35,    36,    37,    39,
      52,    53,    57,    58,    64,    67,    81,    85,    86,    91,
      92,    94,    95,   100,   101,   102,   107,   109,   112,   154,
     159,   160,   167,   180,   182,   187,   193,   200,   204,   215,
     218,   240,   248,   259,   280,   285,   295,   299,   301,   305,
     306,   307,   308,   309,   315,   324,   325,   326,   330,   331,
     335,   354,   360,   364,   365,   367,   380,   406,   407,   418,
     424,   429,   473,   474,   479,   483,   484,   489,   498,   502,
     503,   504,   505,   514,   515,   516,   520,   523,   538,   542,
     543,   544,   545,   550,   552,   556,   568,   572,   573,   578,
     579,   582,   583,   586,   587,  1017,  1018,  1019,  1020,  1024,
    1027,  1028,  1029,  1030,  1031,  1032,  1040,  1044,  1054,  1266,
    1268,  1270,  1271,  1275,  1277,  1281,  1285,   204,  1154,  1154,
    1154,  1285,   186,  1154,  1154,   747,  1154,   632,  1154,  1310,
     600,  1229,    12,    13,    88,   116,   129,   151,   153,   164,
     184,   208,   215,   254,   375,   394,   400,   408,   431,   444,
     445,   485,   513,   535,   537,  1326,  1328,  1330,  1331,  1285,
     339,    63,   386,   587,  1287,   114,   194,   262,  1162,  1285,
    1017,  1246,   219,  1279,  1309,  1310,    46,   773,   175,    33,
     278,  1214,  1240,  1285,   632,   980,  1310,   114,   262,  1163,
    1191,   278,   381,   448,  1236,  1237,   957,    12,  1324,  1328,
     509,  1353,  1000,    12,   125,   194,   460,   461,   462,   463,
     464,   465,   477,  1006,  1007,  1008,  1292,    23,    34,    57,
      58,    67,    69,    84,    86,    88,    96,   143,   147,   150,
     176,   178,   183,   185,   207,   208,   212,   230,   251,   278,
     310,   320,   339,   362,   373,   374,   377,   378,   436,   448,
     476,   493,   555,   867,   893,  1211,  1214,  1215,  1217,  1299,
     950,   951,   950,   950,   560,   949,   950,  1151,  1279,  1285,
    1310,  1191,    35,   193,   498,  1267,  1283,  1407,  1407,  1407,
    1407,  1407,  1001,   998,   580,   585,  1285,  1224,  1223,   294,
     496,   522,   909,   536,    92,  1287,  1288,   911,   726,   748,
    1285,   910,   341,     6,    55,   129,   325,   385,   387,   749,
    1279,   633,   466,  1381,  1382,   912,   969,  1150,  1151,   222,
     581,   992,   993,   579,   641,  1285,   607,  1150,  1150,    54,
     327,   327,   399,  1354,   324,   325,  1023,  1285,   725,   748,
     171,     6,  1288,  1341,  1342,   407,    10,   151,   374,   513,
     619,  1012,  1374,  1382,  1390,  1394,  1395,  1401,   619,  1012,
    1373,  1382,  1390,  1395,  1401,  1375,  1380,   822,  1285,   175,
    1194,  1198,  1199,  1285,  1201,   579,   579,   579,  1027,   579,
     579,   579,  1017,  1057,   579,   579,   579,   579,   579,   579,
     579,   579,   579,  1016,  1016,   579,  1016,   579,   579,   579,
     523,   579,  1266,   579,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   579,  1017,   579,   579,   579,  1055,  1056,
    1275,  1285,   579,   579,   579,   579,   579,   579,   579,   579,
     579,  1017,   579,  1016,   579,   579,   579,   579,   579,   579,
     579,   579,   579,   579,   579,   579,   579,   579,   579,   579,
     579,  1016,   579,  1266,   579,   579,   579,  1266,   579,   579,
      35,   193,   498,   579,  1016,  1016,  1016,   579,   579,   579,
     579,   579,  1027,  1027,  1027,   431,   579,  1017,  1369,  1285,
    1045,  1285,    15,    16,   344,   347,   566,  1021,  1022,   145,
     146,   179,   188,   225,   236,   263,   318,  1025,    31,   126,
     222,   244,   305,   395,   442,   443,   453,   570,   571,   572,
     573,   574,   575,   576,   577,  1023,  1027,    66,   346,   581,
    1283,   579,   587,   154,  1285,   633,  1285,   336,   748,   633,
    1287,   758,  1215,   633,  1288,  1340,  1150,  1154,   541,   601,
     119,   196,   256,   278,   373,   381,   411,   448,   472,   490,
    1230,  1231,  1310,   373,  1329,   421,   421,   495,   538,   553,
     342,  1333,   490,  1335,    62,   448,  1332,    96,   553,  1334,
     336,   581,    18,   145,  1101,  1102,  1317,  1285,   941,   452,
      76,   175,   262,  1247,  1253,    48,   175,  1279,  1311,  1312,
     977,   246,   249,   383,   774,   778,   586,   598,  1282,   256,
     981,  1288,   982,   983,  1279,   964,   219,  1151,  1164,  1165,
      48,   581,  1150,  1329,   336,   426,  1355,  1354,   529,  1360,
    1361,   574,  1010,  1011,  1012,  1008,  1294,  1295,  1296,   150,
     439,   244,   558,  1221,   517,   579,    95,   151,   178,   374,
     493,   513,   553,  1221,    12,   830,  1287,   245,  1120,  1122,
     175,   222,  1216,  1218,    65,   472,   172,   472,   472,   472,
     278,   490,    65,   472,    12,    41,    82,    87,   224,   293,
     353,   454,   487,  1205,  1206,  1207,   196,   472,   472,   517,
    1120,  1221,  1218,   256,   142,    68,   363,   376,   490,   512,
     472,   549,   947,   398,   467,   952,   953,   946,    79,   941,
     581,   338,  1410,   486,  1411,   229,   414,  1409,   580,  1361,
    1363,  1364,  1365,   141,   592,   996,  1227,  1267,  1285,   112,
     817,   818,   827,   828,   876,    98,  1016,   586,   634,     6,
     727,   634,   579,    97,   744,   744,   744,     4,   908,   914,
     430,   553,  1382,  1150,   509,   581,   112,   987,  1285,   986,
     208,   232,   891,   994,   642,   643,  1017,   264,   265,   266,
     267,   268,   269,   271,   272,   273,   274,   275,   276,   277,
     279,   396,   397,   608,   609,   610,   157,   382,   962,    56,
     157,   161,   172,   292,   382,   973,   974,   975,    54,   399,
     154,   614,   727,    98,   744,   202,   581,  1012,   822,  1012,
    1012,   178,   178,  1382,  1279,   895,   896,  1152,  1153,  1279,
     581,  1196,   587,  1200,  1017,  1017,    12,   125,  1050,  1103,
    1050,  1050,  1050,   557,  1059,  1017,  1017,  1054,  1054,  1017,
    1017,  1017,   125,  1050,  1103,   580,  1017,   580,  1017,  1017,
    1017,  1017,  1275,   579,  1369,   103,   104,   105,   106,   107,
     197,   198,   199,   200,   295,   297,   298,   299,   306,   380,
     428,   429,   556,   567,   568,  1097,  1099,  1054,    99,   102,
     502,   505,  1100,   125,  1047,  1017,  1017,  1017,  1017,  1097,
    1017,  1054,  1056,     9,   581,   587,   125,  1050,  1017,  1017,
     125,  1050,  1017,  1017,  1054,  1054,  1054,  1017,  1017,  1017,
    1017,  1054,  1020,  1017,  1017,  1017,  1017,  1017,  1017,  1050,
    1050,  1017,  1017,   125,  1050,  1017,  1017,   174,  1098,  1099,
    1098,  1017,    44,   237,   510,  1017,  1017,   580,  1276,  1277,
    1285,  1050,  1050,  1017,  1017,  1370,  1370,   580,   581,   580,
    1017,   586,  1046,  1287,   587,  1017,  1017,  1017,  1019,   160,
     330,   515,   531,  1023,    12,    17,  1019,  1026,  1020,  1020,
     579,  1027,  1020,  1020,  1020,  1020,   244,  1020,  1020,   218,
    1020,   218,  1020,  1020,  1020,  1020,  1020,    31,   222,   244,
     395,  1287,  1027,  1017,  1033,  1285,   587,  1279,   758,   328,
     554,   759,   760,   143,   581,    50,   413,   942,  1150,   586,
     602,   603,    48,   560,   581,  1232,   490,   579,  1343,  1343,
    1343,  1343,   178,   374,   493,  1327,  1331,  1285,   165,   321,
    1285,  1318,  1319,  1164,  1282,   278,   251,  1252,   989,   278,
    1102,   581,  1150,   777,   776,   358,   784,   190,   232,  1287,
      29,   509,  1241,   581,   509,   581,   509,  1150,  1165,  1161,
    1237,   175,   581,   178,   374,  1327,  1285,    12,   125,  1367,
     581,  1003,  1014,  1017,  1273,  1285,   581,   183,   251,   337,
     436,  1297,  1298,  1301,  1302,   222,  1219,  1282,  1017,   574,
     822,   633,   633,   633,  1279,   633,  1279,   256,   310,   472,
    1213,  1213,   259,   331,   520,  1123,  1124,  1268,  1221,  1285,
     633,  1221,  1288,   172,  1216,   633,  1221,   223,   488,   162,
     172,  1208,   581,  1216,  1279,  1218,  1216,  1216,  1221,  1221,
     534,   954,   581,   954,   450,   431,   579,   583,  1060,  1061,
    1062,  1063,  1064,  1073,  1074,  1081,  1267,   361,  1412,   345,
    1116,  1122,  1366,   818,    66,   867,   121,  1287,    70,    81,
     234,   303,   327,   384,   466,   636,   638,   391,   524,   745,
     746,   210,   741,   742,   743,   750,   758,   760,    95,   195,
     351,   360,   366,   451,   538,   617,   618,  1282,    24,   284,
     735,   736,   737,   750,   751,   752,   758,   760,   728,   729,
     735,     6,    13,    14,    25,    26,    55,    59,    60,    64,
      70,    78,    85,    98,   115,   122,   123,   129,   137,   143,
     170,   206,   208,   216,   231,   283,   300,   304,   340,   345,
     352,   359,   360,   389,   401,   402,   403,   404,   423,   476,
     491,   494,   518,   529,   769,   824,   826,   827,   828,   919,
     923,   925,   928,   934,   935,   936,  1112,   336,   627,   915,
     113,   221,  1279,  1282,  1151,   579,   580,   581,   145,   145,
     145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
     145,   145,   145,   145,   581,   536,   974,   816,   817,    70,
     322,   392,   525,   738,   739,   740,   750,   754,   755,   756,
     757,   758,   760,   562,   540,   723,    46,  1342,   178,   633,
     633,   633,   633,  1285,   612,   518,   541,   899,   336,   581,
    1197,  1195,  1199,   175,   574,  1285,  1102,   581,   580,  1050,
     580,  1051,   580,   580,   580,  1017,   135,   557,  1058,    18,
     580,   541,   580,   580,   580,   581,   541,   581,  1041,   580,
     574,   580,   581,   581,   580,   580,   580,   580,   175,   580,
     581,  1043,   580,   581,   581,   581,   573,   581,   580,   580,
     579,  1275,  1285,  1050,   580,   580,   580,  1050,   580,   581,
     580,   580,   580,   580,   580,   580,   580,   581,   580,   222,
     580,   581,   581,   581,   581,   580,   580,   580,   581,   175,
     581,  1050,   580,   580,   580,   581,   581,   581,   580,   175,
    1017,   175,  1017,   175,  1017,   175,   580,   581,   580,   580,
     580,   580,   581,   580,   999,   998,  1054,   584,   183,   251,
     436,  1300,   440,  1285,   160,   330,   515,   531,   579,    16,
    1017,  1369,   149,  1108,  1020,  1017,  1017,  1020,   579,  1027,
    1020,  1012,  1037,  1038,  1039,   579,   587,  1285,  1149,   759,
     145,   440,  1175,  1176,  1288,   942,  1287,   581,   386,  1231,
    1150,  1233,  1285,  1344,  1345,   574,  1279,  1285,  1339,  1339,
    1339,   145,   165,   179,   188,   235,   236,   263,   321,   371,
    1320,  1322,   558,  1104,  1158,   209,   990,   991,  1279,   262,
     386,   563,  1313,  1312,   579,   782,   782,   109,   167,   193,
     259,   331,   520,  1127,  1130,  1131,   482,   785,   775,   579,
    1017,  1282,  1288,  1288,   983,  1279,   157,   382,   539,   965,
     966,   967,   431,   439,   545,   546,   579,   812,  1166,  1169,
    1282,   184,  1339,  1339,  1339,  1362,  1011,   175,   219,  1004,
    1005,  1115,  1116,  1141,  1013,   587,  1295,   112,   511,  1285,
    1304,   311,   360,   586,   867,  1303,  1282,   175,  1220,   580,
    1285,   334,   581,   448,  1221,   381,  1120,  1207,  1221,  1216,
    1279,  1221,  1221,   610,   955,   953,  1080,  1285,    89,   211,
     229,   240,   314,   418,   477,  1072,   439,   581,  1279,  1080,
     581,   172,  1413,    46,  1120,  1176,  1176,   312,  1282,   466,
     466,   466,   466,   466,   430,  1282,  1282,  1176,   581,   743,
    1282,  1282,  1282,  1282,   109,   167,   193,   259,   331,   520,
    1126,  1282,  1282,   580,   581,  1176,  1176,   581,   737,   730,
     731,   750,   751,   752,    69,    80,   177,   359,   455,   838,
     841,   842,   889,   891,   940,   940,   359,  1176,  1176,   940,
    1176,   359,   359,  1176,  1176,   509,   121,  1176,   230,   491,
     171,   359,   372,   891,   940,   230,  1176,   491,   121,  1176,
    1176,  1176,  1176,   940,   359,    46,  1176,   770,  1176,   359,
     357,    18,   145,   509,   944,   359,   359,  1176,   124,   293,
    1285,  1176,  1176,  1176,   824,   581,   768,   769,   923,   579,
     587,   837,   843,  1278,  1285,    74,   427,   402,   916,  1383,
     372,  1093,  1094,  1095,  1285,  1017,  1126,  1282,  1282,   109,
     167,   259,   331,   520,  1128,  1282,  1126,  1282,  1282,  1282,
    1282,  1282,  1126,  1126,  1282,  1282,  1126,   609,  1176,  1176,
    1176,  1176,   581,   740,  1287,   255,   158,   732,   733,   734,
     750,   751,   752,   753,   756,   757,   758,   760,   360,   498,
    1285,   620,  1402,     8,    29,   718,   579,   415,   244,   579,
     762,   823,   825,   826,    45,   190,   425,   901,   901,  1279,
    1153,  1279,   541,  1104,  1061,   587,  1200,   218,  1017,   580,
    1017,   501,  1017,  1017,   139,    33,    58,    99,   102,   110,
     316,   446,   505,   533,  1052,    33,   868,  1287,  1017,   868,
    1052,  1054,   580,   218,   218,  1017,  1017,  1054,  1017,  1017,
    1017,  1017,  1017,  1020,   580,   580,  1017,  1017,  1017,  1017,
    1017,  1017,  1054,   218,  1017,  1017,  1017,   580,  1017,  1017,
    1017,  1017,   175,  1017,   175,  1017,   175,  1017,  1017,  1017,
    1368,  1368,   580,   587,   587,   587,  1287,  1017,  1369,  1019,
     580,   581,   580,  1027,  1097,  1097,    16,  1017,  1369,  1108,
    1017,   580,   581,  1053,  1054,  1285,   829,  1287,   603,   254,
     580,   581,   587,   587,   509,   509,   509,  1321,  1105,  1121,
    1122,  1166,   498,  1284,   581,   992,   563,   251,  1012,    46,
     579,   792,   782,   779,   780,   781,  1285,   509,   966,   813,
    1167,   579,  1172,  1177,  1172,   580,   812,  1168,  1272,  1273,
    1276,  1285,  1170,   342,   175,   175,   175,   997,   130,  1061,
    1142,   172,   254,  1009,  1141,  1121,  1005,    18,  1015,  1282,
    1285,   574,  1285,   587,   226,   587,  1175,   112,   868,   869,
    1175,   172,  1175,   586,  1287,    33,   112,   871,   872,  1287,
    1128,  1212,   147,   555,  1124,  1124,   560,   331,  1104,  1216,
     581,  1075,  1080,  1060,   229,   229,   348,  1082,   229,   240,
     418,  1082,  1073,  1060,  1187,  1188,  1276,  1062,  1102,  1077,
    1078,  1126,   296,  1117,   112,   873,   875,  1287,   869,    98,
      98,   113,   221,   201,   761,  1127,   743,   618,   761,   761,
     737,   581,   731,   904,  1278,   891,   892,   978,   892,    60,
     171,   372,   530,   840,   890,   839,   840,   904,  1278,   978,
    1128,  1126,  1278,  1126,    12,   924,   932,   933,  1285,   978,
    1282,  1282,   867,  1176,  1126,   232,   932,   232,  1278,  1278,
     829,  1176,   165,   235,   327,   832,  1126,  1128,  1128,  1278,
     978,  1113,  1114,  1276,   112,  1126,   773,  1282,   978,  1279,
     978,   978,    73,    75,   112,   133,   166,   393,   831,  1126,
     829,   579,     6,   129,   936,   835,   836,   837,   838,  1285,
       8,   165,   943,   394,   839,   881,   844,   587,   325,   370,
      22,   152,   621,   509,   122,   137,   623,   579,  1384,   580,
     581,  1282,  1127,   761,   761,   740,   341,   186,  1176,   581,
     734,   498,   415,   336,   579,   116,   215,   535,   719,  1396,
     110,   220,   388,   478,   834,  1279,   244,   359,   763,   768,
     835,   768,   581,   825,   613,  1061,  1115,  1104,  1102,  1017,
     580,  1017,   501,   579,   860,   861,   861,   579,   855,   856,
     860,   861,   220,   220,   580,   580,   580,   580,   580,  1042,
    1017,  1017,   580,   580,  1049,  1116,   581,   581,   580,   581,
     580,   222,  1034,  1035,   580,   580,   580,   580,   581,   580,
     580,  1017,   580,   172,   580,   580,   581,   580,   581,   581,
     580,  1017,   580,  1017,   580,  1017,   580,   580,   580,  1371,
    1371,   587,   905,   580,  1054,  1019,   580,   581,   580,  1013,
    1039,   580,  1345,   574,   574,  1341,  1341,  1341,   579,  1017,
     336,  1182,  1248,   991,   205,   995,   790,  1020,   778,   359,
     793,   794,   580,   581,  1288,  1006,  1173,  1174,  1276,  1178,
     581,   579,  1169,   580,   580,   581,   587,  1360,   175,  1341,
    1341,  1341,  1104,  1104,   131,   349,  1137,  1138,  1143,   535,
     222,  1282,  1285,   587,  1285,   242,  1285,    12,    33,   112,
     336,  1017,  1307,    66,   874,  1017,  1288,   335,   360,   498,
    1306,  1300,  1175,  1120,   266,  1221,   610,  1363,  1076,   584,
     229,  1073,  1082,  1082,   229,   336,   336,   541,   581,  1186,
    1175,  1091,  1092,  1006,  1017,  1118,  1274,   731,   926,  1017,
     232,   232,   892,   904,   896,   129,   439,   924,   937,   921,
     581,  1127,   869,  1282,   904,   942,  1282,   938,   924,   581,
      19,   117,  1119,   924,   929,   924,  1233,   580,   581,  1285,
    1279,    32,    33,    38,    40,    42,    43,    58,    99,   102,
     110,   127,   144,   166,   168,   180,   181,   220,   248,   257,
     258,   260,   289,   290,   291,   307,   308,   309,   313,   316,
     332,   333,   364,   365,   388,   435,   439,   449,   499,   502,
     505,   506,   507,   508,   547,   548,   568,   845,   848,   849,
     850,   851,   852,   853,   854,  1285,   370,  1017,  1017,   336,
     627,   633,   336,    70,   628,  1285,  1385,    18,  1094,   579,
    1285,   761,   734,   834,   427,  1403,   336,   644,   645,   647,
    1285,   452,  1279,   812,   580,   205,   407,   765,  1254,   825,
     579,  1104,   245,  1125,  1097,  1017,   109,   259,   331,   520,
      20,    33,    47,   527,   867,   877,   331,   580,  1097,  1097,
     433,  1048,  1017,  1017,  1054,    42,   314,   580,   560,  1036,
    1017,  1097,  1017,  1017,  1017,  1017,   580,   580,   580,   580,
    1285,   580,  1054,  1015,   409,  1346,  1346,  1346,   112,  1017,
    1180,  1181,   132,  1254,   238,  1013,   190,   232,   795,   580,
     581,   781,  1010,   581,  1175,  1179,  1180,  1177,  1171,  1169,
    1272,  1285,  1341,  1121,   186,  1109,  1284,  1284,   586,  1139,
    1140,  1287,   441,   574,   386,   405,   434,  1305,   875,  1175,
     579,   579,  1304,  1017,   145,   580,  1063,  1060,  1073,   229,
     229,  1060,  1073,  1066,  1065,  1067,  1188,  1104,  1181,  1089,
    1090,  1010,   581,  1119,   358,   579,   927,   904,   896,   579,
     112,   112,   843,   973,   933,   874,   845,   920,  1114,   930,
     932,   922,   580,   836,   882,   860,   860,   861,   855,   368,
     846,   855,   855,   877,    58,   547,   849,   851,   877,   877,
      58,   548,   548,   551,   855,   847,   861,   861,   877,   860,
     861,    25,    66,    70,   112,   330,   336,   372,   435,   530,
     863,   864,   865,   880,  1023,   551,   860,   877,    33,   860,
     878,   860,   860,   861,   579,   856,   862,   587,  1097,   448,
    1282,   128,   917,   580,   581,  1386,  1387,   617,   452,   621,
     213,   222,   350,   648,   649,   650,   651,  1012,   580,   581,
     646,  1282,   580,   580,   823,    18,   815,   902,   903,  1285,
    1124,   580,   580,   580,   580,   580,   878,    20,   527,   867,
     879,   878,   868,   581,   580,   580,  1267,   580,   580,   581,
     580,   302,   234,   381,   580,   580,   580,   580,   580,   580,
     580,    61,   227,   323,   468,   480,   564,  1337,  1338,   560,
    1347,  1347,  1347,   580,   581,  1183,   219,   580,   579,   783,
     579,   796,  1285,   794,   814,  1174,  1181,   580,  1363,    46,
     191,  1106,  1144,  1287,   581,   302,    71,   521,   386,  1306,
     498,   498,  1175,  1282,  1102,   336,  1069,  1073,  1073,   336,
    1071,  1017,  1017,   579,  1115,   170,   205,   540,  1084,  1085,
    1088,  1079,  1274,  1127,   793,   579,   579,   902,   102,   502,
     505,   572,   573,  1269,  1270,   943,   863,   978,   931,   965,
     280,   336,   579,   883,   885,   886,   887,   446,   533,   569,
     857,   858,   859,   579,   857,   857,   877,   551,   857,   579,
     877,   857,   873,  1282,   326,   866,  1269,   535,   112,   232,
     865,   232,   330,   877,   878,   877,   878,   857,   331,   857,
    1285,   622,   629,   630,  1285,   431,   579,  1388,   580,  1282,
     626,   627,   580,   581,   646,  1391,  1397,   647,   845,   764,
     768,   579,   812,   580,   581,  1119,   579,   868,   878,   331,
    1017,   302,   156,   498,   498,   498,    16,  1336,   184,   281,
     282,   286,   287,  1348,  1349,  1181,   232,  1249,  1012,   786,
     788,   789,  1285,   545,   797,   833,  1005,  1121,  1110,  1274,
    1107,  1115,   867,   870,  1140,   580,   580,  1307,    16,  1068,
     541,  1070,   541,  1096,  1285,  1125,   891,   891,  1085,   833,
    1119,   580,   902,   902,   580,  1271,  1271,   939,   219,   176,
     356,   447,   116,   535,   884,  1285,   887,   859,   906,  1267,
     906,  1016,   326,   546,   470,   624,    52,    63,   163,   204,
     228,   239,   339,   416,   631,   669,   671,   672,   673,   675,
     676,   677,   678,   679,   680,   682,   690,   691,   694,   705,
     708,   710,   711,  1281,  1286,  1290,   999,   998,   560,  1389,
     623,  1404,   650,  1285,  1279,   415,  1363,   765,   812,   766,
     231,   560,   897,   898,   899,   900,   903,   331,   580,   580,
    1337,   342,  1126,  1126,  1126,  1126,  1349,   535,   493,   790,
     481,   791,   580,   581,   222,   241,    70,    98,   208,   283,
     300,   322,   491,   809,   810,   811,  1215,  1009,   560,   581,
    1111,  1119,  1017,  1121,   869,  1145,   267,  1017,   579,  1017,
     579,   580,   581,   172,  1083,  1083,   580,   580,   897,   943,
     579,    50,   327,   413,   439,   888,   888,   580,   581,   580,
     581,   580,  1016,  1017,   140,   625,   692,   695,  1285,   175,
     321,   683,   670,  1286,  1286,  1285,   674,   594,   261,   406,
     559,   714,    30,   712,   588,   580,    51,    60,   251,   628,
     635,   845,   172,  1398,   580,  1360,  1176,   355,   900,  1119,
     580,  1189,  1190,  1276,  1279,  1013,  1127,   787,   789,   579,
     500,  1176,   121,   121,  1176,  1176,  1176,  1176,   579,   804,
     811,   143,    90,   420,  1274,   374,  1132,    68,  1255,   145,
    1096,  1096,  1285,   186,   229,   345,  1087,  1086,   881,   897,
     793,     5,   112,   330,   885,  1285,   877,  1267,   877,  1017,
    1017,   557,   697,   701,   175,  1285,   685,   686,  1017,   653,
     668,   669,   671,   673,   675,   677,   678,   679,   680,   682,
     690,   705,   708,   710,   653,   715,   713,   706,   709,  1363,
      60,   342,    60,   128,   120,   636,   637,  1023,  1405,  1012,
     845,   767,  1126,  1281,   581,  1175,  1250,   580,   791,   801,
     802,   803,  1020,   288,   579,   798,   799,   800,  1282,  1176,
    1176,   259,   331,   520,  1129,  1130,  1129,  1127,  1287,   482,
     805,   806,  1176,  1119,  1285,   138,   148,   343,   497,  1256,
    1257,   247,  1258,  1128,   580,   580,    46,    46,   579,   579,
     580,   693,   702,   135,   701,   704,   219,   139,  1017,   139,
     668,   585,   534,  1017,   654,   714,   712,   342,   342,   629,
     120,   668,  1392,  1399,  1363,  1190,  1181,   870,   580,   581,
     288,   803,  1282,  1282,   807,   580,   581,   829,  1133,    46,
      46,   138,    46,  1257,   469,   497,  1259,  1260,    16,  1093,
    1095,   557,   696,   698,  1017,   653,   139,   681,   204,   501,
     261,   585,   717,   128,   111,   652,   655,   707,  1286,   707,
     134,   635,  1251,   802,   580,   580,   808,  1287,   806,   579,
    1267,  1267,    46,  1267,    46,    46,  1260,   270,   580,   580,
     699,   698,   704,   703,    52,   684,  1285,   687,  1017,   716,
      83,   155,   660,   666,  1285,   139,   668,   585,   424,  1400,
    1255,   809,  1012,  1134,  1135,  1136,  1267,  1267,  1267,   145,
    1017,   139,   501,   581,   653,   139,   653,   189,   581,   656,
      77,    93,   585,  1393,   668,  1258,  1017,   580,   581,  1126,
     700,    52,   653,  1285,   688,   406,   139,   172,  1285,   845,
     172,   172,   668,   205,  1261,  1013,  1136,   501,   135,   136,
     689,   559,   657,   112,   667,   458,   663,  1126,   658,   659,
     331,   579,  1262,   653,   653,   685,   457,   459,   661,   662,
     663,   665,  1023,  1285,  1017,   546,   664,   996,   247,   580,
     586,  1263,  1264,  1276,   439,  1265,   581,   668,   173,  1283,
    1287,   580,   581,  1189,   662,  1264
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}

/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */





/*-------------------------.
| yyparse or yypush_parse.  |
`-------------------------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1455 of yacc.c  */
#line 1355 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1455 of yacc.c  */
#line 1367 "sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                ! lip->stmt_prepare_mode &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1455 of yacc.c  */
#line 1392 "sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1455 of yacc.c  */
#line 1465 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1455 of yacc.c  */
#line 1480 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1455 of yacc.c  */
#line 1490 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1455 of yacc.c  */
#line 1497 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1455 of yacc.c  */
#line 1507 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1455 of yacc.c  */
#line 1514 "sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1455 of yacc.c  */
#line 1529 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1455 of yacc.c  */
#line 1541 "sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1455 of yacc.c  */
#line 1549 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1455 of yacc.c  */
#line 1560 "sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 77:

/* Line 1455 of yacc.c  */
#line 1566 "sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1455 of yacc.c  */
#line 1576 "sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1455 of yacc.c  */
#line 1580 "sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1455 of yacc.c  */
#line 1584 "sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1455 of yacc.c  */
#line 1588 "sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1455 of yacc.c  */
#line 1592 "sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1455 of yacc.c  */
#line 1596 "sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 86:

/* Line 1455 of yacc.c  */
#line 1601 "sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1455 of yacc.c  */
#line 1605 "sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1455 of yacc.c  */
#line 1609 "sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1455 of yacc.c  */
#line 1613 "sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1455 of yacc.c  */
#line 1617 "sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1455 of yacc.c  */
#line 1621 "sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::SSL_ENABLE : LEX_MASTER_INFO::SSL_DISABLE;
          }
    break;

  case 93:

/* Line 1455 of yacc.c  */
#line 1630 "sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 94:

/* Line 1455 of yacc.c  */
#line 1634 "sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 95:

/* Line 1455 of yacc.c  */
#line 1650 "sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 96:

/* Line 1455 of yacc.c  */
#line 1654 "sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 97:

/* Line 1455 of yacc.c  */
#line 1665 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.db_type= ha_default_handlerton(thd);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
          }
    break;

  case 98:

/* Line 1455 of yacc.c  */
#line 1684 "sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if (!lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
          }
    break;

  case 99:

/* Line 1455 of yacc.c  */
#line 1699 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_CREATE_INDEX;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(7) - (7)].table),
                                                        NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_ADD_INDEX;
            lex->col_list.empty();
            lex->change=NullS;
          }
    break;

  case 100:

/* Line 1455 of yacc.c  */
#line 1712 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key;
            if ((yyvsp[(2) - (12)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            key= new Key((yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str).str, &lex->key_create_info, 0,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty();
          }
    break;

  case 101:

/* Line 1455 of yacc.c  */
#line 1728 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 102:

/* Line 1455 of yacc.c  */
#line 1733 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 103:

/* Line 1455 of yacc.c  */
#line 1740 "sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 104:

/* Line 1455 of yacc.c  */
#line 1746 "sql_yacc.yy"
    {}
    break;

  case 105:

/* Line 1455 of yacc.c  */
#line 1748 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 106:

/* Line 1455 of yacc.c  */
#line 1752 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 107:

/* Line 1455 of yacc.c  */
#line 1756 "sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 108:

/* Line 1455 of yacc.c  */
#line 1760 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 109:

/* Line 1455 of yacc.c  */
#line 1771 "sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 112:

/* Line 1455 of yacc.c  */
#line 1785 "sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 113:

/* Line 1455 of yacc.c  */
#line 1789 "sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 114:

/* Line 1455 of yacc.c  */
#line 1793 "sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 115:

/* Line 1455 of yacc.c  */
#line 1797 "sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 116:

/* Line 1455 of yacc.c  */
#line 1801 "sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 117:

/* Line 1455 of yacc.c  */
#line 1805 "sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 118:

/* Line 1455 of yacc.c  */
#line 1809 "sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 119:

/* Line 1455 of yacc.c  */
#line 1816 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->create_info.options= (yyvsp[(2) - (3)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(3) - (3)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 120:

/* Line 1455 of yacc.c  */
#line 1835 "sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 121:

/* Line 1455 of yacc.c  */
#line 1846 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 123:

/* Line 1455 of yacc.c  */
#line 1853 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 124:

/* Line 1455 of yacc.c  */
#line 1859 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 125:

/* Line 1455 of yacc.c  */
#line 1861 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            (yyval.num)= 1;
          }
    break;

  case 126:

/* Line 1455 of yacc.c  */
#line 1866 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 127:

/* Line 1455 of yacc.c  */
#line 1871 "sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 128:

/* Line 1455 of yacc.c  */
#line 1879 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 129:

/* Line 1455 of yacc.c  */
#line 1886 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 131:

/* Line 1455 of yacc.c  */
#line 1894 "sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 132:

/* Line 1455 of yacc.c  */
#line 1900 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 134:

/* Line 1455 of yacc.c  */
#line 1906 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 135:

/* Line 1455 of yacc.c  */
#line 1912 "sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 136:

/* Line 1455 of yacc.c  */
#line 1920 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 137:

/* Line 1455 of yacc.c  */
#line 1922 "sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1455 of yacc.c  */
#line 1929 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 139:

/* Line 1455 of yacc.c  */
#line 1972 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 153:

/* Line 1455 of yacc.c  */
#line 2004 "sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 154:

/* Line 1455 of yacc.c  */
#line 2019 "sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 155:

/* Line 1455 of yacc.c  */
#line 2035 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 156:

/* Line 1455 of yacc.c  */
#line 2053 "sql_yacc.yy"
    {}
    break;

  case 157:

/* Line 1455 of yacc.c  */
#line 2054 "sql_yacc.yy"
    {}
    break;

  case 158:

/* Line 1455 of yacc.c  */
#line 2058 "sql_yacc.yy"
    {}
    break;

  case 159:

/* Line 1455 of yacc.c  */
#line 2059 "sql_yacc.yy"
    {}
    break;

  case 160:

/* Line 1455 of yacc.c  */
#line 2065 "sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 161:

/* Line 1455 of yacc.c  */
#line 2067 "sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 162:

/* Line 1455 of yacc.c  */
#line 2069 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 163:

/* Line 1455 of yacc.c  */
#line 2071 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 164:

/* Line 1455 of yacc.c  */
#line 2073 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 165:

/* Line 1455 of yacc.c  */
#line 2075 "sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 166:

/* Line 1455 of yacc.c  */
#line 2077 "sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1455 of yacc.c  */
#line 2082 "sql_yacc.yy"
    { }
    break;

  case 168:

/* Line 1455 of yacc.c  */
#line 2083 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 169:

/* Line 1455 of yacc.c  */
#line 2084 "sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 170:

/* Line 1455 of yacc.c  */
#line 2089 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 171:

/* Line 1455 of yacc.c  */
#line 2093 "sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 172:

/* Line 1455 of yacc.c  */
#line 2100 "sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 173:

/* Line 1455 of yacc.c  */
#line 2108 "sql_yacc.yy"
    {}
    break;

  case 178:

/* Line 1455 of yacc.c  */
#line 2124 "sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 179:

/* Line 1455 of yacc.c  */
#line 2128 "sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 184:

/* Line 1455 of yacc.c  */
#line 2146 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 185:

/* Line 1455 of yacc.c  */
#line 2166 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 190:

/* Line 1455 of yacc.c  */
#line 2203 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 191:

/* Line 1455 of yacc.c  */
#line 2228 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 192:

/* Line 1455 of yacc.c  */
#line 2229 "sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 193:

/* Line 1455 of yacc.c  */
#line 2230 "sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 194:

/* Line 1455 of yacc.c  */
#line 2231 "sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 195:

/* Line 1455 of yacc.c  */
#line 2235 "sql_yacc.yy"
    {}
    break;

  case 197:

/* Line 1455 of yacc.c  */
#line 2240 "sql_yacc.yy"
    {}
    break;

  case 199:

/* Line 1455 of yacc.c  */
#line 2246 "sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 200:

/* Line 1455 of yacc.c  */
#line 2250 "sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 201:

/* Line 1455 of yacc.c  */
#line 2276 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 202:

/* Line 1455 of yacc.c  */
#line 2284 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            lex->sphead->restore_lex(YYTHD);

            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 203:

/* Line 1455 of yacc.c  */
#line 2341 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

	    if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
	    {
	      my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
	      MYSQL_YYABORT;
	    }
	    if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 204:

/* Line 1455 of yacc.c  */
#line 2356 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
	                              ctx->current_var_count());
            if (i == NULL ||
	        sp->add_instr(i) ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)))
              MYSQL_YYABORT;
          }
    break;

  case 205:

/* Line 1455 of yacc.c  */
#line 2372 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
	          sp->add_instr(i) ||
	          sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 206:

/* Line 1455 of yacc.c  */
#line 2404 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
	    if (i == NULL ||
                sp->add_instr(i) ||
	        ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 207:

/* Line 1455 of yacc.c  */
#line 2429 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 208:

/* Line 1455 of yacc.c  */
#line 2433 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            lex->sphead->restore_lex(YYTHD);
          }
    break;

  case 209:

/* Line 1455 of yacc.c  */
#line 2451 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 210:

/* Line 1455 of yacc.c  */
#line 2452 "sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 211:

/* Line 1455 of yacc.c  */
#line 2458 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 212:

/* Line 1455 of yacc.c  */
#line 2460 "sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 213:

/* Line 1455 of yacc.c  */
#line 2465 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 214:

/* Line 1455 of yacc.c  */
#line 2488 "sql_yacc.yy"
    { /* mysql errno */
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 215:

/* Line 1455 of yacc.c  */
#line 2496 "sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, 5);
            (yyval.spcondtype)->sqlstate[5]= '\0';
          }
    break;

  case 216:

/* Line 1455 of yacc.c  */
#line 2512 "sql_yacc.yy"
    {}
    break;

  case 217:

/* Line 1455 of yacc.c  */
#line 2513 "sql_yacc.yy"
    {}
    break;

  case 218:

/* Line 1455 of yacc.c  */
#line 2518 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 219:

/* Line 1455 of yacc.c  */
#line 2522 "sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 220:

/* Line 1455 of yacc.c  */
#line 2531 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 221:

/* Line 1455 of yacc.c  */
#line 2538 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 222:

/* Line 1455 of yacc.c  */
#line 2545 "sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 223:

/* Line 1455 of yacc.c  */
#line 2555 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 224:

/* Line 1455 of yacc.c  */
#line 2570 "sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 225:

/* Line 1455 of yacc.c  */
#line 2587 "sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 226:

/* Line 1455 of yacc.c  */
#line 2588 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 240:

/* Line 1455 of yacc.c  */
#line 2609 "sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 241:

/* Line 1455 of yacc.c  */
#line 2611 "sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 242:

/* Line 1455 of yacc.c  */
#line 2615 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 243:

/* Line 1455 of yacc.c  */
#line 2624 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            sp->restore_lex(thd);
          }
    break;

  case 244:

/* Line 1455 of yacc.c  */
#line 2671 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 245:

/* Line 1455 of yacc.c  */
#line 2673 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
	          sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            sp->restore_lex(YYTHD);
          }
    break;

  case 246:

/* Line 1455 of yacc.c  */
#line 2698 "sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 247:

/* Line 1455 of yacc.c  */
#line 2704 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 248:

/* Line 1455 of yacc.c  */
#line 2713 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 249:

/* Line 1455 of yacc.c  */
#line 2766 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 250:

/* Line 1455 of yacc.c  */
#line 2809 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 251:

/* Line 1455 of yacc.c  */
#line 2829 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 252:

/* Line 1455 of yacc.c  */
#line 2846 "sql_yacc.yy"
    {}
    break;

  case 253:

/* Line 1455 of yacc.c  */
#line 2851 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 257:

/* Line 1455 of yacc.c  */
#line 2877 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 258:

/* Line 1455 of yacc.c  */
#line 2897 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 259:

/* Line 1455 of yacc.c  */
#line 2919 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 260:

/* Line 1455 of yacc.c  */
#line 2921 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
	        sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 261:

/* Line 1455 of yacc.c  */
#line 2936 "sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 262:

/* Line 1455 of yacc.c  */
#line 2948 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 268:

/* Line 1455 of yacc.c  */
#line 2968 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 269:

/* Line 1455 of yacc.c  */
#line 2974 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 270:

/* Line 1455 of yacc.c  */
#line 2985 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 271:

/* Line 1455 of yacc.c  */
#line 2993 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 272:

/* Line 1455 of yacc.c  */
#line 3001 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 277:

/* Line 1455 of yacc.c  */
#line 3019 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 278:

/* Line 1455 of yacc.c  */
#line 3023 "sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 279:

/* Line 1455 of yacc.c  */
#line 3033 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1455 of yacc.c  */
#line 3042 "sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 281:

/* Line 1455 of yacc.c  */
#line 3046 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 282:

/* Line 1455 of yacc.c  */
#line 3054 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 283:

/* Line 1455 of yacc.c  */
#line 3063 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 285:

/* Line 1455 of yacc.c  */
#line 3078 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 286:

/* Line 1455 of yacc.c  */
#line 3096 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 287:

/* Line 1455 of yacc.c  */
#line 3113 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 288:

/* Line 1455 of yacc.c  */
#line 3114 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 289:

/* Line 1455 of yacc.c  */
#line 3119 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 290:

/* Line 1455 of yacc.c  */
#line 3135 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 291:

/* Line 1455 of yacc.c  */
#line 3151 "sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 292:

/* Line 1455 of yacc.c  */
#line 3158 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 293:

/* Line 1455 of yacc.c  */
#line 3166 "sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 294:

/* Line 1455 of yacc.c  */
#line 3175 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 295:

/* Line 1455 of yacc.c  */
#line 3203 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
	  }
    break;

  case 296:

/* Line 1455 of yacc.c  */
#line 3213 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 297:

/* Line 1455 of yacc.c  */
#line 3215 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
	    /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->restore_lex(YYTHD);
          }
    break;

  case 298:

/* Line 1455 of yacc.c  */
#line 3230 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 299:

/* Line 1455 of yacc.c  */
#line 3241 "sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 300:

/* Line 1455 of yacc.c  */
#line 3243 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->restore_lex(YYTHD);
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 301:

/* Line 1455 of yacc.c  */
#line 3261 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 302:

/* Line 1455 of yacc.c  */
#line 3263 "sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 303:

/* Line 1455 of yacc.c  */
#line 3268 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 304:

/* Line 1455 of yacc.c  */
#line 3270 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 305:

/* Line 1455 of yacc.c  */
#line 3272 "sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 309:

/* Line 1455 of yacc.c  */
#line 3306 "sql_yacc.yy"
    {}
    break;

  case 310:

/* Line 1455 of yacc.c  */
#line 3308 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 311:

/* Line 1455 of yacc.c  */
#line 3318 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 312:

/* Line 1455 of yacc.c  */
#line 3324 "sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 317:

/* Line 1455 of yacc.c  */
#line 3347 "sql_yacc.yy"
    {}
    break;

  case 364:

/* Line 1455 of yacc.c  */
#line 3441 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 365:

/* Line 1455 of yacc.c  */
#line 3449 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 366:

/* Line 1455 of yacc.c  */
#line 3457 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 367:

/* Line 1455 of yacc.c  */
#line 3465 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 368:

/* Line 1455 of yacc.c  */
#line 3477 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 369:

/* Line 1455 of yacc.c  */
#line 3489 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 370:

/* Line 1455 of yacc.c  */
#line 3494 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 371:

/* Line 1455 of yacc.c  */
#line 3499 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 372:

/* Line 1455 of yacc.c  */
#line 3507 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 373:

/* Line 1455 of yacc.c  */
#line 3515 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 374:

/* Line 1455 of yacc.c  */
#line 3523 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 375:

/* Line 1455 of yacc.c  */
#line 3531 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 376:

/* Line 1455 of yacc.c  */
#line 3539 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 377:

/* Line 1455 of yacc.c  */
#line 3547 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 378:

/* Line 1455 of yacc.c  */
#line 3555 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 379:

/* Line 1455 of yacc.c  */
#line 3568 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 380:

/* Line 1455 of yacc.c  */
#line 3581 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 383:

/* Line 1455 of yacc.c  */
#line 3600 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 384:

/* Line 1455 of yacc.c  */
#line 3605 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 385:

/* Line 1455 of yacc.c  */
#line 3617 "sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 386:

/* Line 1455 of yacc.c  */
#line 3619 "sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 387:

/* Line 1455 of yacc.c  */
#line 3669 "sql_yacc.yy"
    {}
    break;

  case 388:

/* Line 1455 of yacc.c  */
#line 3672 "sql_yacc.yy"
    {}
    break;

  case 389:

/* Line 1455 of yacc.c  */
#line 3674 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 390:

/* Line 1455 of yacc.c  */
#line 3688 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 391:

/* Line 1455 of yacc.c  */
#line 3706 "sql_yacc.yy"
    {}
    break;

  case 392:

/* Line 1455 of yacc.c  */
#line 3709 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 393:

/* Line 1455 of yacc.c  */
#line 3710 "sql_yacc.yy"
    {}
    break;

  case 394:

/* Line 1455 of yacc.c  */
#line 3714 "sql_yacc.yy"
    {}
    break;

  case 395:

/* Line 1455 of yacc.c  */
#line 3716 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 396:

/* Line 1455 of yacc.c  */
#line 3717 "sql_yacc.yy"
    {}
    break;

  case 397:

/* Line 1455 of yacc.c  */
#line 3719 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 398:

/* Line 1455 of yacc.c  */
#line 3720 "sql_yacc.yy"
    {}
    break;

  case 399:

/* Line 1455 of yacc.c  */
#line 3748 "sql_yacc.yy"
    {}
    break;

  case 401:

/* Line 1455 of yacc.c  */
#line 3754 "sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX *lex= Lex;
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_FEATURE_DISABLED, MYF(0),
                      "partitioning", "--with-partition");
              MYSQL_YYABORT;
            }
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     "partitioning", "--with-partition");
            MYSQL_YYABORT;
#endif

          }
    break;

  case 403:

/* Line 1455 of yacc.c  */
#line 3786 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 404:

/* Line 1455 of yacc.c  */
#line 3798 "sql_yacc.yy"
    {}
    break;

  case 406:

/* Line 1455 of yacc.c  */
#line 3807 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->list_of_part_fields= TRUE;
            lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 407:

/* Line 1455 of yacc.c  */
#line 3813 "sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 408:

/* Line 1455 of yacc.c  */
#line 3814 "sql_yacc.yy"
    {}
    break;

  case 409:

/* Line 1455 of yacc.c  */
#line 3816 "sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 410:

/* Line 1455 of yacc.c  */
#line 3817 "sql_yacc.yy"
    {}
    break;

  case 411:

/* Line 1455 of yacc.c  */
#line 3819 "sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 412:

/* Line 1455 of yacc.c  */
#line 3820 "sql_yacc.yy"
    {}
    break;

  case 413:

/* Line 1455 of yacc.c  */
#line 3824 "sql_yacc.yy"
    {}
    break;

  case 414:

/* Line 1455 of yacc.c  */
#line 3826 "sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 415:

/* Line 1455 of yacc.c  */
#line 3830 "sql_yacc.yy"
    {}
    break;

  case 416:

/* Line 1455 of yacc.c  */
#line 3831 "sql_yacc.yy"
    {}
    break;

  case 417:

/* Line 1455 of yacc.c  */
#line 3835 "sql_yacc.yy"
    {}
    break;

  case 418:

/* Line 1455 of yacc.c  */
#line 3836 "sql_yacc.yy"
    {}
    break;

  case 419:

/* Line 1455 of yacc.c  */
#line 3841 "sql_yacc.yy"
    {
            if (Lex->part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 420:

/* Line 1455 of yacc.c  */
#line 3852 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_part_fields= FALSE;
            lex->part_info->part_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->part_func_string= func_string;
            lex->part_info->part_func_len= expr_len;
          }
    break;

  case 421:

/* Line 1455 of yacc.c  */
#line 3867 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint expr_len= (uint)((yyvsp[(4) - (5)].simple_string) - (yyvsp[(2) - (5)].simple_string)) - 1;
            lex->part_info->list_of_subpart_fields= FALSE;
            lex->part_info->subpart_expr= (yyvsp[(3) - (5)].item);
            char *func_string= (char*) sql_memdup((yyvsp[(2) - (5)].simple_string)+1, expr_len);
            if (func_string == NULL)
              MYSQL_YYABORT;
            lex->part_info->subpart_func_string= func_string;        
            lex->part_info->subpart_func_len= expr_len;
          }
    break;

  case 422:

/* Line 1455 of yacc.c  */
#line 3882 "sql_yacc.yy"
    {}
    break;

  case 423:

/* Line 1455 of yacc.c  */
#line 3884 "sql_yacc.yy"
    { 
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            lex->part_info->no_parts= no_parts;
            lex->part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 424:

/* Line 1455 of yacc.c  */
#line 3899 "sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1455 of yacc.c  */
#line 3901 "sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 426:

/* Line 1455 of yacc.c  */
#line 3902 "sql_yacc.yy"
    {}
    break;

  case 427:

/* Line 1455 of yacc.c  */
#line 3905 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->subpart_type= HASH_PARTITION;
            lex->part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 428:

/* Line 1455 of yacc.c  */
#line 3910 "sql_yacc.yy"
    {}
    break;

  case 429:

/* Line 1455 of yacc.c  */
#line 3914 "sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1455 of yacc.c  */
#line 3915 "sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1455 of yacc.c  */
#line 3920 "sql_yacc.yy"
    {
            if (Lex->part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 432:

/* Line 1455 of yacc.c  */
#line 3931 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_CONST_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 433:

/* Line 1455 of yacc.c  */
#line 3946 "sql_yacc.yy"
    {}
    break;

  case 434:

/* Line 1455 of yacc.c  */
#line 3948 "sql_yacc.yy"
    {
            uint no_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (no_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->no_subparts= no_parts;
            lex->part_info->use_default_no_subpartitions= FALSE;
          }
    break;

  case 435:

/* Line 1455 of yacc.c  */
#line 3963 "sql_yacc.yy"
    {}
    break;

  case 436:

/* Line 1455 of yacc.c  */
#line 3965 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->no_parts != 0)
            {
              if (part_info->no_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->no_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 437:

/* Line 1455 of yacc.c  */
#line 3987 "sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1455 of yacc.c  */
#line 3988 "sql_yacc.yy"
    {}
    break;

  case 439:

/* Line 1455 of yacc.c  */
#line 3993 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_no_partitions= FALSE;
          }
    break;

  case 440:

/* Line 1455 of yacc.c  */
#line 4013 "sql_yacc.yy"
    {}
    break;

  case 441:

/* Line 1455 of yacc.c  */
#line 4018 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 442:

/* Line 1455 of yacc.c  */
#line 4028 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (lex->part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (lex->part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= HASH_PARTITION;
          }
    break;

  case 443:

/* Line 1455 of yacc.c  */
#line 4049 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 444:

/* Line 1455 of yacc.c  */
#line 4064 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (! lex->is_partition_management())
            {
              if (Lex->part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              lex->part_info->part_type= LIST_PARTITION;
          }
    break;

  case 445:

/* Line 1455 of yacc.c  */
#line 4082 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            lex->part_info->defined_max_value= TRUE;
            lex->part_info->curr_part_elem->max_value= TRUE;
            lex->part_info->curr_part_elem->range_value= LONGLONG_MAX;
          }
    break;

  case 446:

/* Line 1455 of yacc.c  */
#line 4094 "sql_yacc.yy"
    {
            if (Lex->part_info->defined_max_value)
            {
              my_parse_error(ER(ER_PARTITION_MAXVALUE_ERROR));
              MYSQL_YYABORT;
            }
            if (Lex->part_info->curr_part_elem->has_null_value)
            {
              my_parse_error(ER(ER_NULL_IN_VALUES_LESS_THAN));
              MYSQL_YYABORT;
            }
          }
    break;

  case 449:

/* Line 1455 of yacc.c  */
#line 4115 "sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (!((yyvsp[(2) - (3)].p_elem_value)->unsigned_flag))
              part_info->curr_part_elem->signed_flag= TRUE;
            part_info->curr_part_elem->range_value= (yyvsp[(2) - (3)].p_elem_value)->value;
          }
    break;

  case 450:

/* Line 1455 of yacc.c  */
#line 4124 "sql_yacc.yy"
    {}
    break;

  case 451:

/* Line 1455 of yacc.c  */
#line 4125 "sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1455 of yacc.c  */
#line 4130 "sql_yacc.yy"
    {
            part_elem_value *value_ptr= (yyvsp[(1) - (1)].p_elem_value);
            partition_info *part_info= Lex->part_info;
            if (!value_ptr->unsigned_flag)
              part_info->curr_part_elem->signed_flag= TRUE;
            if (!value_ptr->null_value &&
               part_info->curr_part_elem->
                list_val_list.push_back(value_ptr))
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
          }
    break;

  case 453:

/* Line 1455 of yacc.c  */
#line 4147 "sql_yacc.yy"
    {
            Item *part_expr= (yyvsp[(1) - (1)].item);
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Name_resolution_context *context= &lex->current_select->context;
            TABLE_LIST *save_list= context->table_list;
            const char *save_where= thd->where;

            context->table_list= 0;
            thd->where= "partition function";

            part_elem_value *value_ptr= 
              (part_elem_value*)sql_alloc(sizeof(part_elem_value));
            if (!value_ptr)
            {
              mem_alloc_error(sizeof(part_elem_value));
              MYSQL_YYABORT;
            }
            if (part_expr->walk(&Item::check_partition_func_processor, 0,
                                NULL))
            {
              my_error(ER_PARTITION_FUNCTION_IS_NOT_ALLOWED, MYF(0));
              MYSQL_YYABORT;
            }
            if (part_expr->fix_fields(YYTHD, (Item**)0) ||
                ((context->table_list= save_list), FALSE) ||
                (!part_expr->const_item()) ||
                (!lex->safe_to_cache_query))
            {
              my_error(ER_NO_CONST_EXPR_IN_RANGE_OR_LIST_ERROR, MYF(0));
              MYSQL_YYABORT;
            }
            thd->where= save_where;
            value_ptr->value= part_expr->val_int();
            value_ptr->unsigned_flag= TRUE;
            if (!part_expr->unsigned_flag &&
                value_ptr->value < 0)
              value_ptr->unsigned_flag= FALSE;
            if ((value_ptr->null_value= part_expr->null_value))
            {
              if (Lex->part_info->curr_part_elem->has_null_value)
              {
                my_error(ER_MULTIPLE_DEF_CONST_IN_LIST_PART_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              Lex->part_info->curr_part_elem->has_null_value= TRUE;
            }
            else if (part_expr->result_type() != INT_RESULT)
            {
              my_parse_error(ER(ER_INCONSISTENT_TYPE_OF_FUNCTIONS_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.p_elem_value)= value_ptr; 
          }
    break;

  case 454:

/* Line 1455 of yacc.c  */
#line 4205 "sql_yacc.yy"
    {
            if (Lex->part_info->no_subparts != 0 &&
                !Lex->part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 455:

/* Line 1455 of yacc.c  */
#line 4218 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (part_info->no_subparts != 0)
            {
              if (part_info->no_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->no_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 456:

/* Line 1455 of yacc.c  */
#line 4244 "sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1455 of yacc.c  */
#line 4245 "sql_yacc.yy"
    {}
    break;

  case 458:

/* Line 1455 of yacc.c  */
#line 4250 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_no_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 459:

/* Line 1455 of yacc.c  */
#line 4283 "sql_yacc.yy"
    {}
    break;

  case 460:

/* Line 1455 of yacc.c  */
#line 4288 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 461:

/* Line 1455 of yacc.c  */
#line 4292 "sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1455 of yacc.c  */
#line 4293 "sql_yacc.yy"
    {}
    break;

  case 463:

/* Line 1455 of yacc.c  */
#line 4297 "sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1455 of yacc.c  */
#line 4298 "sql_yacc.yy"
    {}
    break;

  case 465:

/* Line 1455 of yacc.c  */
#line 4303 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 466:

/* Line 1455 of yacc.c  */
#line 4305 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            lex->part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 467:

/* Line 1455 of yacc.c  */
#line 4311 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 468:

/* Line 1455 of yacc.c  */
#line 4313 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 469:

/* Line 1455 of yacc.c  */
#line 4315 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 470:

/* Line 1455 of yacc.c  */
#line 4317 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 471:

/* Line 1455 of yacc.c  */
#line 4319 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 472:

/* Line 1455 of yacc.c  */
#line 4321 "sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 473:

/* Line 1455 of yacc.c  */
#line 4330 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->lock_option= TL_READ_DEFAULT;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 474:

/* Line 1455 of yacc.c  */
#line 4346 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 475:

/* Line 1455 of yacc.c  */
#line 4350 "sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 476:

/* Line 1455 of yacc.c  */
#line 4360 "sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1455 of yacc.c  */
#line 4361 "sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1455 of yacc.c  */
#line 4365 "sql_yacc.yy"
    {}
    break;

  case 479:

/* Line 1455 of yacc.c  */
#line 4366 "sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1455 of yacc.c  */
#line 4370 "sql_yacc.yy"
    {}
    break;

  case 481:

/* Line 1455 of yacc.c  */
#line 4371 "sql_yacc.yy"
    {}
    break;

  case 482:

/* Line 1455 of yacc.c  */
#line 4375 "sql_yacc.yy"
    {}
    break;

  case 483:

/* Line 1455 of yacc.c  */
#line 4376 "sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1455 of yacc.c  */
#line 4380 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 485:

/* Line 1455 of yacc.c  */
#line 4381 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 486:

/* Line 1455 of yacc.c  */
#line 4385 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 487:

/* Line 1455 of yacc.c  */
#line 4386 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 488:

/* Line 1455 of yacc.c  */
#line 4390 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 489:

/* Line 1455 of yacc.c  */
#line 4394 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 490:

/* Line 1455 of yacc.c  */
#line 4395 "sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 498:

/* Line 1455 of yacc.c  */
#line 4416 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 499:

/* Line 1455 of yacc.c  */
#line 4421 "sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            WARN_DEPRECATED(yythd, "6.0", "TYPE=storage_engine",
                            "'ENGINE=storage_engine'");
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 500:

/* Line 1455 of yacc.c  */
#line 4428 "sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 501:

/* Line 1455 of yacc.c  */
#line 4433 "sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 502:

/* Line 1455 of yacc.c  */
#line 4438 "sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 503:

/* Line 1455 of yacc.c  */
#line 4443 "sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 504:

/* Line 1455 of yacc.c  */
#line 4448 "sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 505:

/* Line 1455 of yacc.c  */
#line 4453 "sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 506:

/* Line 1455 of yacc.c  */
#line 4458 "sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 507:

/* Line 1455 of yacc.c  */
#line 4473 "sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 508:

/* Line 1455 of yacc.c  */
#line 4479 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 509:

/* Line 1455 of yacc.c  */
#line 4484 "sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 510:

/* Line 1455 of yacc.c  */
#line 4489 "sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 511:

/* Line 1455 of yacc.c  */
#line 4494 "sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 512:

/* Line 1455 of yacc.c  */
#line 4499 "sql_yacc.yy"
    {
            /* Move the union list to the merge_list */
            LEX *lex=Lex;
            TABLE_LIST *table_list= lex->select_lex.get_table_list();
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->create_info.merge_list.elements--;
            lex->create_info.merge_list.first=
              (uchar*) (table_list->next_local);
            lex->select_lex.table_list.elements=1;
            lex->select_lex.table_list.next=
              (uchar**) &(table_list->next_local);
            table_list->next_local= 0;
            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 515:

/* Line 1455 of yacc.c  */
#line 4516 "sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 516:

/* Line 1455 of yacc.c  */
#line 4521 "sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 517:

/* Line 1455 of yacc.c  */
#line 4526 "sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 518:

/* Line 1455 of yacc.c  */
#line 4531 "sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 519:

/* Line 1455 of yacc.c  */
#line 4533 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 520:

/* Line 1455 of yacc.c  */
#line 4535 "sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 521:

/* Line 1455 of yacc.c  */
#line 4537 "sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 522:

/* Line 1455 of yacc.c  */
#line 4543 "sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 523:

/* Line 1455 of yacc.c  */
#line 4551 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 524:

/* Line 1455 of yacc.c  */
#line 4569 "sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
              {
                my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                         (yyvsp[(4) - (4)].charset)->name, cinfo->default_table_charset->csname);
                MYSQL_YYABORT;
              }
              Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
              Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 525:

/* Line 1455 of yacc.c  */
#line 4586 "sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 526:

/* Line 1455 of yacc.c  */
#line 4609 "sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 527:

/* Line 1455 of yacc.c  */
#line 4622 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 528:

/* Line 1455 of yacc.c  */
#line 4623 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 529:

/* Line 1455 of yacc.c  */
#line 4624 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 530:

/* Line 1455 of yacc.c  */
#line 4625 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 531:

/* Line 1455 of yacc.c  */
#line 4626 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 532:

/* Line 1455 of yacc.c  */
#line 4627 "sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 533:

/* Line 1455 of yacc.c  */
#line 4631 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 534:

/* Line 1455 of yacc.c  */
#line 4632 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 535:

/* Line 1455 of yacc.c  */
#line 4633 "sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 536:

/* Line 1455 of yacc.c  */
#line 4637 "sql_yacc.yy"
    {}
    break;

  case 538:

/* Line 1455 of yacc.c  */
#line 4642 "sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 539:

/* Line 1455 of yacc.c  */
#line 4643 "sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 540:

/* Line 1455 of yacc.c  */
#line 4644 "sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 541:

/* Line 1455 of yacc.c  */
#line 4645 "sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 547:

/* Line 1455 of yacc.c  */
#line 4661 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 548:

/* Line 1455 of yacc.c  */
#line 4668 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if ((yyvsp[(1) - (7)].key_type) != Key::FULLTEXT && lex->key_create_info.parser_name.str)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Key *key= new Key((yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].simple_string), &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 549:

/* Line 1455 of yacc.c  */
#line 4684 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(3) - (8)].simple_string) ? (yyvsp[(3) - (8)].simple_string) : (yyvsp[(1) - (8)].simple_string);
            Key *key= new Key((yyvsp[(2) - (8)].key_type), key_name, &lex->key_create_info, 0,
                              lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 550:

/* Line 1455 of yacc.c  */
#line 4695 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            const char *key_name= (yyvsp[(1) - (8)].simple_string) ? (yyvsp[(1) - (8)].simple_string) : (yyvsp[(4) - (8)].simple_string);
            const char *fkey_name = (yyvsp[(4) - (8)].simple_string) ? (yyvsp[(4) - (8)].simple_string) : key_name;
            Key *key= new Foreign_key(fkey_name, lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            key= new Key(Key::MULTIPLE, key_name,
                         &default_key_create_info, 1,
                         lex->col_list);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->col_list.empty(); /* Alloced by sql_alloc */
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 551:

/* Line 1455 of yacc.c  */
#line 4719 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 552:

/* Line 1455 of yacc.c  */
#line 4723 "sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 556:

/* Line 1455 of yacc.c  */
#line 4738 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; }
    break;

  case 557:

/* Line 1455 of yacc.c  */
#line 4739 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(1) - (1)].simple_string); }
    break;

  case 558:

/* Line 1455 of yacc.c  */
#line 4743 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(2) - (2)].simple_string); }
    break;

  case 559:

/* Line 1455 of yacc.c  */
#line 4748 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 560:

/* Line 1455 of yacc.c  */
#line 4757 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 561:

/* Line 1455 of yacc.c  */
#line 4770 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 562:

/* Line 1455 of yacc.c  */
#line 4771 "sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 563:

/* Line 1455 of yacc.c  */
#line 4772 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 564:

/* Line 1455 of yacc.c  */
#line 4774 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 565:

/* Line 1455 of yacc.c  */
#line 4779 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 566:

/* Line 1455 of yacc.c  */
#line 4783 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 567:

/* Line 1455 of yacc.c  */
#line 4788 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 568:

/* Line 1455 of yacc.c  */
#line 4793 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 569:

/* Line 1455 of yacc.c  */
#line 4797 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 570:

/* Line 1455 of yacc.c  */
#line 4802 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 571:

/* Line 1455 of yacc.c  */
#line 4807 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 572:

/* Line 1455 of yacc.c  */
#line 4813 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 573:

/* Line 1455 of yacc.c  */
#line 4818 "sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 574:

/* Line 1455 of yacc.c  */
#line 4824 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 575:

/* Line 1455 of yacc.c  */
#line 4828 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 576:

/* Line 1455 of yacc.c  */
#line 4833 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 577:

/* Line 1455 of yacc.c  */
#line 4838 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 578:

/* Line 1455 of yacc.c  */
#line 4840 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 579:

/* Line 1455 of yacc.c  */
#line 4842 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 580:

/* Line 1455 of yacc.c  */
#line 4844 "sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 581:

/* Line 1455 of yacc.c  */
#line 4857 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 582:

/* Line 1455 of yacc.c  */
#line 4859 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 583:

/* Line 1455 of yacc.c  */
#line 4864 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 584:

/* Line 1455 of yacc.c  */
#line 4869 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 585:

/* Line 1455 of yacc.c  */
#line 4881 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 586:

/* Line 1455 of yacc.c  */
#line 4886 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 587:

/* Line 1455 of yacc.c  */
#line 4891 "sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 588:

/* Line 1455 of yacc.c  */
#line 4896 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 589:

/* Line 1455 of yacc.c  */
#line 4898 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 590:

/* Line 1455 of yacc.c  */
#line 4900 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 591:

/* Line 1455 of yacc.c  */
#line 4902 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 592:

/* Line 1455 of yacc.c  */
#line 4904 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 593:

/* Line 1455 of yacc.c  */
#line 4906 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 594:

/* Line 1455 of yacc.c  */
#line 4908 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 595:

/* Line 1455 of yacc.c  */
#line 4910 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 596:

/* Line 1455 of yacc.c  */
#line 4912 "sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 597:

/* Line 1455 of yacc.c  */
#line 4914 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 598:

/* Line 1455 of yacc.c  */
#line 4916 "sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 599:

/* Line 1455 of yacc.c  */
#line 4918 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 600:

/* Line 1455 of yacc.c  */
#line 4920 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 601:

/* Line 1455 of yacc.c  */
#line 4922 "sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 602:

/* Line 1455 of yacc.c  */
#line 4930 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 603:

/* Line 1455 of yacc.c  */
#line 4931 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 604:

/* Line 1455 of yacc.c  */
#line 4933 "sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 605:

/* Line 1455 of yacc.c  */
#line 4937 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 606:

/* Line 1455 of yacc.c  */
#line 4938 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 607:

/* Line 1455 of yacc.c  */
#line 4939 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 608:

/* Line 1455 of yacc.c  */
#line 4940 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 609:

/* Line 1455 of yacc.c  */
#line 4941 "sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 610:

/* Line 1455 of yacc.c  */
#line 4945 "sql_yacc.yy"
    {}
    break;

  case 611:

/* Line 1455 of yacc.c  */
#line 4949 "sql_yacc.yy"
    {}
    break;

  case 612:

/* Line 1455 of yacc.c  */
#line 4950 "sql_yacc.yy"
    {}
    break;

  case 613:

/* Line 1455 of yacc.c  */
#line 4954 "sql_yacc.yy"
    {}
    break;

  case 614:

/* Line 1455 of yacc.c  */
#line 4955 "sql_yacc.yy"
    {}
    break;

  case 615:

/* Line 1455 of yacc.c  */
#line 4959 "sql_yacc.yy"
    {}
    break;

  case 616:

/* Line 1455 of yacc.c  */
#line 4960 "sql_yacc.yy"
    {}
    break;

  case 617:

/* Line 1455 of yacc.c  */
#line 4961 "sql_yacc.yy"
    {}
    break;

  case 618:

/* Line 1455 of yacc.c  */
#line 4962 "sql_yacc.yy"
    {}
    break;

  case 619:

/* Line 1455 of yacc.c  */
#line 4963 "sql_yacc.yy"
    {}
    break;

  case 620:

/* Line 1455 of yacc.c  */
#line 4967 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 621:

/* Line 1455 of yacc.c  */
#line 4968 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 622:

/* Line 1455 of yacc.c  */
#line 4969 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 623:

/* Line 1455 of yacc.c  */
#line 4970 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 624:

/* Line 1455 of yacc.c  */
#line 4971 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 625:

/* Line 1455 of yacc.c  */
#line 4976 "sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 626:

/* Line 1455 of yacc.c  */
#line 4981 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 627:

/* Line 1455 of yacc.c  */
#line 4983 "sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 628:

/* Line 1455 of yacc.c  */
#line 4988 "sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 629:

/* Line 1455 of yacc.c  */
#line 4990 "sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 630:

/* Line 1455 of yacc.c  */
#line 4992 "sql_yacc.yy"
    {}
    break;

  case 631:

/* Line 1455 of yacc.c  */
#line 4997 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 632:

/* Line 1455 of yacc.c  */
#line 5005 "sql_yacc.yy"
    {}
    break;

  case 633:

/* Line 1455 of yacc.c  */
#line 5006 "sql_yacc.yy"
    {}
    break;

  case 634:

/* Line 1455 of yacc.c  */
#line 5010 "sql_yacc.yy"
    {}
    break;

  case 635:

/* Line 1455 of yacc.c  */
#line 5011 "sql_yacc.yy"
    {}
    break;

  case 636:

/* Line 1455 of yacc.c  */
#line 5015 "sql_yacc.yy"
    {}
    break;

  case 637:

/* Line 1455 of yacc.c  */
#line 5016 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 638:

/* Line 1455 of yacc.c  */
#line 5017 "sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 639:

/* Line 1455 of yacc.c  */
#line 5021 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 640:

/* Line 1455 of yacc.c  */
#line 5022 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 641:

/* Line 1455 of yacc.c  */
#line 5023 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 642:

/* Line 1455 of yacc.c  */
#line 5024 "sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 643:

/* Line 1455 of yacc.c  */
#line 5027 "sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 644:

/* Line 1455 of yacc.c  */
#line 5028 "sql_yacc.yy"
    { }
    break;

  case 645:

/* Line 1455 of yacc.c  */
#line 5031 "sql_yacc.yy"
    {}
    break;

  case 646:

/* Line 1455 of yacc.c  */
#line 5032 "sql_yacc.yy"
    {}
    break;

  case 647:

/* Line 1455 of yacc.c  */
#line 5036 "sql_yacc.yy"
    {}
    break;

  case 648:

/* Line 1455 of yacc.c  */
#line 5037 "sql_yacc.yy"
    {}
    break;

  case 649:

/* Line 1455 of yacc.c  */
#line 5041 "sql_yacc.yy"
    {}
    break;

  case 651:

/* Line 1455 of yacc.c  */
#line 5046 "sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 652:

/* Line 1455 of yacc.c  */
#line 5047 "sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 653:

/* Line 1455 of yacc.c  */
#line 5048 "sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 654:

/* Line 1455 of yacc.c  */
#line 5050 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 655:

/* Line 1455 of yacc.c  */
#line 5056 "sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 656:

/* Line 1455 of yacc.c  */
#line 5058 "sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 657:

/* Line 1455 of yacc.c  */
#line 5064 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 658:

/* Line 1455 of yacc.c  */
#line 5070 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 659:

/* Line 1455 of yacc.c  */
#line 5076 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 660:

/* Line 1455 of yacc.c  */
#line 5081 "sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 661:

/* Line 1455 of yacc.c  */
#line 5083 "sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 662:

/* Line 1455 of yacc.c  */
#line 5099 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 663:

/* Line 1455 of yacc.c  */
#line 5105 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 664:

/* Line 1455 of yacc.c  */
#line 5109 "sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1455 of yacc.c  */
#line 5110 "sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1455 of yacc.c  */
#line 5115 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 667:

/* Line 1455 of yacc.c  */
#line 5122 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 668:

/* Line 1455 of yacc.c  */
#line 5126 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 669:

/* Line 1455 of yacc.c  */
#line 5127 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 670:

/* Line 1455 of yacc.c  */
#line 5131 "sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 671:

/* Line 1455 of yacc.c  */
#line 5132 "sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 672:

/* Line 1455 of yacc.c  */
#line 5137 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 673:

/* Line 1455 of yacc.c  */
#line 5145 "sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 674:

/* Line 1455 of yacc.c  */
#line 5149 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 675:

/* Line 1455 of yacc.c  */
#line 5150 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 676:

/* Line 1455 of yacc.c  */
#line 5155 "sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 677:

/* Line 1455 of yacc.c  */
#line 5165 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 678:

/* Line 1455 of yacc.c  */
#line 5166 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 679:

/* Line 1455 of yacc.c  */
#line 5170 "sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 680:

/* Line 1455 of yacc.c  */
#line 5171 "sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 681:

/* Line 1455 of yacc.c  */
#line 5175 "sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1455 of yacc.c  */
#line 5176 "sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1455 of yacc.c  */
#line 5180 "sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 684:

/* Line 1455 of yacc.c  */
#line 5181 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 685:

/* Line 1455 of yacc.c  */
#line 5182 "sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 686:

/* Line 1455 of yacc.c  */
#line 5184 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 687:

/* Line 1455 of yacc.c  */
#line 5192 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 688:

/* Line 1455 of yacc.c  */
#line 5193 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 689:

/* Line 1455 of yacc.c  */
#line 5197 "sql_yacc.yy"
    { }
    break;

  case 690:

/* Line 1455 of yacc.c  */
#line 5198 "sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 691:

/* Line 1455 of yacc.c  */
#line 5202 "sql_yacc.yy"
    { Lex->charset= NULL; }
    break;

  case 692:

/* Line 1455 of yacc.c  */
#line 5203 "sql_yacc.yy"
    { Lex->charset=&my_charset_latin1; }
    break;

  case 693:

/* Line 1455 of yacc.c  */
#line 5205 "sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 694:

/* Line 1455 of yacc.c  */
#line 5213 "sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (2)].charset); }
    break;

  case 697:

/* Line 1455 of yacc.c  */
#line 5223 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->fk_delete_opt= lex->fk_update_opt= lex->fk_match_option= 0;
            lex->ref_list.empty();
          }
    break;

  case 698:

/* Line 1455 of yacc.c  */
#line 5229 "sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (4)].table);
          }
    break;

  case 699:

/* Line 1455 of yacc.c  */
#line 5235 "sql_yacc.yy"
    {}
    break;

  case 700:

/* Line 1455 of yacc.c  */
#line 5236 "sql_yacc.yy"
    {}
    break;

  case 701:

/* Line 1455 of yacc.c  */
#line 5241 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 702:

/* Line 1455 of yacc.c  */
#line 5248 "sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 703:

/* Line 1455 of yacc.c  */
#line 5257 "sql_yacc.yy"
    {}
    break;

  case 704:

/* Line 1455 of yacc.c  */
#line 5258 "sql_yacc.yy"
    {}
    break;

  case 705:

/* Line 1455 of yacc.c  */
#line 5262 "sql_yacc.yy"
    {}
    break;

  case 706:

/* Line 1455 of yacc.c  */
#line 5263 "sql_yacc.yy"
    {}
    break;

  case 707:

/* Line 1455 of yacc.c  */
#line 5267 "sql_yacc.yy"
    { Lex->fk_delete_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 708:

/* Line 1455 of yacc.c  */
#line 5268 "sql_yacc.yy"
    { Lex->fk_update_opt= (yyvsp[(3) - (3)].num); }
    break;

  case 709:

/* Line 1455 of yacc.c  */
#line 5269 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 710:

/* Line 1455 of yacc.c  */
#line 5270 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 711:

/* Line 1455 of yacc.c  */
#line 5271 "sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 712:

/* Line 1455 of yacc.c  */
#line 5275 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 713:

/* Line 1455 of yacc.c  */
#line 5276 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 714:

/* Line 1455 of yacc.c  */
#line 5277 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 715:

/* Line 1455 of yacc.c  */
#line 5278 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 716:

/* Line 1455 of yacc.c  */
#line 5279 "sql_yacc.yy"
    { (yyval.num)= (int) Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 717:

/* Line 1455 of yacc.c  */
#line 5283 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 718:

/* Line 1455 of yacc.c  */
#line 5284 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT; }
    break;

  case 719:

/* Line 1455 of yacc.c  */
#line 5286 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 720:

/* Line 1455 of yacc.c  */
#line 5298 "sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 721:

/* Line 1455 of yacc.c  */
#line 5299 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 722:

/* Line 1455 of yacc.c  */
#line 5303 "sql_yacc.yy"
    {}
    break;

  case 723:

/* Line 1455 of yacc.c  */
#line 5304 "sql_yacc.yy"
    {}
    break;

  case 724:

/* Line 1455 of yacc.c  */
#line 5308 "sql_yacc.yy"
    {}
    break;

  case 726:

/* Line 1455 of yacc.c  */
#line 5313 "sql_yacc.yy"
    {}
    break;

  case 727:

/* Line 1455 of yacc.c  */
#line 5314 "sql_yacc.yy"
    {}
    break;

  case 728:

/* Line 1455 of yacc.c  */
#line 5315 "sql_yacc.yy"
    {}
    break;

  case 729:

/* Line 1455 of yacc.c  */
#line 5319 "sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 730:

/* Line 1455 of yacc.c  */
#line 5320 "sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 731:

/* Line 1455 of yacc.c  */
#line 5321 "sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 732:

/* Line 1455 of yacc.c  */
#line 5323 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 733:

/* Line 1455 of yacc.c  */
#line 5335 "sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 736:

/* Line 1455 of yacc.c  */
#line 5352 "sql_yacc.yy"
    {}
    break;

  case 740:

/* Line 1455 of yacc.c  */
#line 5362 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 741:

/* Line 1455 of yacc.c  */
#line 5363 "sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 743:

/* Line 1455 of yacc.c  */
#line 5369 "sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 744:

/* Line 1455 of yacc.c  */
#line 5371 "sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 745:

/* Line 1455 of yacc.c  */
#line 5383 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 746:

/* Line 1455 of yacc.c  */
#line 5384 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 747:

/* Line 1455 of yacc.c  */
#line 5385 "sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 748:

/* Line 1455 of yacc.c  */
#line 5389 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 749:

/* Line 1455 of yacc.c  */
#line 5390 "sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 750:

/* Line 1455 of yacc.c  */
#line 5395 "sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str).str);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 751:

/* Line 1455 of yacc.c  */
#line 5401 "sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str).str,(uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 752:

/* Line 1455 of yacc.c  */
#line 5414 "sql_yacc.yy"
    { (yyval.simple_string)=(char*) 0; /* Default length */ }
    break;

  case 753:

/* Line 1455 of yacc.c  */
#line 5415 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 754:

/* Line 1455 of yacc.c  */
#line 5419 "sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 755:

/* Line 1455 of yacc.c  */
#line 5420 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 756:

/* Line 1455 of yacc.c  */
#line 5424 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 757:

/* Line 1455 of yacc.c  */
#line 5425 "sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 758:

/* Line 1455 of yacc.c  */
#line 5433 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db=
              ((TABLE_LIST*) lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 759:

/* Line 1455 of yacc.c  */
#line 5457 "sql_yacc.yy"
    {}
    break;

  case 760:

/* Line 1455 of yacc.c  */
#line 5459 "sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 761:

/* Line 1455 of yacc.c  */
#line 5464 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 762:

/* Line 1455 of yacc.c  */
#line 5473 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 763:

/* Line 1455 of yacc.c  */
#line 5484 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 764:

/* Line 1455 of yacc.c  */
#line 5495 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 765:

/* Line 1455 of yacc.c  */
#line 5502 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 766:

/* Line 1455 of yacc.c  */
#line 5513 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 767:

/* Line 1455 of yacc.c  */
#line 5520 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 768:

/* Line 1455 of yacc.c  */
#line 5531 "sql_yacc.yy"
    {}
    break;

  case 769:

/* Line 1455 of yacc.c  */
#line 5538 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 770:

/* Line 1455 of yacc.c  */
#line 5550 "sql_yacc.yy"
    {}
    break;

  case 771:

/* Line 1455 of yacc.c  */
#line 5552 "sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 772:

/* Line 1455 of yacc.c  */
#line 5572 "sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 773:

/* Line 1455 of yacc.c  */
#line 5585 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 774:

/* Line 1455 of yacc.c  */
#line 5590 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 775:

/* Line 1455 of yacc.c  */
#line 5595 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 776:

/* Line 1455 of yacc.c  */
#line 5600 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 777:

/* Line 1455 of yacc.c  */
#line 5605 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 778:

/* Line 1455 of yacc.c  */
#line 5614 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 779:

/* Line 1455 of yacc.c  */
#line 5615 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 780:

/* Line 1455 of yacc.c  */
#line 5616 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 781:

/* Line 1455 of yacc.c  */
#line 5617 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 782:

/* Line 1455 of yacc.c  */
#line 5621 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 783:

/* Line 1455 of yacc.c  */
#line 5623 "sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 784:

/* Line 1455 of yacc.c  */
#line 5634 "sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 785:

/* Line 1455 of yacc.c  */
#line 5635 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 786:

/* Line 1455 of yacc.c  */
#line 5639 "sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 787:

/* Line 1455 of yacc.c  */
#line 5640 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 789:

/* Line 1455 of yacc.c  */
#line 5645 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 790:

/* Line 1455 of yacc.c  */
#line 5646 "sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 796:

/* Line 1455 of yacc.c  */
#line 5663 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 797:

/* Line 1455 of yacc.c  */
#line 5668 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 798:

/* Line 1455 of yacc.c  */
#line 5675 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 800:

/* Line 1455 of yacc.c  */
#line 5685 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 801:

/* Line 1455 of yacc.c  */
#line 5693 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_CHECK;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->check_opt.init();
          }
    break;

  case 803:

/* Line 1455 of yacc.c  */
#line 5702 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
          }
    break;

  case 805:

/* Line 1455 of yacc.c  */
#line 5711 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.no_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 807:

/* Line 1455 of yacc.c  */
#line 5722 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 808:

/* Line 1455 of yacc.c  */
#line 5729 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 810:

/* Line 1455 of yacc.c  */
#line 5737 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 811:

/* Line 1455 of yacc.c  */
#line 5749 "sql_yacc.yy"
    {}
    break;

  case 813:

/* Line 1455 of yacc.c  */
#line 5755 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 814:

/* Line 1455 of yacc.c  */
#line 5760 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 815:

/* Line 1455 of yacc.c  */
#line 5768 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 817:

/* Line 1455 of yacc.c  */
#line 5783 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 818:

/* Line 1455 of yacc.c  */
#line 5787 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 819:

/* Line 1455 of yacc.c  */
#line 5791 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->no_parts= lex->part_info->partitions.elements;
          }
    break;

  case 820:

/* Line 1455 of yacc.c  */
#line 5798 "sql_yacc.yy"
    {}
    break;

  case 821:

/* Line 1455 of yacc.c  */
#line 5799 "sql_yacc.yy"
    {}
    break;

  case 822:

/* Line 1455 of yacc.c  */
#line 5804 "sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 825:

/* Line 1455 of yacc.c  */
#line 5824 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 826:

/* Line 1455 of yacc.c  */
#line 5832 "sql_yacc.yy"
    { }
    break;

  case 827:

/* Line 1455 of yacc.c  */
#line 5834 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 828:

/* Line 1455 of yacc.c  */
#line 5838 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 829:

/* Line 1455 of yacc.c  */
#line 5842 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 831:

/* Line 1455 of yacc.c  */
#line 5849 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 832:

/* Line 1455 of yacc.c  */
#line 5858 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 834:

/* Line 1455 of yacc.c  */
#line 5871 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 835:

/* Line 1455 of yacc.c  */
#line 5880 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 836:

/* Line 1455 of yacc.c  */
#line 5884 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 837:

/* Line 1455 of yacc.c  */
#line 5893 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 838:

/* Line 1455 of yacc.c  */
#line 5902 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 839:

/* Line 1455 of yacc.c  */
#line 5908 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 840:

/* Line 1455 of yacc.c  */
#line 5914 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 841:

/* Line 1455 of yacc.c  */
#line 5923 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 842:

/* Line 1455 of yacc.c  */
#line 5932 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 843:

/* Line 1455 of yacc.c  */
#line 5951 "sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 844:

/* Line 1455 of yacc.c  */
#line 5972 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 845:

/* Line 1455 of yacc.c  */
#line 5977 "sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_FORCE;
          }
    break;

  case 846:

/* Line 1455 of yacc.c  */
#line 5981 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 847:

/* Line 1455 of yacc.c  */
#line 5988 "sql_yacc.yy"
    {}
    break;

  case 848:

/* Line 1455 of yacc.c  */
#line 5989 "sql_yacc.yy"
    {}
    break;

  case 849:

/* Line 1455 of yacc.c  */
#line 5993 "sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 850:

/* Line 1455 of yacc.c  */
#line 5994 "sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 851:

/* Line 1455 of yacc.c  */
#line 5998 "sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 852:

/* Line 1455 of yacc.c  */
#line 5999 "sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 853:

/* Line 1455 of yacc.c  */
#line 6000 "sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 854:

/* Line 1455 of yacc.c  */
#line 6004 "sql_yacc.yy"
    {}
    break;

  case 855:

/* Line 1455 of yacc.c  */
#line 6005 "sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 856:

/* Line 1455 of yacc.c  */
#line 6006 "sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 857:

/* Line 1455 of yacc.c  */
#line 6010 "sql_yacc.yy"
    {}
    break;

  case 858:

/* Line 1455 of yacc.c  */
#line 6011 "sql_yacc.yy"
    {}
    break;

  case 859:

/* Line 1455 of yacc.c  */
#line 6012 "sql_yacc.yy"
    {}
    break;

  case 860:

/* Line 1455 of yacc.c  */
#line 6013 "sql_yacc.yy"
    {}
    break;

  case 861:

/* Line 1455 of yacc.c  */
#line 6022 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 862:

/* Line 1455 of yacc.c  */
#line 6031 "sql_yacc.yy"
    {}
    break;

  case 863:

/* Line 1455 of yacc.c  */
#line 6033 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 864:

/* Line 1455 of yacc.c  */
#line 6040 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 865:

/* Line 1455 of yacc.c  */
#line 6048 "sql_yacc.yy"
    {}
    break;

  case 866:

/* Line 1455 of yacc.c  */
#line 6050 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 867:

/* Line 1455 of yacc.c  */
#line 6059 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 868:

/* Line 1455 of yacc.c  */
#line 6067 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 869:

/* Line 1455 of yacc.c  */
#line 6069 "sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 870:

/* Line 1455 of yacc.c  */
#line 6075 "sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 871:

/* Line 1455 of yacc.c  */
#line 6077 "sql_yacc.yy"
    {}
    break;

  case 874:

/* Line 1455 of yacc.c  */
#line 6086 "sql_yacc.yy"
    {}
    break;

  case 875:

/* Line 1455 of yacc.c  */
#line 6087 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 876:

/* Line 1455 of yacc.c  */
#line 6088 "sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 877:

/* Line 1455 of yacc.c  */
#line 6092 "sql_yacc.yy"
    {}
    break;

  case 878:

/* Line 1455 of yacc.c  */
#line 6094 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 881:

/* Line 1455 of yacc.c  */
#line 6115 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RESTORE_TABLE;
          }
    break;

  case 882:

/* Line 1455 of yacc.c  */
#line 6119 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 883:

/* Line 1455 of yacc.c  */
#line 6126 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BACKUP_TABLE;
          }
    break;

  case 884:

/* Line 1455 of yacc.c  */
#line 6130 "sql_yacc.yy"
    {
            Lex->backup_dir = (yyvsp[(6) - (6)].lex_str).str;
          }
    break;

  case 885:

/* Line 1455 of yacc.c  */
#line 6137 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
          }
    break;

  case 886:

/* Line 1455 of yacc.c  */
#line 6142 "sql_yacc.yy"
    {}
    break;

  case 887:

/* Line 1455 of yacc.c  */
#line 6146 "sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 888:

/* Line 1455 of yacc.c  */
#line 6147 "sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 889:

/* Line 1455 of yacc.c  */
#line 6148 "sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 890:

/* Line 1455 of yacc.c  */
#line 6153 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 891:

/* Line 1455 of yacc.c  */
#line 6161 "sql_yacc.yy"
    {}
    break;

  case 892:

/* Line 1455 of yacc.c  */
#line 6165 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 893:

/* Line 1455 of yacc.c  */
#line 6166 "sql_yacc.yy"
    {}
    break;

  case 894:

/* Line 1455 of yacc.c  */
#line 6170 "sql_yacc.yy"
    {}
    break;

  case 895:

/* Line 1455 of yacc.c  */
#line 6171 "sql_yacc.yy"
    {}
    break;

  case 896:

/* Line 1455 of yacc.c  */
#line 6175 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 897:

/* Line 1455 of yacc.c  */
#line 6176 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 898:

/* Line 1455 of yacc.c  */
#line 6177 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 899:

/* Line 1455 of yacc.c  */
#line 6182 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 900:

/* Line 1455 of yacc.c  */
#line 6190 "sql_yacc.yy"
    {}
    break;

  case 901:

/* Line 1455 of yacc.c  */
#line 6195 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 902:

/* Line 1455 of yacc.c  */
#line 6203 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 903:

/* Line 1455 of yacc.c  */
#line 6216 "sql_yacc.yy"
    {}
    break;

  case 904:

/* Line 1455 of yacc.c  */
#line 6220 "sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 905:

/* Line 1455 of yacc.c  */
#line 6221 "sql_yacc.yy"
    {}
    break;

  case 906:

/* Line 1455 of yacc.c  */
#line 6225 "sql_yacc.yy"
    {}
    break;

  case 907:

/* Line 1455 of yacc.c  */
#line 6226 "sql_yacc.yy"
    {}
    break;

  case 908:

/* Line 1455 of yacc.c  */
#line 6230 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 909:

/* Line 1455 of yacc.c  */
#line 6231 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 910:

/* Line 1455 of yacc.c  */
#line 6232 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 911:

/* Line 1455 of yacc.c  */
#line 6233 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 912:

/* Line 1455 of yacc.c  */
#line 6234 "sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 913:

/* Line 1455 of yacc.c  */
#line 6235 "sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 914:

/* Line 1455 of yacc.c  */
#line 6240 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
          }
    break;

  case 915:

/* Line 1455 of yacc.c  */
#line 6248 "sql_yacc.yy"
    {}
    break;

  case 916:

/* Line 1455 of yacc.c  */
#line 6252 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 917:

/* Line 1455 of yacc.c  */
#line 6253 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 918:

/* Line 1455 of yacc.c  */
#line 6254 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 919:

/* Line 1455 of yacc.c  */
#line 6259 "sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 920:

/* Line 1455 of yacc.c  */
#line 6263 "sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1455 of yacc.c  */
#line 6265 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 922:

/* Line 1455 of yacc.c  */
#line 6272 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 923:

/* Line 1455 of yacc.c  */
#line 6277 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 926:

/* Line 1455 of yacc.c  */
#line 6290 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 927:

/* Line 1455 of yacc.c  */
#line 6303 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 930:

/* Line 1455 of yacc.c  */
#line 6317 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ, 
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 931:

/* Line 1455 of yacc.c  */
#line 6325 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 932:

/* Line 1455 of yacc.c  */
#line 6326 "sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 933:

/* Line 1455 of yacc.c  */
#line 6331 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
          }
    break;

  case 934:

/* Line 1455 of yacc.c  */
#line 6336 "sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1455 of yacc.c  */
#line 6346 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 938:

/* Line 1455 of yacc.c  */
#line 6354 "sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        global_system_variables.old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 940:

/* Line 1455 of yacc.c  */
#line 6365 "sql_yacc.yy"
    { }
    break;

  case 942:

/* Line 1455 of yacc.c  */
#line 6371 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 943:

/* Line 1455 of yacc.c  */
#line 6372 "sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 944:

/* Line 1455 of yacc.c  */
#line 6382 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 947:

/* Line 1455 of yacc.c  */
#line 6396 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (sel->set_braces(1))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                !sel->master_unit()->first_select()->braces &&
                sel->master_unit()->first_select()->linkage ==
                UNION_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                sel->master_unit()->fake_select_lex)
            {
 	       my_error(ER_WRONG_USAGE, MYF(0),
                        "CUBE/ROLLUP", "ORDER BY");
               MYSQL_YYABORT;
            }
            /* select in braces, can't contain global parameters */
            if (sel->master_unit()->fake_select_lex)
              sel->master_unit()->global_parameters=
                 sel->master_unit()->fake_select_lex;
          }
    break;

  case 949:

/* Line 1455 of yacc.c  */
#line 6430 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 951:

/* Line 1455 of yacc.c  */
#line 6449 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 952:

/* Line 1455 of yacc.c  */
#line 6457 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 954:

/* Line 1455 of yacc.c  */
#line 6464 "sql_yacc.yy"
    {}
    break;

  case 959:

/* Line 1455 of yacc.c  */
#line 6474 "sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table= 
                (TABLE_LIST *) Select->table_list.first;
          }
    break;

  case 962:

/* Line 1455 of yacc.c  */
#line 6489 "sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 965:

/* Line 1455 of yacc.c  */
#line 6504 "sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 966:

/* Line 1455 of yacc.c  */
#line 6506 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Lex->lock_option=  TL_READ_HIGH_PRIORITY;
            Lex->current_select->lock_option= TL_READ_HIGH_PRIORITY;
          }
    break;

  case 967:

/* Line 1455 of yacc.c  */
#line 6512 "sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 968:

/* Line 1455 of yacc.c  */
#line 6513 "sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 969:

/* Line 1455 of yacc.c  */
#line 6514 "sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 970:

/* Line 1455 of yacc.c  */
#line 6516 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 971:

/* Line 1455 of yacc.c  */
#line 6522 "sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 972:

/* Line 1455 of yacc.c  */
#line 6528 "sql_yacc.yy"
    {
            Lex->safe_to_cache_query=0;
            Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
            Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
          }
    break;

  case 973:

/* Line 1455 of yacc.c  */
#line 6534 "sql_yacc.yy"
    {
            /*
             Honor this flag only if SQL_NO_CACHE wasn't specified AND
             we are parsing the outermost SELECT in the query.
            */
            if (Lex->select_lex.sql_cache != SELECT_LEX::SQL_NO_CACHE &&
                Lex->current_select == &Lex->select_lex)
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 974:

/* Line 1455 of yacc.c  */
#line 6547 "sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 976:

/* Line 1455 of yacc.c  */
#line 6553 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->current_select->lock_option= TL_WRITE;
            lex->safe_to_cache_query=0;
            lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 977:

/* Line 1455 of yacc.c  */
#line 6561 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->current_select->lock_option= TL_READ_WITH_SHARED_LOCKS;
            lex->safe_to_cache_query=0;
          }
    break;

  case 980:

/* Line 1455 of yacc.c  */
#line 6574 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 981:

/* Line 1455 of yacc.c  */
#line 6589 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 982:

/* Line 1455 of yacc.c  */
#line 6614 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 983:

/* Line 1455 of yacc.c  */
#line 6620 "sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 984:

/* Line 1455 of yacc.c  */
#line 6626 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); /* table.* */ }
    break;

  case 985:

/* Line 1455 of yacc.c  */
#line 6627 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 986:

/* Line 1455 of yacc.c  */
#line 6631 "sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 987:

/* Line 1455 of yacc.c  */
#line 6632 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 988:

/* Line 1455 of yacc.c  */
#line 6633 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 989:

/* Line 1455 of yacc.c  */
#line 6634 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 990:

/* Line 1455 of yacc.c  */
#line 6635 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 991:

/* Line 1455 of yacc.c  */
#line 6639 "sql_yacc.yy"
    {}
    break;

  case 992:

/* Line 1455 of yacc.c  */
#line 6640 "sql_yacc.yy"
    {}
    break;

  case 993:

/* Line 1455 of yacc.c  */
#line 6646 "sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 994:

/* Line 1455 of yacc.c  */
#line 6697 "sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 995:

/* Line 1455 of yacc.c  */
#line 6704 "sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 996:

/* Line 1455 of yacc.c  */
#line 6747 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 997:

/* Line 1455 of yacc.c  */
#line 6753 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 998:

/* Line 1455 of yacc.c  */
#line 6759 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 999:

/* Line 1455 of yacc.c  */
#line 6765 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1000:

/* Line 1455 of yacc.c  */
#line 6771 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1001:

/* Line 1455 of yacc.c  */
#line 6777 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1002:

/* Line 1455 of yacc.c  */
#line 6783 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1455 of yacc.c  */
#line 6793 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1005:

/* Line 1455 of yacc.c  */
#line 6799 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1006:

/* Line 1455 of yacc.c  */
#line 6805 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1007:

/* Line 1455 of yacc.c  */
#line 6811 "sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1008:

/* Line 1455 of yacc.c  */
#line 6817 "sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1010:

/* Line 1455 of yacc.c  */
#line 6827 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1011:

/* Line 1455 of yacc.c  */
#line 6833 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1012:

/* Line 1455 of yacc.c  */
#line 6843 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1013:

/* Line 1455 of yacc.c  */
#line 6849 "sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1014:

/* Line 1455 of yacc.c  */
#line 6857 "sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1015:

/* Line 1455 of yacc.c  */
#line 6863 "sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1016:

/* Line 1455 of yacc.c  */
#line 6873 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1455 of yacc.c  */
#line 6879 "sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1018:

/* Line 1455 of yacc.c  */
#line 6888 "sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1019:

/* Line 1455 of yacc.c  */
#line 6898 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1020:

/* Line 1455 of yacc.c  */
#line 6904 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1021:

/* Line 1455 of yacc.c  */
#line 6914 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1022:

/* Line 1455 of yacc.c  */
#line 6920 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1024:

/* Line 1455 of yacc.c  */
#line 6933 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1025:

/* Line 1455 of yacc.c  */
#line 6939 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1026:

/* Line 1455 of yacc.c  */
#line 6945 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1027:

/* Line 1455 of yacc.c  */
#line 6951 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1028:

/* Line 1455 of yacc.c  */
#line 6957 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1029:

/* Line 1455 of yacc.c  */
#line 6963 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1030:

/* Line 1455 of yacc.c  */
#line 6969 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1031:

/* Line 1455 of yacc.c  */
#line 6975 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1032:

/* Line 1455 of yacc.c  */
#line 6981 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1033:

/* Line 1455 of yacc.c  */
#line 6987 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1034:

/* Line 1455 of yacc.c  */
#line 6993 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1035:

/* Line 1455 of yacc.c  */
#line 6999 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1036:

/* Line 1455 of yacc.c  */
#line 7005 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1037:

/* Line 1455 of yacc.c  */
#line 7011 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1047:

/* Line 1455 of yacc.c  */
#line 7040 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1048:

/* Line 1455 of yacc.c  */
#line 7041 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1049:

/* Line 1455 of yacc.c  */
#line 7042 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1050:

/* Line 1455 of yacc.c  */
#line 7043 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1051:

/* Line 1455 of yacc.c  */
#line 7044 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1052:

/* Line 1455 of yacc.c  */
#line 7045 "sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1053:

/* Line 1455 of yacc.c  */
#line 7049 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1054:

/* Line 1455 of yacc.c  */
#line 7050 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1060:

/* Line 1455 of yacc.c  */
#line 7060 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1065:

/* Line 1455 of yacc.c  */
#line 7076 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1455 of yacc.c  */
#line 7082 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1067:

/* Line 1455 of yacc.c  */
#line 7086 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1455 of yacc.c  */
#line 7092 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1455 of yacc.c  */
#line 7098 "sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1455 of yacc.c  */
#line 7104 "sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1071:

/* Line 1455 of yacc.c  */
#line 7110 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1072:

/* Line 1455 of yacc.c  */
#line 7112 "sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1455 of yacc.c  */
#line 7119 "sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1455 of yacc.c  */
#line 7126 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1455 of yacc.c  */
#line 7132 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1076:

/* Line 1455 of yacc.c  */
#line 7134 "sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1077:

/* Line 1455 of yacc.c  */
#line 7143 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1078:

/* Line 1455 of yacc.c  */
#line 7150 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1455 of yacc.c  */
#line 7158 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1080:

/* Line 1455 of yacc.c  */
#line 7164 "sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1455 of yacc.c  */
#line 7171 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1455 of yacc.c  */
#line 7177 "sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1455 of yacc.c  */
#line 7191 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1455 of yacc.c  */
#line 7199 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1085:

/* Line 1455 of yacc.c  */
#line 7214 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1455 of yacc.c  */
#line 7220 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1455 of yacc.c  */
#line 7226 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1088:

/* Line 1455 of yacc.c  */
#line 7234 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1455 of yacc.c  */
#line 7240 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1455 of yacc.c  */
#line 7246 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1455 of yacc.c  */
#line 7252 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1455 of yacc.c  */
#line 7258 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1455 of yacc.c  */
#line 7273 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1455 of yacc.c  */
#line 7285 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1455 of yacc.c  */
#line 7291 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1455 of yacc.c  */
#line 7297 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1455 of yacc.c  */
#line 7303 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1455 of yacc.c  */
#line 7309 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1455 of yacc.c  */
#line 7315 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1100:

/* Line 1455 of yacc.c  */
#line 7321 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1101:

/* Line 1455 of yacc.c  */
#line 7327 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1102:

/* Line 1455 of yacc.c  */
#line 7333 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1103:

/* Line 1455 of yacc.c  */
#line 7339 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1104:

/* Line 1455 of yacc.c  */
#line 7345 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1105:

/* Line 1455 of yacc.c  */
#line 7351 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1106:

/* Line 1455 of yacc.c  */
#line 7357 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1107:

/* Line 1455 of yacc.c  */
#line 7363 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1108:

/* Line 1455 of yacc.c  */
#line 7369 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1455 of yacc.c  */
#line 7375 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1110:

/* Line 1455 of yacc.c  */
#line 7381 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe();
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1111:

/* Line 1455 of yacc.c  */
#line 7389 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1112:

/* Line 1455 of yacc.c  */
#line 7410 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1113:

/* Line 1455 of yacc.c  */
#line 7417 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1114:

/* Line 1455 of yacc.c  */
#line 7423 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1115:

/* Line 1455 of yacc.c  */
#line 7430 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1116:

/* Line 1455 of yacc.c  */
#line 7437 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1117:

/* Line 1455 of yacc.c  */
#line 7445 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1118:

/* Line 1455 of yacc.c  */
#line 7452 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1119:

/* Line 1455 of yacc.c  */
#line 7458 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1120:

/* Line 1455 of yacc.c  */
#line 7464 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1121:

/* Line 1455 of yacc.c  */
#line 7470 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1122:

/* Line 1455 of yacc.c  */
#line 7477 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1123:

/* Line 1455 of yacc.c  */
#line 7484 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1124:

/* Line 1455 of yacc.c  */
#line 7490 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1125:

/* Line 1455 of yacc.c  */
#line 7497 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1126:

/* Line 1455 of yacc.c  */
#line 7503 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1455 of yacc.c  */
#line 7509 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1455 of yacc.c  */
#line 7515 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1129:

/* Line 1455 of yacc.c  */
#line 7521 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1455 of yacc.c  */
#line 7527 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1131:

/* Line 1455 of yacc.c  */
#line 7537 "sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1132:

/* Line 1455 of yacc.c  */
#line 7547 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1455 of yacc.c  */
#line 7553 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1134:

/* Line 1455 of yacc.c  */
#line 7559 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1135:

/* Line 1455 of yacc.c  */
#line 7566 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1136:

/* Line 1455 of yacc.c  */
#line 7573 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1137:

/* Line 1455 of yacc.c  */
#line 7588 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1138:

/* Line 1455 of yacc.c  */
#line 7594 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1139:

/* Line 1455 of yacc.c  */
#line 7600 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1455 of yacc.c  */
#line 7606 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1455 of yacc.c  */
#line 7612 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1142:

/* Line 1455 of yacc.c  */
#line 7619 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1455 of yacc.c  */
#line 7625 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1455 of yacc.c  */
#line 7631 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1455 of yacc.c  */
#line 7637 "sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1455 of yacc.c  */
#line 7643 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1147:

/* Line 1455 of yacc.c  */
#line 7655 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1455 of yacc.c  */
#line 7661 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1455 of yacc.c  */
#line 7667 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1150:

/* Line 1455 of yacc.c  */
#line 7673 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1455 of yacc.c  */
#line 7679 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1455 of yacc.c  */
#line 7691 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1455 of yacc.c  */
#line 7697 "sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1154:

/* Line 1455 of yacc.c  */
#line 7713 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1155:

/* Line 1455 of yacc.c  */
#line 7719 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1156:

/* Line 1455 of yacc.c  */
#line 7726 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1157:

/* Line 1455 of yacc.c  */
#line 7733 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1158:

/* Line 1455 of yacc.c  */
#line 7740 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1159:

/* Line 1455 of yacc.c  */
#line 7747 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1160:

/* Line 1455 of yacc.c  */
#line 7754 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1161:

/* Line 1455 of yacc.c  */
#line 7758 "sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1162:

/* Line 1455 of yacc.c  */
#line 7777 "sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1163:

/* Line 1455 of yacc.c  */
#line 7796 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1164:

/* Line 1455 of yacc.c  */
#line 7845 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1165:

/* Line 1455 of yacc.c  */
#line 7877 "sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1166:

/* Line 1455 of yacc.c  */
#line 7879 "sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1167:

/* Line 1455 of yacc.c  */
#line 7883 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1168:

/* Line 1455 of yacc.c  */
#line 7884 "sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1169:

/* Line 1455 of yacc.c  */
#line 7888 "sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1170:

/* Line 1455 of yacc.c  */
#line 7889 "sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1171:

/* Line 1455 of yacc.c  */
#line 7893 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1172:

/* Line 1455 of yacc.c  */
#line 7894 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1173:

/* Line 1455 of yacc.c  */
#line 7899 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1174:

/* Line 1455 of yacc.c  */
#line 7906 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1175:

/* Line 1455 of yacc.c  */
#line 7914 "sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1176:

/* Line 1455 of yacc.c  */
#line 7934 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1177:

/* Line 1455 of yacc.c  */
#line 7940 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1178:

/* Line 1455 of yacc.c  */
#line 7946 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1179:

/* Line 1455 of yacc.c  */
#line 7952 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1455 of yacc.c  */
#line 7958 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1455 of yacc.c  */
#line 7964 "sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1455 of yacc.c  */
#line 7973 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1455 of yacc.c  */
#line 7979 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1184:

/* Line 1455 of yacc.c  */
#line 7981 "sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1185:

/* Line 1455 of yacc.c  */
#line 7983 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count_distinct(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1455 of yacc.c  */
#line 7989 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1455 of yacc.c  */
#line 8000 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1455 of yacc.c  */
#line 8006 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1455 of yacc.c  */
#line 8012 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1455 of yacc.c  */
#line 8018 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1455 of yacc.c  */
#line 8024 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1455 of yacc.c  */
#line 8030 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1193:

/* Line 1455 of yacc.c  */
#line 8036 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1194:

/* Line 1455 of yacc.c  */
#line 8042 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1455 of yacc.c  */
#line 8048 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum_distinct((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1455 of yacc.c  */
#line 8054 "sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1197:

/* Line 1455 of yacc.c  */
#line 8058 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1198:

/* Line 1455 of yacc.c  */
#line 8072 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1199:

/* Line 1455 of yacc.c  */
#line 8080 "sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1200:

/* Line 1455 of yacc.c  */
#line 8087 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1201:

/* Line 1455 of yacc.c  */
#line 8097 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1202:

/* Line 1455 of yacc.c  */
#line 8105 "sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe();
          }
    break;

  case 1203:

/* Line 1455 of yacc.c  */
#line 8120 "sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1204:

/* Line 1455 of yacc.c  */
#line 8121 "sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1205:

/* Line 1455 of yacc.c  */
#line 8126 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1455 of yacc.c  */
#line 8131 "sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1207:

/* Line 1455 of yacc.c  */
#line 8136 "sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1208:

/* Line 1455 of yacc.c  */
#line 8140 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list=
              (SQL_LIST*) sql_memdup((char*) &select->order_list,
                                     sizeof(st_sql_list));
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1209:

/* Line 1455 of yacc.c  */
#line 8153 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1210:

/* Line 1455 of yacc.c  */
#line 8162 "sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1211:

/* Line 1455 of yacc.c  */
#line 8170 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1212:

/* Line 1455 of yacc.c  */
#line 8172 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1213:

/* Line 1455 of yacc.c  */
#line 8174 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1214:

/* Line 1455 of yacc.c  */
#line 8176 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1215:

/* Line 1455 of yacc.c  */
#line 8178 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1216:

/* Line 1455 of yacc.c  */
#line 8180 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1217:

/* Line 1455 of yacc.c  */
#line 8182 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1218:

/* Line 1455 of yacc.c  */
#line 8184 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1219:

/* Line 1455 of yacc.c  */
#line 8186 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1220:

/* Line 1455 of yacc.c  */
#line 8188 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1221:

/* Line 1455 of yacc.c  */
#line 8190 "sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1222:

/* Line 1455 of yacc.c  */
#line 8194 "sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1223:

/* Line 1455 of yacc.c  */
#line 8195 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1224:

/* Line 1455 of yacc.c  */
#line 8200 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1225:

/* Line 1455 of yacc.c  */
#line 8207 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1226:

/* Line 1455 of yacc.c  */
#line 8214 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1227:

/* Line 1455 of yacc.c  */
#line 8215 "sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1228:

/* Line 1455 of yacc.c  */
#line 8220 "sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1229:

/* Line 1455 of yacc.c  */
#line 8227 "sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1230:

/* Line 1455 of yacc.c  */
#line 8234 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1231:

/* Line 1455 of yacc.c  */
#line 8235 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1232:

/* Line 1455 of yacc.c  */
#line 8239 "sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1233:

/* Line 1455 of yacc.c  */
#line 8240 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1234:

/* Line 1455 of yacc.c  */
#line 8245 "sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1235:

/* Line 1455 of yacc.c  */
#line 8253 "sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1236:

/* Line 1455 of yacc.c  */
#line 8262 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1237:

/* Line 1455 of yacc.c  */
#line 8264 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1238:

/* Line 1455 of yacc.c  */
#line 8272 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1239:

/* Line 1455 of yacc.c  */
#line 8283 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1240:

/* Line 1455 of yacc.c  */
#line 8284 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1241:

/* Line 1455 of yacc.c  */
#line 8289 "sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1242:

/* Line 1455 of yacc.c  */
#line 8291 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1243:

/* Line 1455 of yacc.c  */
#line 8311 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1244:

/* Line 1455 of yacc.c  */
#line 8313 "sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1245:

/* Line 1455 of yacc.c  */
#line 8316 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1246:

/* Line 1455 of yacc.c  */
#line 8324 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1247:

/* Line 1455 of yacc.c  */
#line 8331 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1248:

/* Line 1455 of yacc.c  */
#line 8339 "sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1249:

/* Line 1455 of yacc.c  */
#line 8347 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1250:

/* Line 1455 of yacc.c  */
#line 8351 "sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1251:

/* Line 1455 of yacc.c  */
#line 8353 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1252:

/* Line 1455 of yacc.c  */
#line 8361 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1253:

/* Line 1455 of yacc.c  */
#line 8369 "sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1254:

/* Line 1455 of yacc.c  */
#line 8377 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1255:

/* Line 1455 of yacc.c  */
#line 8381 "sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1256:

/* Line 1455 of yacc.c  */
#line 8387 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1257:

/* Line 1455 of yacc.c  */
#line 8397 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1258:

/* Line 1455 of yacc.c  */
#line 8405 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1259:

/* Line 1455 of yacc.c  */
#line 8414 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1260:

/* Line 1455 of yacc.c  */
#line 8418 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1261:

/* Line 1455 of yacc.c  */
#line 8425 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1262:

/* Line 1455 of yacc.c  */
#line 8435 "sql_yacc.yy"
    {}
    break;

  case 1263:

/* Line 1455 of yacc.c  */
#line 8436 "sql_yacc.yy"
    {}
    break;

  case 1264:

/* Line 1455 of yacc.c  */
#line 8437 "sql_yacc.yy"
    {}
    break;

  case 1265:

/* Line 1455 of yacc.c  */
#line 8442 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1266:

/* Line 1455 of yacc.c  */
#line 8447 "sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                Lex->lock_option,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1267:

/* Line 1455 of yacc.c  */
#line 8456 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1268:

/* Line 1455 of yacc.c  */
#line 8478 "sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */

            if (!((yyvsp[(3) - (6)].table_list) || (yyvsp[(6) - (6)].lex_str_ptr)) && (yyvsp[(2) - (6)].select_lex)->embedding &&
                !(yyvsp[(2) - (6)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (6)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[(6) - (6)].lex_str_ptr), 0,
                                               TL_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if ((yyvsp[(4) - (6)].num) || (yyvsp[(6) - (6)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (6)].table_list);
            }
          }
    break;

  case 1269:

/* Line 1455 of yacc.c  */
#line 8530 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1270:

/* Line 1455 of yacc.c  */
#line 8536 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1271:

/* Line 1455 of yacc.c  */
#line 8552 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1272:

/* Line 1455 of yacc.c  */
#line 8569 "sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1274:

/* Line 1455 of yacc.c  */
#line 8576 "sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1275:

/* Line 1455 of yacc.c  */
#line 8581 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1276:

/* Line 1455 of yacc.c  */
#line 8606 "sql_yacc.yy"
    {}
    break;

  case 1277:

/* Line 1455 of yacc.c  */
#line 8607 "sql_yacc.yy"
    {}
    break;

  case 1278:

/* Line 1455 of yacc.c  */
#line 8612 "sql_yacc.yy"
    {
            (yyval.num)= global_system_variables.old_mode ? 
                  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1279:

/* Line 1455 of yacc.c  */
#line 8616 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1280:

/* Line 1455 of yacc.c  */
#line 8617 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1281:

/* Line 1455 of yacc.c  */
#line 8618 "sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1282:

/* Line 1455 of yacc.c  */
#line 8622 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1283:

/* Line 1455 of yacc.c  */
#line 8623 "sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1284:

/* Line 1455 of yacc.c  */
#line 8628 "sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1286:

/* Line 1455 of yacc.c  */
#line 8633 "sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1291:

/* Line 1455 of yacc.c  */
#line 8646 "sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1293:

/* Line 1455 of yacc.c  */
#line 8650 "sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1295:

/* Line 1455 of yacc.c  */
#line 8655 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1296:

/* Line 1455 of yacc.c  */
#line 8656 "sql_yacc.yy"
    {}
    break;

  case 1297:

/* Line 1455 of yacc.c  */
#line 8661 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1298:

/* Line 1455 of yacc.c  */
#line 8663 "sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1301:

/* Line 1455 of yacc.c  */
#line 8673 "sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1302:

/* Line 1455 of yacc.c  */
#line 8684 "sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1303:

/* Line 1455 of yacc.c  */
#line 8696 "sql_yacc.yy"
    {}
    break;

  case 1304:

/* Line 1455 of yacc.c  */
#line 8697 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1305:

/* Line 1455 of yacc.c  */
#line 8698 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1306:

/* Line 1455 of yacc.c  */
#line 8699 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1307:

/* Line 1455 of yacc.c  */
#line 8700 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1308:

/* Line 1455 of yacc.c  */
#line 8701 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1309:

/* Line 1455 of yacc.c  */
#line 8702 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1310:

/* Line 1455 of yacc.c  */
#line 8703 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1311:

/* Line 1455 of yacc.c  */
#line 8704 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1312:

/* Line 1455 of yacc.c  */
#line 8705 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1313:

/* Line 1455 of yacc.c  */
#line 8706 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1314:

/* Line 1455 of yacc.c  */
#line 8707 "sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1315:

/* Line 1455 of yacc.c  */
#line 8711 "sql_yacc.yy"
    {}
    break;

  case 1316:

/* Line 1455 of yacc.c  */
#line 8712 "sql_yacc.yy"
    { 
                                  (yyval.interval_time_st)=INTERVAL_MICROSECOND; 
                                  /*
                                    FRAC_SECOND was mistakenly implemented with
                                    a wrong resolution. According to the ODBC
                                    standard it should be nanoseconds, not
                                    microseconds. Changing it to nanoseconds
                                    in MySQL would mean making TIMESTAMPDIFF
                                    and TIMESTAMPADD to return DECIMAL, since
                                    the return value would be too big for BIGINT
                                    Hence we just deprecate the incorrect
                                    implementation without changing its
                                    resolution.
                                  */
                                  WARN_DEPRECATED(yythd, "6.2", "FRAC_SECOND", "MICROSECOND");
                                }
    break;

  case 1317:

/* Line 1455 of yacc.c  */
#line 8731 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1318:

/* Line 1455 of yacc.c  */
#line 8732 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1319:

/* Line 1455 of yacc.c  */
#line 8733 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1320:

/* Line 1455 of yacc.c  */
#line 8734 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1321:

/* Line 1455 of yacc.c  */
#line 8735 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1322:

/* Line 1455 of yacc.c  */
#line 8736 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1323:

/* Line 1455 of yacc.c  */
#line 8737 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1324:

/* Line 1455 of yacc.c  */
#line 8738 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1325:

/* Line 1455 of yacc.c  */
#line 8739 "sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1326:

/* Line 1455 of yacc.c  */
#line 8743 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1327:

/* Line 1455 of yacc.c  */
#line 8744 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1328:

/* Line 1455 of yacc.c  */
#line 8745 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1329:

/* Line 1455 of yacc.c  */
#line 8746 "sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1333:

/* Line 1455 of yacc.c  */
#line 8756 "sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1334:

/* Line 1455 of yacc.c  */
#line 8758 "sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1337:

/* Line 1455 of yacc.c  */
#line 8771 "sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1338:

/* Line 1455 of yacc.c  */
#line 8773 "sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1339:

/* Line 1455 of yacc.c  */
#line 8777 "sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1341:

/* Line 1455 of yacc.c  */
#line 8789 "sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1342:

/* Line 1455 of yacc.c  */
#line 8793 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1343:

/* Line 1455 of yacc.c  */
#line 8804 "sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1344:

/* Line 1455 of yacc.c  */
#line 8809 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1347:

/* Line 1455 of yacc.c  */
#line 8831 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1348:

/* Line 1455 of yacc.c  */
#line 8833 "sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1349:

/* Line 1455 of yacc.c  */
#line 8837 "sql_yacc.yy"
    {}
    break;

  case 1350:

/* Line 1455 of yacc.c  */
#line 8839 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT; /* To be deleted in 5.1 */
          }
    break;

  case 1351:

/* Line 1455 of yacc.c  */
#line 8852 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1355:

/* Line 1455 of yacc.c  */
#line 8879 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1358:

/* Line 1455 of yacc.c  */
#line 8898 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1360:

/* Line 1455 of yacc.c  */
#line 8933 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1361:

/* Line 1455 of yacc.c  */
#line 8935 "sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1362:

/* Line 1455 of yacc.c  */
#line 8939 "sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1363:

/* Line 1455 of yacc.c  */
#line 8940 "sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1364:

/* Line 1455 of yacc.c  */
#line 8941 "sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1365:

/* Line 1455 of yacc.c  */
#line 8946 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1366:

/* Line 1455 of yacc.c  */
#line 8952 "sql_yacc.yy"
    {}
    break;

  case 1367:

/* Line 1455 of yacc.c  */
#line 8956 "sql_yacc.yy"
    {}
    break;

  case 1368:

/* Line 1455 of yacc.c  */
#line 8957 "sql_yacc.yy"
    {}
    break;

  case 1369:

/* Line 1455 of yacc.c  */
#line 8961 "sql_yacc.yy"
    {}
    break;

  case 1370:

/* Line 1455 of yacc.c  */
#line 8966 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1371:

/* Line 1455 of yacc.c  */
#line 8973 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1372:

/* Line 1455 of yacc.c  */
#line 8980 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1373:

/* Line 1455 of yacc.c  */
#line 8990 "sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1374:

/* Line 1455 of yacc.c  */
#line 8994 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1375:

/* Line 1455 of yacc.c  */
#line 9000 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1376:

/* Line 1455 of yacc.c  */
#line 9006 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1377:

/* Line 1455 of yacc.c  */
#line 9015 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1378:

/* Line 1455 of yacc.c  */
#line 9020 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1379:

/* Line 1455 of yacc.c  */
#line 9028 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1380:

/* Line 1455 of yacc.c  */
#line 9029 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1381:

/* Line 1455 of yacc.c  */
#line 9030 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1382:

/* Line 1455 of yacc.c  */
#line 9031 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1383:

/* Line 1455 of yacc.c  */
#line 9032 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1384:

/* Line 1455 of yacc.c  */
#line 9033 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1385:

/* Line 1455 of yacc.c  */
#line 9037 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1386:

/* Line 1455 of yacc.c  */
#line 9038 "sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1387:

/* Line 1455 of yacc.c  */
#line 9039 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1388:

/* Line 1455 of yacc.c  */
#line 9040 "sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1389:

/* Line 1455 of yacc.c  */
#line 9041 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1390:

/* Line 1455 of yacc.c  */
#line 9045 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1391:

/* Line 1455 of yacc.c  */
#line 9046 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1392:

/* Line 1455 of yacc.c  */
#line 9047 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1393:

/* Line 1455 of yacc.c  */
#line 9048 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1394:

/* Line 1455 of yacc.c  */
#line 9049 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1395:

/* Line 1455 of yacc.c  */
#line 9053 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1396:

/* Line 1455 of yacc.c  */
#line 9054 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1397:

/* Line 1455 of yacc.c  */
#line 9055 "sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1398:

/* Line 1455 of yacc.c  */
#line 9056 "sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1399:

/* Line 1455 of yacc.c  */
#line 9061 "sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1403:

/* Line 1455 of yacc.c  */
#line 9077 "sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= (uchar**) &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1405:

/* Line 1455 of yacc.c  */
#line 9107 "sql_yacc.yy"
    {}
    break;

  case 1406:

/* Line 1455 of yacc.c  */
#line 9108 "sql_yacc.yy"
    {}
    break;

  case 1409:

/* Line 1455 of yacc.c  */
#line 9118 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1410:

/* Line 1455 of yacc.c  */
#line 9129 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && 
                  (!(lex->result= new select_dumpvar(lex->nest_level))))
              MYSQL_YYABORT;
          }
    break;

  case 1411:

/* Line 1455 of yacc.c  */
#line 9136 "sql_yacc.yy"
    {}
    break;

  case 1413:

/* Line 1455 of yacc.c  */
#line 9141 "sql_yacc.yy"
    {}
    break;

  case 1414:

/* Line 1455 of yacc.c  */
#line 9146 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1415:

/* Line 1455 of yacc.c  */
#line 9165 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1416:

/* Line 1455 of yacc.c  */
#line 9197 "sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1418:

/* Line 1455 of yacc.c  */
#line 9209 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange, lex->nest_level)))
              MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1455 of yacc.c  */
#line 9217 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1421:

/* Line 1455 of yacc.c  */
#line 9220 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange, lex->nest_level)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1422:

/* Line 1455 of yacc.c  */
#line 9232 "sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1423:

/* Line 1455 of yacc.c  */
#line 9243 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1424:

/* Line 1455 of yacc.c  */
#line 9249 "sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1425:

/* Line 1455 of yacc.c  */
#line 9260 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (6)].num);
            lex->drop_if_exists= (yyvsp[(4) - (6)].num);
          }
    break;

  case 1426:

/* Line 1455 of yacc.c  */
#line 9266 "sql_yacc.yy"
    {}
    break;

  case 1427:

/* Line 1455 of yacc.c  */
#line 9267 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1428:

/* Line 1455 of yacc.c  */
#line 9281 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1429:

/* Line 1455 of yacc.c  */
#line 9288 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1430:

/* Line 1455 of yacc.c  */
#line 9311 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1431:

/* Line 1455 of yacc.c  */
#line 9332 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1432:

/* Line 1455 of yacc.c  */
#line 9344 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1433:

/* Line 1455 of yacc.c  */
#line 9348 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (5)].num);
          }
    break;

  case 1434:

/* Line 1455 of yacc.c  */
#line 9354 "sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1435:

/* Line 1455 of yacc.c  */
#line 9360 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1436:

/* Line 1455 of yacc.c  */
#line 9367 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1437:

/* Line 1455 of yacc.c  */
#line 9372 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1438:

/* Line 1455 of yacc.c  */
#line 9377 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1441:

/* Line 1455 of yacc.c  */
#line 9392 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1455 of yacc.c  */
#line 9405 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option ))
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1455 of yacc.c  */
#line 9414 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1446:

/* Line 1455 of yacc.c  */
#line 9415 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1447:

/* Line 1455 of yacc.c  */
#line 9419 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1448:

/* Line 1455 of yacc.c  */
#line 9420 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1449:

/* Line 1455 of yacc.c  */
#line 9428 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
            /* for subselects */
            lex->lock_option= TL_READ_DEFAULT;
          }
    break;

  case 1450:

/* Line 1455 of yacc.c  */
#line 9438 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1451:

/* Line 1455 of yacc.c  */
#line 9443 "sql_yacc.yy"
    {}
    break;

  case 1452:

/* Line 1455 of yacc.c  */
#line 9448 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1453:

/* Line 1455 of yacc.c  */
#line 9455 "sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1454:

/* Line 1455 of yacc.c  */
#line 9460 "sql_yacc.yy"
    {}
    break;

  case 1455:

/* Line 1455 of yacc.c  */
#line 9465 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1456:

/* Line 1455 of yacc.c  */
#line 9477 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1457:

/* Line 1455 of yacc.c  */
#line 9478 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1458:

/* Line 1455 of yacc.c  */
#line 9479 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1459:

/* Line 1455 of yacc.c  */
#line 9483 "sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1460:

/* Line 1455 of yacc.c  */
#line 9484 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DELAYED; }
    break;

  case 1461:

/* Line 1455 of yacc.c  */
#line 9488 "sql_yacc.yy"
    {}
    break;

  case 1462:

/* Line 1455 of yacc.c  */
#line 9489 "sql_yacc.yy"
    {}
    break;

  case 1463:

/* Line 1455 of yacc.c  */
#line 9494 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1464:

/* Line 1455 of yacc.c  */
#line 9502 "sql_yacc.yy"
    {}
    break;

  case 1465:

/* Line 1455 of yacc.c  */
#line 9503 "sql_yacc.yy"
    {}
    break;

  case 1466:

/* Line 1455 of yacc.c  */
#line 9504 "sql_yacc.yy"
    {}
    break;

  case 1467:

/* Line 1455 of yacc.c  */
#line 9506 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1469:

/* Line 1455 of yacc.c  */
#line 9516 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1470:

/* Line 1455 of yacc.c  */
#line 9517 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1471:

/* Line 1455 of yacc.c  */
#line 9521 "sql_yacc.yy"
    {}
    break;

  case 1472:

/* Line 1455 of yacc.c  */
#line 9522 "sql_yacc.yy"
    {}
    break;

  case 1473:

/* Line 1455 of yacc.c  */
#line 9524 "sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1474:

/* Line 1455 of yacc.c  */
#line 9525 "sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1455 of yacc.c  */
#line 9527 "sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1476:

/* Line 1455 of yacc.c  */
#line 9528 "sql_yacc.yy"
    {}
    break;

  case 1481:

/* Line 1455 of yacc.c  */
#line 9543 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1482:

/* Line 1455 of yacc.c  */
#line 9552 "sql_yacc.yy"
    {}
    break;

  case 1483:

/* Line 1455 of yacc.c  */
#line 9553 "sql_yacc.yy"
    {}
    break;

  case 1484:

/* Line 1455 of yacc.c  */
#line 9557 "sql_yacc.yy"
    {}
    break;

  case 1485:

/* Line 1455 of yacc.c  */
#line 9558 "sql_yacc.yy"
    {}
    break;

  case 1486:

/* Line 1455 of yacc.c  */
#line 9563 "sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1487:

/* Line 1455 of yacc.c  */
#line 9568 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1488:

/* Line 1455 of yacc.c  */
#line 9576 "sql_yacc.yy"
    {}
    break;

  case 1490:

/* Line 1455 of yacc.c  */
#line 9582 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1491:

/* Line 1455 of yacc.c  */
#line 9587 "sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1492:

/* Line 1455 of yacc.c  */
#line 9594 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1493:

/* Line 1455 of yacc.c  */
#line 9596 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1495:

/* Line 1455 of yacc.c  */
#line 9605 "sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1497:

/* Line 1455 of yacc.c  */
#line 9613 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->lock_option= TL_UNLOCK; /* Will be set later */
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1498:

/* Line 1455 of yacc.c  */
#line 9622 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1499:

/* Line 1455 of yacc.c  */
#line 9640 "sql_yacc.yy"
    {}
    break;

  case 1502:

/* Line 1455 of yacc.c  */
#line 9650 "sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1505:

/* Line 1455 of yacc.c  */
#line 9663 "sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1506:

/* Line 1455 of yacc.c  */
#line 9672 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1507:

/* Line 1455 of yacc.c  */
#line 9673 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1508:

/* Line 1455 of yacc.c  */
#line 9680 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            lex->lock_option= TL_WRITE_DEFAULT;
            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1509:

/* Line 1455 of yacc.c  */
#line 9688 "sql_yacc.yy"
    {}
    break;

  case 1510:

/* Line 1455 of yacc.c  */
#line 9693 "sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1511:

/* Line 1455 of yacc.c  */
#line 9699 "sql_yacc.yy"
    {}
    break;

  case 1512:

/* Line 1455 of yacc.c  */
#line 9701 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1513:

/* Line 1455 of yacc.c  */
#line 9703 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1514:

/* Line 1455 of yacc.c  */
#line 9708 "sql_yacc.yy"
    { mysql_init_multi_delete(Lex); }
    break;

  case 1515:

/* Line 1455 of yacc.c  */
#line 9710 "sql_yacc.yy"
    { 
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1516:

/* Line 1455 of yacc.c  */
#line 9717 "sql_yacc.yy"
    {}
    break;

  case 1517:

/* Line 1455 of yacc.c  */
#line 9718 "sql_yacc.yy"
    {}
    break;

  case 1518:

/* Line 1455 of yacc.c  */
#line 9723 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (3)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(3) - (3)].lex_str_ptr),
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1519:

/* Line 1455 of yacc.c  */
#line 9735 "sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (5)].lex_str), (yyvsp[(3) - (5)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           (yyvsp[(5) - (5)].lex_str_ptr), 
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           Lex->lock_option))
              MYSQL_YYABORT;
          }
    break;

  case 1520:

/* Line 1455 of yacc.c  */
#line 9749 "sql_yacc.yy"
    {}
    break;

  case 1521:

/* Line 1455 of yacc.c  */
#line 9750 "sql_yacc.yy"
    {}
    break;

  case 1522:

/* Line 1455 of yacc.c  */
#line 9754 "sql_yacc.yy"
    {}
    break;

  case 1523:

/* Line 1455 of yacc.c  */
#line 9755 "sql_yacc.yy"
    {}
    break;

  case 1524:

/* Line 1455 of yacc.c  */
#line 9759 "sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1525:

/* Line 1455 of yacc.c  */
#line 9760 "sql_yacc.yy"
    { Lex->lock_option= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1526:

/* Line 1455 of yacc.c  */
#line 9761 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1527:

/* Line 1455 of yacc.c  */
#line 9766 "sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
          }
    break;

  case 1534:

/* Line 1455 of yacc.c  */
#line 9790 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1535:

/* Line 1455 of yacc.c  */
#line 9794 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1536:

/* Line 1455 of yacc.c  */
#line 9798 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1537:

/* Line 1455 of yacc.c  */
#line 9802 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1538:

/* Line 1455 of yacc.c  */
#line 9806 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1539:

/* Line 1455 of yacc.c  */
#line 9810 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1540:

/* Line 1455 of yacc.c  */
#line 9814 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1541:

/* Line 1455 of yacc.c  */
#line 9818 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1542:

/* Line 1455 of yacc.c  */
#line 9822 "sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1543:

/* Line 1455 of yacc.c  */
#line 9829 "sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1544:

/* Line 1455 of yacc.c  */
#line 9833 "sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1545:

/* Line 1455 of yacc.c  */
#line 9842 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1546:

/* Line 1455 of yacc.c  */
#line 9851 "sql_yacc.yy"
    {}
    break;

  case 1547:

/* Line 1455 of yacc.c  */
#line 9856 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1548:

/* Line 1455 of yacc.c  */
#line 9863 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1549:

/* Line 1455 of yacc.c  */
#line 9871 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1550:

/* Line 1455 of yacc.c  */
#line 9879 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1551:

/* Line 1455 of yacc.c  */
#line 9887 "sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1552:

/* Line 1455 of yacc.c  */
#line 9895 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1553:

/* Line 1455 of yacc.c  */
#line 9903 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            WARN_DEPRECATED(yythd, "6.0", "SHOW PLUGIN", "'SHOW PLUGINS'");
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1554:

/* Line 1455 of yacc.c  */
#line 9911 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1555:

/* Line 1455 of yacc.c  */
#line 9918 "sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1556:

/* Line 1455 of yacc.c  */
#line 9920 "sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1557:

/* Line 1455 of yacc.c  */
#line 9922 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1455 of yacc.c  */
#line 9937 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_NEW_MASTER;
            Lex->mi.log_file_name = (yyvsp[(8) - (16)].lex_str).str;
            Lex->mi.pos = (yyvsp[(12) - (16)].ulonglong_number);
            Lex->mi.server_id = (yyvsp[(16) - (16)].ulong_num);
          }
    break;

  case 1559:

/* Line 1455 of yacc.c  */
#line 9944 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1560:

/* Line 1455 of yacc.c  */
#line 9948 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1561:

/* Line 1455 of yacc.c  */
#line 9952 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1563:

/* Line 1455 of yacc.c  */
#line 9957 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1564:

/* Line 1455 of yacc.c  */
#line 9966 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_COLUMN_TYPES;
          }
    break;

  case 1565:

/* Line 1455 of yacc.c  */
#line 9971 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            WARN_DEPRECATED(yythd, "6.0", "SHOW TABLE TYPES", "'SHOW [STORAGE] ENGINES'");
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1566:

/* Line 1455 of yacc.c  */
#line 9979 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1567:

/* Line 1455 of yacc.c  */
#line 9986 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1568:

/* Line 1455 of yacc.c  */
#line 9991 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1569:

/* Line 1455 of yacc.c  */
#line 9996 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1570:

/* Line 1455 of yacc.c  */
#line 10001 "sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1571:

/* Line 1455 of yacc.c  */
#line 10003 "sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1572:

/* Line 1455 of yacc.c  */
#line 10005 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1573:

/* Line 1455 of yacc.c  */
#line 10007 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1574:

/* Line 1455 of yacc.c  */
#line 10009 "sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1575:

/* Line 1455 of yacc.c  */
#line 10011 "sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1576:

/* Line 1455 of yacc.c  */
#line 10018 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1577:

/* Line 1455 of yacc.c  */
#line 10026 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_STATUS;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW INNODB STATUS", "'SHOW ENGINE INNODB STATUS'");
          }
    break;

  case 1578:

/* Line 1455 of yacc.c  */
#line 10038 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_ENGINE_MUTEX;
            if (!(lex->create_info.db_type=
                  ha_resolve_by_legacy_type(YYTHD, DB_TYPE_INNODB)))
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), "InnoDB");
              MYSQL_YYABORT;
            }
            WARN_DEPRECATED(yythd, "6.0", "SHOW MUTEX STATUS", "'SHOW ENGINE INNODB MUTEX'");
          }
    break;

  case 1579:

/* Line 1455 of yacc.c  */
#line 10050 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1580:

/* Line 1455 of yacc.c  */
#line 10052 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1581:

/* Line 1455 of yacc.c  */
#line 10060 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1582:

/* Line 1455 of yacc.c  */
#line 10067 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1583:

/* Line 1455 of yacc.c  */
#line 10074 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1584:

/* Line 1455 of yacc.c  */
#line 10084 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1585:

/* Line 1455 of yacc.c  */
#line 10091 "sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1586:

/* Line 1455 of yacc.c  */
#line 10097 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1587:

/* Line 1455 of yacc.c  */
#line 10106 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1588:

/* Line 1455 of yacc.c  */
#line 10114 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1589:

/* Line 1455 of yacc.c  */
#line 10118 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1590:

/* Line 1455 of yacc.c  */
#line 10122 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1591:

/* Line 1455 of yacc.c  */
#line 10129 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1592:

/* Line 1455 of yacc.c  */
#line 10136 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1593:

/* Line 1455 of yacc.c  */
#line 10142 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1594:

/* Line 1455 of yacc.c  */
#line 10149 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1595:

/* Line 1455 of yacc.c  */
#line 10156 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1596:

/* Line 1455 of yacc.c  */
#line 10166 "sql_yacc.yy"
    {
#ifdef DBUG_OFF
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
#else
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
#endif
          }
    break;

  case 1597:

/* Line 1455 of yacc.c  */
#line 10176 "sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1598:

/* Line 1455 of yacc.c  */
#line 10184 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1599:

/* Line 1455 of yacc.c  */
#line 10186 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1600:

/* Line 1455 of yacc.c  */
#line 10188 "sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1605:

/* Line 1455 of yacc.c  */
#line 10202 "sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1606:

/* Line 1455 of yacc.c  */
#line 10203 "sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1607:

/* Line 1455 of yacc.c  */
#line 10207 "sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1608:

/* Line 1455 of yacc.c  */
#line 10208 "sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1611:

/* Line 1455 of yacc.c  */
#line 10217 "sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1612:

/* Line 1455 of yacc.c  */
#line 10218 "sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1613:

/* Line 1455 of yacc.c  */
#line 10222 "sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1614:

/* Line 1455 of yacc.c  */
#line 10223 "sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1616:

/* Line 1455 of yacc.c  */
#line 10229 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1617:

/* Line 1455 of yacc.c  */
#line 10236 "sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1618:

/* Line 1455 of yacc.c  */
#line 10246 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->lock_option= TL_READ;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1619:

/* Line 1455 of yacc.c  */
#line 10257 "sql_yacc.yy"
    {}
    break;

  case 1620:

/* Line 1455 of yacc.c  */
#line 10259 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1621:

/* Line 1455 of yacc.c  */
#line 10261 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1624:

/* Line 1455 of yacc.c  */
#line 10273 "sql_yacc.yy"
    {}
    break;

  case 1625:

/* Line 1455 of yacc.c  */
#line 10274 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1626:

/* Line 1455 of yacc.c  */
#line 10275 "sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1627:

/* Line 1455 of yacc.c  */
#line 10279 "sql_yacc.yy"
    {}
    break;

  case 1628:

/* Line 1455 of yacc.c  */
#line 10280 "sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1629:

/* Line 1455 of yacc.c  */
#line 10282 "sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1630:

/* Line 1455 of yacc.c  */
#line 10296 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1631:

/* Line 1455 of yacc.c  */
#line 10303 "sql_yacc.yy"
    {}
    break;

  case 1634:

/* Line 1455 of yacc.c  */
#line 10313 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES; }
    break;

  case 1635:

/* Line 1455 of yacc.c  */
#line 10314 "sql_yacc.yy"
    {}
    break;

  case 1636:

/* Line 1455 of yacc.c  */
#line 10316 "sql_yacc.yy"
    { Lex->type|= REFRESH_TABLES | REFRESH_READ_LOCK; }
    break;

  case 1637:

/* Line 1455 of yacc.c  */
#line 10318 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1638:

/* Line 1455 of yacc.c  */
#line 10320 "sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1639:

/* Line 1455 of yacc.c  */
#line 10322 "sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1640:

/* Line 1455 of yacc.c  */
#line 10324 "sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1641:

/* Line 1455 of yacc.c  */
#line 10326 "sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1642:

/* Line 1455 of yacc.c  */
#line 10328 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1643:

/* Line 1455 of yacc.c  */
#line 10330 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1644:

/* Line 1455 of yacc.c  */
#line 10332 "sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1645:

/* Line 1455 of yacc.c  */
#line 10334 "sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1646:

/* Line 1455 of yacc.c  */
#line 10338 "sql_yacc.yy"
    {}
    break;

  case 1647:

/* Line 1455 of yacc.c  */
#line 10339 "sql_yacc.yy"
    {}
    break;

  case 1648:

/* Line 1455 of yacc.c  */
#line 10344 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1649:

/* Line 1455 of yacc.c  */
#line 10349 "sql_yacc.yy"
    {}
    break;

  case 1652:

/* Line 1455 of yacc.c  */
#line 10358 "sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1653:

/* Line 1455 of yacc.c  */
#line 10359 "sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1654:

/* Line 1455 of yacc.c  */
#line 10360 "sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1655:

/* Line 1455 of yacc.c  */
#line 10365 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1656:

/* Line 1455 of yacc.c  */
#line 10371 "sql_yacc.yy"
    {}
    break;

  case 1658:

/* Line 1455 of yacc.c  */
#line 10380 "sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1659:

/* Line 1455 of yacc.c  */
#line 10384 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1660:

/* Line 1455 of yacc.c  */
#line 10396 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1661:

/* Line 1455 of yacc.c  */
#line 10405 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1662:

/* Line 1455 of yacc.c  */
#line 10406 "sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1663:

/* Line 1455 of yacc.c  */
#line 10407 "sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1664:

/* Line 1455 of yacc.c  */
#line 10414 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1665:

/* Line 1455 of yacc.c  */
#line 10425 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD DATA");
              MYSQL_YYABORT;
            }
            lex->fname_start= lip->get_ptr();
          }
    break;

  case 1666:

/* Line 1455 of yacc.c  */
#line 10438 "sql_yacc.yy"
    {}
    break;

  case 1667:

/* Line 1455 of yacc.c  */
#line 10440 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            WARN_DEPRECATED(yythd, "6.0", "LOAD TABLE FROM MASTER",
                            "MySQL Administrator (mysqldump, mysql)");
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOAD TABLE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_LOAD_MASTER_TABLE;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(3) - (5)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 1668:

/* Line 1455 of yacc.c  */
#line 10457 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->lock_option= (yyvsp[(1) - (4)].lock_type);
            lex->local_file=  (yyvsp[(2) - (4)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(4) - (4)].lex_str).str, 0)))
              MYSQL_YYABORT;
          }
    break;

  case 1669:

/* Line 1455 of yacc.c  */
#line 10468 "sql_yacc.yy"
    {
            Lex->fname_end= YYLIP->get_ptr();
          }
    break;

  case 1670:

/* Line 1455 of yacc.c  */
#line 10472 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(10) - (10)].table), NULL, TL_OPTION_UPDATING,
                                           lex->lock_option))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1671:

/* Line 1455 of yacc.c  */
#line 10482 "sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(12) - (12)].charset); }
    break;

  case 1672:

/* Line 1455 of yacc.c  */
#line 10485 "sql_yacc.yy"
    {}
    break;

  case 1673:

/* Line 1455 of yacc.c  */
#line 10487 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_LOAD_MASTER_DATA;
            WARN_DEPRECATED(yythd, "6.0", "LOAD DATA FROM MASTER",
                            "mysqldump or future "
                            "BACKUP/RESTORE DATABASE facility");
          }
    break;

  case 1674:

/* Line 1455 of yacc.c  */
#line 10496 "sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1675:

/* Line 1455 of yacc.c  */
#line 10497 "sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1676:

/* Line 1455 of yacc.c  */
#line 10501 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1677:

/* Line 1455 of yacc.c  */
#line 10503 "sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1678:

/* Line 1455 of yacc.c  */
#line 10514 "sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1679:

/* Line 1455 of yacc.c  */
#line 10518 "sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1680:

/* Line 1455 of yacc.c  */
#line 10519 "sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1681:

/* Line 1455 of yacc.c  */
#line 10520 "sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1686:

/* Line 1455 of yacc.c  */
#line 10535 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1687:

/* Line 1455 of yacc.c  */
#line 10540 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1688:

/* Line 1455 of yacc.c  */
#line 10547 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1689:

/* Line 1455 of yacc.c  */
#line 10552 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1694:

/* Line 1455 of yacc.c  */
#line 10570 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1695:

/* Line 1455 of yacc.c  */
#line 10575 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1697:

/* Line 1455 of yacc.c  */
#line 10584 "sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1698:

/* Line 1455 of yacc.c  */
#line 10591 "sql_yacc.yy"
    {}
    break;

  case 1699:

/* Line 1455 of yacc.c  */
#line 10592 "sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1455 of yacc.c  */
#line 10593 "sql_yacc.yy"
    {}
    break;

  case 1701:

/* Line 1455 of yacc.c  */
#line 10598 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1702:

/* Line 1455 of yacc.c  */
#line 10600 "sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1703:

/* Line 1455 of yacc.c  */
#line 10604 "sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1704:

/* Line 1455 of yacc.c  */
#line 10606 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1705:

/* Line 1455 of yacc.c  */
#line 10614 "sql_yacc.yy"
    {}
    break;

  case 1706:

/* Line 1455 of yacc.c  */
#line 10615 "sql_yacc.yy"
    {}
    break;

  case 1707:

/* Line 1455 of yacc.c  */
#line 10622 "sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1708:

/* Line 1455 of yacc.c  */
#line 10646 "sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1709:

/* Line 1455 of yacc.c  */
#line 10658 "sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1710:

/* Line 1455 of yacc.c  */
#line 10669 "sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1711:

/* Line 1455 of yacc.c  */
#line 10688 "sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1712:

/* Line 1455 of yacc.c  */
#line 10696 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1713:

/* Line 1455 of yacc.c  */
#line 10708 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1714:

/* Line 1455 of yacc.c  */
#line 10723 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1715:

/* Line 1455 of yacc.c  */
#line 10743 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1716:

/* Line 1455 of yacc.c  */
#line 10744 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1717:

/* Line 1455 of yacc.c  */
#line 10746 "sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1718:

/* Line 1455 of yacc.c  */
#line 10753 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1719:

/* Line 1455 of yacc.c  */
#line 10754 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1720:

/* Line 1455 of yacc.c  */
#line 10756 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1721:

/* Line 1455 of yacc.c  */
#line 10763 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1722:

/* Line 1455 of yacc.c  */
#line 10769 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1723:

/* Line 1455 of yacc.c  */
#line 10775 "sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1724:

/* Line 1455 of yacc.c  */
#line 10781 "sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1725:

/* Line 1455 of yacc.c  */
#line 10787 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1726:

/* Line 1455 of yacc.c  */
#line 10816 "sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1727:

/* Line 1455 of yacc.c  */
#line 10843 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1728:

/* Line 1455 of yacc.c  */
#line 10844 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1729:

/* Line 1455 of yacc.c  */
#line 10845 "sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1730:

/* Line 1455 of yacc.c  */
#line 10850 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1731:

/* Line 1455 of yacc.c  */
#line 10860 "sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1732:

/* Line 1455 of yacc.c  */
#line 10870 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1733:

/* Line 1455 of yacc.c  */
#line 10876 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1734:

/* Line 1455 of yacc.c  */
#line 10885 "sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1735:

/* Line 1455 of yacc.c  */
#line 10899 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1736:

/* Line 1455 of yacc.c  */
#line 10900 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1737:

/* Line 1455 of yacc.c  */
#line 10905 "sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1738:

/* Line 1455 of yacc.c  */
#line 10914 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1739:

/* Line 1455 of yacc.c  */
#line 10929 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1740:

/* Line 1455 of yacc.c  */
#line 10934 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1741:

/* Line 1455 of yacc.c  */
#line 10980 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1742:

/* Line 1455 of yacc.c  */
#line 10985 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1743:

/* Line 1455 of yacc.c  */
#line 11002 "sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1744:

/* Line 1455 of yacc.c  */
#line 11007 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar*) trg_fld,
                                                 (uchar**) &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1745:

/* Line 1455 of yacc.c  */
#line 11086 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1746:

/* Line 1455 of yacc.c  */
#line 11111 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1747:

/* Line 1455 of yacc.c  */
#line 11141 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1748:

/* Line 1455 of yacc.c  */
#line 11143 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1749:

/* Line 1455 of yacc.c  */
#line 11159 "sql_yacc.yy"
    {
            TABLE_LIST *table= (TABLE_LIST*) Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1750:

/* Line 1455 of yacc.c  */
#line 11168 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1751:

/* Line 1455 of yacc.c  */
#line 11173 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1752:

/* Line 1455 of yacc.c  */
#line 11179 "sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1753:

/* Line 1455 of yacc.c  */
#line 11185 "sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1754:

/* Line 1455 of yacc.c  */
#line 11195 "sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1755:

/* Line 1455 of yacc.c  */
#line 11204 "sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1756:

/* Line 1455 of yacc.c  */
#line 11206 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, (yyvsp[(1) - (1)].lex_str).str + wlen);
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1757:

/* Line 1455 of yacc.c  */
#line 11235 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1758:

/* Line 1455 of yacc.c  */
#line 11251 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1759:

/* Line 1455 of yacc.c  */
#line 11267 "sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1760:

/* Line 1455 of yacc.c  */
#line 11283 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1761:

/* Line 1455 of yacc.c  */
#line 11285 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1762:

/* Line 1455 of yacc.c  */
#line 11295 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1763:

/* Line 1455 of yacc.c  */
#line 11297 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1764:

/* Line 1455 of yacc.c  */
#line 11307 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1765:

/* Line 1455 of yacc.c  */
#line 11308 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1766:

/* Line 1455 of yacc.c  */
#line 11309 "sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1767:

/* Line 1455 of yacc.c  */
#line 11314 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1768:

/* Line 1455 of yacc.c  */
#line 11328 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
          }
    break;

  case 1769:

/* Line 1455 of yacc.c  */
#line 11341 "sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1770:

/* Line 1455 of yacc.c  */
#line 11355 "sql_yacc.yy"
    {}
    break;

  case 1771:

/* Line 1455 of yacc.c  */
#line 11356 "sql_yacc.yy"
    {}
    break;

  case 1772:

/* Line 1455 of yacc.c  */
#line 11357 "sql_yacc.yy"
    {}
    break;

  case 1773:

/* Line 1455 of yacc.c  */
#line 11358 "sql_yacc.yy"
    {}
    break;

  case 1774:

/* Line 1455 of yacc.c  */
#line 11359 "sql_yacc.yy"
    {}
    break;

  case 1775:

/* Line 1455 of yacc.c  */
#line 11360 "sql_yacc.yy"
    {}
    break;

  case 1776:

/* Line 1455 of yacc.c  */
#line 11361 "sql_yacc.yy"
    {}
    break;

  case 1777:

/* Line 1455 of yacc.c  */
#line 11362 "sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1455 of yacc.c  */
#line 11363 "sql_yacc.yy"
    {}
    break;

  case 1779:

/* Line 1455 of yacc.c  */
#line 11364 "sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1455 of yacc.c  */
#line 11365 "sql_yacc.yy"
    {}
    break;

  case 1781:

/* Line 1455 of yacc.c  */
#line 11366 "sql_yacc.yy"
    {}
    break;

  case 1782:

/* Line 1455 of yacc.c  */
#line 11367 "sql_yacc.yy"
    {}
    break;

  case 1783:

/* Line 1455 of yacc.c  */
#line 11368 "sql_yacc.yy"
    {}
    break;

  case 1784:

/* Line 1455 of yacc.c  */
#line 11369 "sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1455 of yacc.c  */
#line 11370 "sql_yacc.yy"
    {}
    break;

  case 1786:

/* Line 1455 of yacc.c  */
#line 11371 "sql_yacc.yy"
    {}
    break;

  case 1787:

/* Line 1455 of yacc.c  */
#line 11372 "sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1455 of yacc.c  */
#line 11373 "sql_yacc.yy"
    {}
    break;

  case 1789:

/* Line 1455 of yacc.c  */
#line 11374 "sql_yacc.yy"
    {}
    break;

  case 1790:

/* Line 1455 of yacc.c  */
#line 11375 "sql_yacc.yy"
    {}
    break;

  case 1791:

/* Line 1455 of yacc.c  */
#line 11376 "sql_yacc.yy"
    {}
    break;

  case 1792:

/* Line 1455 of yacc.c  */
#line 11377 "sql_yacc.yy"
    {}
    break;

  case 1793:

/* Line 1455 of yacc.c  */
#line 11378 "sql_yacc.yy"
    {}
    break;

  case 1794:

/* Line 1455 of yacc.c  */
#line 11379 "sql_yacc.yy"
    {}
    break;

  case 1795:

/* Line 1455 of yacc.c  */
#line 11380 "sql_yacc.yy"
    {}
    break;

  case 1796:

/* Line 1455 of yacc.c  */
#line 11381 "sql_yacc.yy"
    {}
    break;

  case 1797:

/* Line 1455 of yacc.c  */
#line 11382 "sql_yacc.yy"
    {}
    break;

  case 1798:

/* Line 1455 of yacc.c  */
#line 11383 "sql_yacc.yy"
    {}
    break;

  case 1799:

/* Line 1455 of yacc.c  */
#line 11384 "sql_yacc.yy"
    {}
    break;

  case 1800:

/* Line 1455 of yacc.c  */
#line 11385 "sql_yacc.yy"
    {}
    break;

  case 1801:

/* Line 1455 of yacc.c  */
#line 11386 "sql_yacc.yy"
    {}
    break;

  case 1802:

/* Line 1455 of yacc.c  */
#line 11387 "sql_yacc.yy"
    {}
    break;

  case 1803:

/* Line 1455 of yacc.c  */
#line 11388 "sql_yacc.yy"
    {}
    break;

  case 1804:

/* Line 1455 of yacc.c  */
#line 11389 "sql_yacc.yy"
    {}
    break;

  case 1805:

/* Line 1455 of yacc.c  */
#line 11390 "sql_yacc.yy"
    {}
    break;

  case 1806:

/* Line 1455 of yacc.c  */
#line 11391 "sql_yacc.yy"
    {}
    break;

  case 1807:

/* Line 1455 of yacc.c  */
#line 11392 "sql_yacc.yy"
    {}
    break;

  case 1808:

/* Line 1455 of yacc.c  */
#line 11393 "sql_yacc.yy"
    {}
    break;

  case 1809:

/* Line 1455 of yacc.c  */
#line 11394 "sql_yacc.yy"
    {}
    break;

  case 1810:

/* Line 1455 of yacc.c  */
#line 11395 "sql_yacc.yy"
    {}
    break;

  case 1811:

/* Line 1455 of yacc.c  */
#line 11396 "sql_yacc.yy"
    {}
    break;

  case 1812:

/* Line 1455 of yacc.c  */
#line 11397 "sql_yacc.yy"
    {}
    break;

  case 1813:

/* Line 1455 of yacc.c  */
#line 11398 "sql_yacc.yy"
    {}
    break;

  case 1814:

/* Line 1455 of yacc.c  */
#line 11399 "sql_yacc.yy"
    {}
    break;

  case 1815:

/* Line 1455 of yacc.c  */
#line 11400 "sql_yacc.yy"
    {}
    break;

  case 1816:

/* Line 1455 of yacc.c  */
#line 11401 "sql_yacc.yy"
    {}
    break;

  case 1817:

/* Line 1455 of yacc.c  */
#line 11402 "sql_yacc.yy"
    {}
    break;

  case 1818:

/* Line 1455 of yacc.c  */
#line 11403 "sql_yacc.yy"
    {}
    break;

  case 1819:

/* Line 1455 of yacc.c  */
#line 11404 "sql_yacc.yy"
    {}
    break;

  case 1820:

/* Line 1455 of yacc.c  */
#line 11414 "sql_yacc.yy"
    {}
    break;

  case 1821:

/* Line 1455 of yacc.c  */
#line 11415 "sql_yacc.yy"
    {}
    break;

  case 1822:

/* Line 1455 of yacc.c  */
#line 11416 "sql_yacc.yy"
    {}
    break;

  case 1823:

/* Line 1455 of yacc.c  */
#line 11417 "sql_yacc.yy"
    {}
    break;

  case 1824:

/* Line 1455 of yacc.c  */
#line 11418 "sql_yacc.yy"
    {}
    break;

  case 1825:

/* Line 1455 of yacc.c  */
#line 11419 "sql_yacc.yy"
    {}
    break;

  case 1826:

/* Line 1455 of yacc.c  */
#line 11420 "sql_yacc.yy"
    {}
    break;

  case 1827:

/* Line 1455 of yacc.c  */
#line 11421 "sql_yacc.yy"
    {}
    break;

  case 1828:

/* Line 1455 of yacc.c  */
#line 11422 "sql_yacc.yy"
    {}
    break;

  case 1829:

/* Line 1455 of yacc.c  */
#line 11423 "sql_yacc.yy"
    {}
    break;

  case 1830:

/* Line 1455 of yacc.c  */
#line 11424 "sql_yacc.yy"
    {}
    break;

  case 1831:

/* Line 1455 of yacc.c  */
#line 11425 "sql_yacc.yy"
    {}
    break;

  case 1832:

/* Line 1455 of yacc.c  */
#line 11426 "sql_yacc.yy"
    {}
    break;

  case 1833:

/* Line 1455 of yacc.c  */
#line 11427 "sql_yacc.yy"
    {}
    break;

  case 1834:

/* Line 1455 of yacc.c  */
#line 11428 "sql_yacc.yy"
    {}
    break;

  case 1835:

/* Line 1455 of yacc.c  */
#line 11429 "sql_yacc.yy"
    {}
    break;

  case 1836:

/* Line 1455 of yacc.c  */
#line 11430 "sql_yacc.yy"
    {}
    break;

  case 1837:

/* Line 1455 of yacc.c  */
#line 11431 "sql_yacc.yy"
    {}
    break;

  case 1838:

/* Line 1455 of yacc.c  */
#line 11432 "sql_yacc.yy"
    {}
    break;

  case 1839:

/* Line 1455 of yacc.c  */
#line 11433 "sql_yacc.yy"
    {}
    break;

  case 1840:

/* Line 1455 of yacc.c  */
#line 11434 "sql_yacc.yy"
    {}
    break;

  case 1841:

/* Line 1455 of yacc.c  */
#line 11435 "sql_yacc.yy"
    {}
    break;

  case 1842:

/* Line 1455 of yacc.c  */
#line 11436 "sql_yacc.yy"
    {}
    break;

  case 1843:

/* Line 1455 of yacc.c  */
#line 11437 "sql_yacc.yy"
    {}
    break;

  case 1844:

/* Line 1455 of yacc.c  */
#line 11438 "sql_yacc.yy"
    {}
    break;

  case 1845:

/* Line 1455 of yacc.c  */
#line 11439 "sql_yacc.yy"
    {}
    break;

  case 1846:

/* Line 1455 of yacc.c  */
#line 11440 "sql_yacc.yy"
    {}
    break;

  case 1847:

/* Line 1455 of yacc.c  */
#line 11441 "sql_yacc.yy"
    {}
    break;

  case 1848:

/* Line 1455 of yacc.c  */
#line 11442 "sql_yacc.yy"
    {}
    break;

  case 1849:

/* Line 1455 of yacc.c  */
#line 11443 "sql_yacc.yy"
    {}
    break;

  case 1850:

/* Line 1455 of yacc.c  */
#line 11444 "sql_yacc.yy"
    {}
    break;

  case 1851:

/* Line 1455 of yacc.c  */
#line 11445 "sql_yacc.yy"
    {}
    break;

  case 1852:

/* Line 1455 of yacc.c  */
#line 11446 "sql_yacc.yy"
    {}
    break;

  case 1853:

/* Line 1455 of yacc.c  */
#line 11447 "sql_yacc.yy"
    {}
    break;

  case 1854:

/* Line 1455 of yacc.c  */
#line 11448 "sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1455 of yacc.c  */
#line 11449 "sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1455 of yacc.c  */
#line 11450 "sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1455 of yacc.c  */
#line 11451 "sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1455 of yacc.c  */
#line 11452 "sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1455 of yacc.c  */
#line 11453 "sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1455 of yacc.c  */
#line 11454 "sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1455 of yacc.c  */
#line 11455 "sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1455 of yacc.c  */
#line 11456 "sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1455 of yacc.c  */
#line 11457 "sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1455 of yacc.c  */
#line 11458 "sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1455 of yacc.c  */
#line 11459 "sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1455 of yacc.c  */
#line 11460 "sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1455 of yacc.c  */
#line 11461 "sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1455 of yacc.c  */
#line 11462 "sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1455 of yacc.c  */
#line 11463 "sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1455 of yacc.c  */
#line 11464 "sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1455 of yacc.c  */
#line 11465 "sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1455 of yacc.c  */
#line 11466 "sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1455 of yacc.c  */
#line 11467 "sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1455 of yacc.c  */
#line 11468 "sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1455 of yacc.c  */
#line 11469 "sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1455 of yacc.c  */
#line 11470 "sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1455 of yacc.c  */
#line 11471 "sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1455 of yacc.c  */
#line 11472 "sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1455 of yacc.c  */
#line 11473 "sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1455 of yacc.c  */
#line 11474 "sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1455 of yacc.c  */
#line 11475 "sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1455 of yacc.c  */
#line 11476 "sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1455 of yacc.c  */
#line 11477 "sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1455 of yacc.c  */
#line 11478 "sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1455 of yacc.c  */
#line 11479 "sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1455 of yacc.c  */
#line 11480 "sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1455 of yacc.c  */
#line 11481 "sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1455 of yacc.c  */
#line 11482 "sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1455 of yacc.c  */
#line 11483 "sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1455 of yacc.c  */
#line 11484 "sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1455 of yacc.c  */
#line 11485 "sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1455 of yacc.c  */
#line 11486 "sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1455 of yacc.c  */
#line 11487 "sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1455 of yacc.c  */
#line 11488 "sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1455 of yacc.c  */
#line 11489 "sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1455 of yacc.c  */
#line 11490 "sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1455 of yacc.c  */
#line 11491 "sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1455 of yacc.c  */
#line 11492 "sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1455 of yacc.c  */
#line 11493 "sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1455 of yacc.c  */
#line 11494 "sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1455 of yacc.c  */
#line 11495 "sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1455 of yacc.c  */
#line 11496 "sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1455 of yacc.c  */
#line 11497 "sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1455 of yacc.c  */
#line 11498 "sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1455 of yacc.c  */
#line 11499 "sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1455 of yacc.c  */
#line 11500 "sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1455 of yacc.c  */
#line 11501 "sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1455 of yacc.c  */
#line 11502 "sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1455 of yacc.c  */
#line 11503 "sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1455 of yacc.c  */
#line 11504 "sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1455 of yacc.c  */
#line 11505 "sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1455 of yacc.c  */
#line 11506 "sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1455 of yacc.c  */
#line 11507 "sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1455 of yacc.c  */
#line 11508 "sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1455 of yacc.c  */
#line 11509 "sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1455 of yacc.c  */
#line 11510 "sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1455 of yacc.c  */
#line 11511 "sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1455 of yacc.c  */
#line 11512 "sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1455 of yacc.c  */
#line 11513 "sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1455 of yacc.c  */
#line 11514 "sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1455 of yacc.c  */
#line 11515 "sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1455 of yacc.c  */
#line 11516 "sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1455 of yacc.c  */
#line 11517 "sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1455 of yacc.c  */
#line 11518 "sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1455 of yacc.c  */
#line 11519 "sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1455 of yacc.c  */
#line 11520 "sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1455 of yacc.c  */
#line 11521 "sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1455 of yacc.c  */
#line 11522 "sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1455 of yacc.c  */
#line 11523 "sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1455 of yacc.c  */
#line 11524 "sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1455 of yacc.c  */
#line 11525 "sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1455 of yacc.c  */
#line 11526 "sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1455 of yacc.c  */
#line 11527 "sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1455 of yacc.c  */
#line 11528 "sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1455 of yacc.c  */
#line 11529 "sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1455 of yacc.c  */
#line 11530 "sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1455 of yacc.c  */
#line 11531 "sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1455 of yacc.c  */
#line 11532 "sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1455 of yacc.c  */
#line 11533 "sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1455 of yacc.c  */
#line 11534 "sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1455 of yacc.c  */
#line 11535 "sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1455 of yacc.c  */
#line 11536 "sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1455 of yacc.c  */
#line 11537 "sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1455 of yacc.c  */
#line 11538 "sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1455 of yacc.c  */
#line 11539 "sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1455 of yacc.c  */
#line 11540 "sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1455 of yacc.c  */
#line 11541 "sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1455 of yacc.c  */
#line 11542 "sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1455 of yacc.c  */
#line 11543 "sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1455 of yacc.c  */
#line 11544 "sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1455 of yacc.c  */
#line 11545 "sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1455 of yacc.c  */
#line 11546 "sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1455 of yacc.c  */
#line 11547 "sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1455 of yacc.c  */
#line 11548 "sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1455 of yacc.c  */
#line 11549 "sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1455 of yacc.c  */
#line 11550 "sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1455 of yacc.c  */
#line 11551 "sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1455 of yacc.c  */
#line 11552 "sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1455 of yacc.c  */
#line 11553 "sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1455 of yacc.c  */
#line 11554 "sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1455 of yacc.c  */
#line 11555 "sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1455 of yacc.c  */
#line 11556 "sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1455 of yacc.c  */
#line 11557 "sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1455 of yacc.c  */
#line 11558 "sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1455 of yacc.c  */
#line 11559 "sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1455 of yacc.c  */
#line 11560 "sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1455 of yacc.c  */
#line 11561 "sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1455 of yacc.c  */
#line 11562 "sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1455 of yacc.c  */
#line 11563 "sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1455 of yacc.c  */
#line 11564 "sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1455 of yacc.c  */
#line 11565 "sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1455 of yacc.c  */
#line 11566 "sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1455 of yacc.c  */
#line 11567 "sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1455 of yacc.c  */
#line 11568 "sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1455 of yacc.c  */
#line 11569 "sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1455 of yacc.c  */
#line 11570 "sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1455 of yacc.c  */
#line 11571 "sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1455 of yacc.c  */
#line 11572 "sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1455 of yacc.c  */
#line 11573 "sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1455 of yacc.c  */
#line 11574 "sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1455 of yacc.c  */
#line 11575 "sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1455 of yacc.c  */
#line 11576 "sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1455 of yacc.c  */
#line 11577 "sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1455 of yacc.c  */
#line 11578 "sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1455 of yacc.c  */
#line 11579 "sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1455 of yacc.c  */
#line 11580 "sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1455 of yacc.c  */
#line 11581 "sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1455 of yacc.c  */
#line 11582 "sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1455 of yacc.c  */
#line 11583 "sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1455 of yacc.c  */
#line 11584 "sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1455 of yacc.c  */
#line 11585 "sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1455 of yacc.c  */
#line 11586 "sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1455 of yacc.c  */
#line 11587 "sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1455 of yacc.c  */
#line 11588 "sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1455 of yacc.c  */
#line 11589 "sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1455 of yacc.c  */
#line 11590 "sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1455 of yacc.c  */
#line 11591 "sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1455 of yacc.c  */
#line 11592 "sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1455 of yacc.c  */
#line 11593 "sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1455 of yacc.c  */
#line 11594 "sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1455 of yacc.c  */
#line 11595 "sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1455 of yacc.c  */
#line 11596 "sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1455 of yacc.c  */
#line 11597 "sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1455 of yacc.c  */
#line 11598 "sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1455 of yacc.c  */
#line 11599 "sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1455 of yacc.c  */
#line 11600 "sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1455 of yacc.c  */
#line 11601 "sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1455 of yacc.c  */
#line 11602 "sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1455 of yacc.c  */
#line 11603 "sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1455 of yacc.c  */
#line 11604 "sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1455 of yacc.c  */
#line 11605 "sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1455 of yacc.c  */
#line 11606 "sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1455 of yacc.c  */
#line 11607 "sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1455 of yacc.c  */
#line 11608 "sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1455 of yacc.c  */
#line 11609 "sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1455 of yacc.c  */
#line 11610 "sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1455 of yacc.c  */
#line 11611 "sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1455 of yacc.c  */
#line 11612 "sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1455 of yacc.c  */
#line 11613 "sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1455 of yacc.c  */
#line 11614 "sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1455 of yacc.c  */
#line 11615 "sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1455 of yacc.c  */
#line 11616 "sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1455 of yacc.c  */
#line 11617 "sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1455 of yacc.c  */
#line 11618 "sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1455 of yacc.c  */
#line 11619 "sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1455 of yacc.c  */
#line 11620 "sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1455 of yacc.c  */
#line 11621 "sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1455 of yacc.c  */
#line 11622 "sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1455 of yacc.c  */
#line 11623 "sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1455 of yacc.c  */
#line 11624 "sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1455 of yacc.c  */
#line 11625 "sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1455 of yacc.c  */
#line 11626 "sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1455 of yacc.c  */
#line 11627 "sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1455 of yacc.c  */
#line 11628 "sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1455 of yacc.c  */
#line 11629 "sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1455 of yacc.c  */
#line 11630 "sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1455 of yacc.c  */
#line 11631 "sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1455 of yacc.c  */
#line 11632 "sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1455 of yacc.c  */
#line 11633 "sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1455 of yacc.c  */
#line 11634 "sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1455 of yacc.c  */
#line 11635 "sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1455 of yacc.c  */
#line 11636 "sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1455 of yacc.c  */
#line 11637 "sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1455 of yacc.c  */
#line 11638 "sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1455 of yacc.c  */
#line 11639 "sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1455 of yacc.c  */
#line 11640 "sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1455 of yacc.c  */
#line 11641 "sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1455 of yacc.c  */
#line 11642 "sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1455 of yacc.c  */
#line 11643 "sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1455 of yacc.c  */
#line 11644 "sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1455 of yacc.c  */
#line 11645 "sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1455 of yacc.c  */
#line 11646 "sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1455 of yacc.c  */
#line 11647 "sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1455 of yacc.c  */
#line 11648 "sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1455 of yacc.c  */
#line 11649 "sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1455 of yacc.c  */
#line 11650 "sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1455 of yacc.c  */
#line 11651 "sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1455 of yacc.c  */
#line 11652 "sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1455 of yacc.c  */
#line 11653 "sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1455 of yacc.c  */
#line 11654 "sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1455 of yacc.c  */
#line 11655 "sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1455 of yacc.c  */
#line 11656 "sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1455 of yacc.c  */
#line 11657 "sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1455 of yacc.c  */
#line 11658 "sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1455 of yacc.c  */
#line 11659 "sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1455 of yacc.c  */
#line 11660 "sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1455 of yacc.c  */
#line 11661 "sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1455 of yacc.c  */
#line 11662 "sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1455 of yacc.c  */
#line 11663 "sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1455 of yacc.c  */
#line 11664 "sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1455 of yacc.c  */
#line 11665 "sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1455 of yacc.c  */
#line 11666 "sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1455 of yacc.c  */
#line 11667 "sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1455 of yacc.c  */
#line 11668 "sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1455 of yacc.c  */
#line 11669 "sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1455 of yacc.c  */
#line 11670 "sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1455 of yacc.c  */
#line 11671 "sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1455 of yacc.c  */
#line 11672 "sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1455 of yacc.c  */
#line 11673 "sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1455 of yacc.c  */
#line 11680 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2081:

/* Line 1455 of yacc.c  */
#line 11690 "sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1455 of yacc.c  */
#line 11694 "sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1455 of yacc.c  */
#line 11695 "sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1455 of yacc.c  */
#line 11704 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2087:

/* Line 1455 of yacc.c  */
#line 11735 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              lex->sphead->restore_lex(thd);
            }
          }
    break;

  case 2088:

/* Line 1455 of yacc.c  */
#line 11785 "sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1455 of yacc.c  */
#line 11786 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2090:

/* Line 1455 of yacc.c  */
#line 11787 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2091:

/* Line 1455 of yacc.c  */
#line 11788 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2092:

/* Line 1455 of yacc.c  */
#line 11792 "sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2093:

/* Line 1455 of yacc.c  */
#line 11793 "sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2094:

/* Line 1455 of yacc.c  */
#line 11797 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2095:

/* Line 1455 of yacc.c  */
#line 11798 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2096:

/* Line 1455 of yacc.c  */
#line 11799 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2097:

/* Line 1455 of yacc.c  */
#line 11800 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2098:

/* Line 1455 of yacc.c  */
#line 11804 "sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2099:

/* Line 1455 of yacc.c  */
#line 11805 "sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2100:

/* Line 1455 of yacc.c  */
#line 11806 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2101:

/* Line 1455 of yacc.c  */
#line 11807 "sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2104:

/* Line 1455 of yacc.c  */
#line 11817 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              Item *it;
              Item_trigger_field *trg_fld;
              sp_instr_set_trigger_field *sp_fld;
              LINT_INIT(sp_fld);
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else
              {
                /* QQ: Shouldn't this be field's default value ? */
                it= new Item_null();
              }

              DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));

              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            Item_trigger_field::NEW_ROW,
                                            (yyvsp[(2) - (4)].variable).base_name.str,
                                            UPDATE_ACL, FALSE);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              sp_fld= new sp_instr_set_trigger_field(lex->sphead->
                                                     instructions(),
                                                     lex->spcont,
                                                     trg_fld,
                                                     it, lex);
              if (sp_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field
                objects in trigger.
              */
              lex->trg_table_fields.link_in_list((uchar *)trg_fld,
                                                 (uchar **) &trg_fld->
                                                   next_trg_field);

              if (lex->sphead->add_instr(sp_fld))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            { /* System variable */
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);
              set_var *var= new set_var(lex->option_type, (yyvsp[(2) - (4)].variable).var,
                                        &(yyvsp[(2) - (4)].variable).base_name, (yyvsp[(4) - (4)].item));
              if (var == NULL)
                MYSQL_YYABORT;
              lex->var_list.push_back(var);
            }
            else
            {
              /* An SP local variable */
              sp_pcontext *ctx= lex->spcont;
              sp_variable_t *spv;
              sp_instr_set *sp_set;
              Item *it;
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              spv= ctx->find_variable(&(yyvsp[(2) - (4)].variable).base_name);

              if ((yyvsp[(4) - (4)].item))
                it= (yyvsp[(4) - (4)].item);
              else if (spv->dflt)
                it= spv->dflt;
              else
              {
                it= new (thd->mem_root) Item_null();
                if (it == NULL)
                  MYSQL_YYABORT;
              }
              sp_set= new sp_instr_set(lex->sphead->instructions(), ctx,
                                       spv->offset, it, spv->type, lex, TRUE);
              if (sp_set == NULL ||
                  lex->sphead->add_instr(sp_set))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2105:

/* Line 1455 of yacc.c  */
#line 11915 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2106:

/* Line 1455 of yacc.c  */
#line 11934 "sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2107:

/* Line 1455 of yacc.c  */
#line 11945 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            set_var *var= new set_var((yyvsp[(3) - (6)].var_type), (yyvsp[(4) - (6)].variable).var, &(yyvsp[(4) - (6)].variable).base_name, (yyvsp[(6) - (6)].item));
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2108:

/* Line 1455 of yacc.c  */
#line 11953 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2109:

/* Line 1455 of yacc.c  */
#line 11967 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2110:

/* Line 1455 of yacc.c  */
#line 11982 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2111:

/* Line 1455 of yacc.c  */
#line 12001 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->priv_user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2112:

/* Line 1455 of yacc.c  */
#line 12028 "sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2113:

/* Line 1455 of yacc.c  */
#line 12041 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            /* We have to lookup here since local vars can shadow sysvars */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* Not an SP local variable */
              sys_var *tmp=find_sys_var(thd, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= null_lex_str;
              if (spc && tmp == &sys_autocommit)
              {
                /*
                  We don't allow setting AUTOCOMMIT from a stored function
                  or trigger.
                */
                lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
              }
            }
            else
            {
              /* An SP local variable */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2114:

/* Line 1455 of yacc.c  */
#line 12073 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2115:

/* Line 1455 of yacc.c  */
#line 12116 "sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2116:

/* Line 1455 of yacc.c  */
#line 12129 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2117:

/* Line 1455 of yacc.c  */
#line 12130 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2118:

/* Line 1455 of yacc.c  */
#line 12131 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2119:

/* Line 1455 of yacc.c  */
#line 12132 "sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2120:

/* Line 1455 of yacc.c  */
#line 12136 "sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2121:

/* Line 1455 of yacc.c  */
#line 12138 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2122:

/* Line 1455 of yacc.c  */
#line 12147 "sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2123:

/* Line 1455 of yacc.c  */
#line 12158 "sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2124:

/* Line 1455 of yacc.c  */
#line 12159 "sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2125:

/* Line 1455 of yacc.c  */
#line 12161 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2126:

/* Line 1455 of yacc.c  */
#line 12167 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2127:

/* Line 1455 of yacc.c  */
#line 12173 "sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2128:

/* Line 1455 of yacc.c  */
#line 12184 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2129:

/* Line 1455 of yacc.c  */
#line 12195 "sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1455 of yacc.c  */
#line 12210 "sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type))
              MYSQL_YYABORT;
            /* If table is to be write locked, protect from a impending GRL. */
            if (lock_type >= TL_WRITE_ALLOW_WRITE)
              Lex->protect_against_global_read_lock= TRUE;
          }
    break;

  case 2135:

/* Line 1455 of yacc.c  */
#line 12221 "sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2136:

/* Line 1455 of yacc.c  */
#line 12222 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2137:

/* Line 1455 of yacc.c  */
#line 12223 "sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2138:

/* Line 1455 of yacc.c  */
#line 12224 "sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2139:

/* Line 1455 of yacc.c  */
#line 12229 "sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2140:

/* Line 1455 of yacc.c  */
#line 12240 "sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1455 of yacc.c  */
#line 12249 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2142:

/* Line 1455 of yacc.c  */
#line 12261 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2143:

/* Line 1455 of yacc.c  */
#line 12273 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2144:

/* Line 1455 of yacc.c  */
#line 12292 "sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
          }
    break;

  case 2145:

/* Line 1455 of yacc.c  */
#line 12298 "sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2146:

/* Line 1455 of yacc.c  */
#line 12299 "sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2147:

/* Line 1455 of yacc.c  */
#line 12303 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2148:

/* Line 1455 of yacc.c  */
#line 12304 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2149:

/* Line 1455 of yacc.c  */
#line 12308 "sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2150:

/* Line 1455 of yacc.c  */
#line 12309 "sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2151:

/* Line 1455 of yacc.c  */
#line 12310 "sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2152:

/* Line 1455 of yacc.c  */
#line 12311 "sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2153:

/* Line 1455 of yacc.c  */
#line 12313 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2154:

/* Line 1455 of yacc.c  */
#line 12321 "sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1455 of yacc.c  */
#line 12325 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2156:

/* Line 1455 of yacc.c  */
#line 12326 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2157:

/* Line 1455 of yacc.c  */
#line 12327 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2158:

/* Line 1455 of yacc.c  */
#line 12328 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2159:

/* Line 1455 of yacc.c  */
#line 12329 "sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2160:

/* Line 1455 of yacc.c  */
#line 12336 "sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1455 of yacc.c  */
#line 12341 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2162:

/* Line 1455 of yacc.c  */
#line 12347 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2163:

/* Line 1455 of yacc.c  */
#line 12358 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2164:

/* Line 1455 of yacc.c  */
#line 12369 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2165:

/* Line 1455 of yacc.c  */
#line 12376 "sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1455 of yacc.c  */
#line 12382 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2167:

/* Line 1455 of yacc.c  */
#line 12389 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2168:

/* Line 1455 of yacc.c  */
#line 12401 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2171:

/* Line 1455 of yacc.c  */
#line 12419 "sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1455 of yacc.c  */
#line 12421 "sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2177:

/* Line 1455 of yacc.c  */
#line 12439 "sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2178:

/* Line 1455 of yacc.c  */
#line 12440 "sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1455 of yacc.c  */
#line 12442 "sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2180:

/* Line 1455 of yacc.c  */
#line 12443 "sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1455 of yacc.c  */
#line 12445 "sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2182:

/* Line 1455 of yacc.c  */
#line 12446 "sql_yacc.yy"
    {}
    break;

  case 2183:

/* Line 1455 of yacc.c  */
#line 12448 "sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2184:

/* Line 1455 of yacc.c  */
#line 12449 "sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1455 of yacc.c  */
#line 12450 "sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2186:

/* Line 1455 of yacc.c  */
#line 12451 "sql_yacc.yy"
    {}
    break;

  case 2187:

/* Line 1455 of yacc.c  */
#line 12452 "sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2188:

/* Line 1455 of yacc.c  */
#line 12453 "sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2189:

/* Line 1455 of yacc.c  */
#line 12454 "sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2190:

/* Line 1455 of yacc.c  */
#line 12455 "sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2191:

/* Line 1455 of yacc.c  */
#line 12456 "sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2192:

/* Line 1455 of yacc.c  */
#line 12457 "sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2193:

/* Line 1455 of yacc.c  */
#line 12458 "sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2194:

/* Line 1455 of yacc.c  */
#line 12459 "sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2195:

/* Line 1455 of yacc.c  */
#line 12460 "sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2196:

/* Line 1455 of yacc.c  */
#line 12461 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2197:

/* Line 1455 of yacc.c  */
#line 12462 "sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2198:

/* Line 1455 of yacc.c  */
#line 12463 "sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2199:

/* Line 1455 of yacc.c  */
#line 12464 "sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2200:

/* Line 1455 of yacc.c  */
#line 12465 "sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2201:

/* Line 1455 of yacc.c  */
#line 12466 "sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2202:

/* Line 1455 of yacc.c  */
#line 12467 "sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2203:

/* Line 1455 of yacc.c  */
#line 12468 "sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2204:

/* Line 1455 of yacc.c  */
#line 12469 "sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2205:

/* Line 1455 of yacc.c  */
#line 12470 "sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2206:

/* Line 1455 of yacc.c  */
#line 12471 "sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2207:

/* Line 1455 of yacc.c  */
#line 12472 "sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2208:

/* Line 1455 of yacc.c  */
#line 12473 "sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2209:

/* Line 1455 of yacc.c  */
#line 12474 "sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2210:

/* Line 1455 of yacc.c  */
#line 12478 "sql_yacc.yy"
    {}
    break;

  case 2211:

/* Line 1455 of yacc.c  */
#line 12479 "sql_yacc.yy"
    {}
    break;

  case 2214:

/* Line 1455 of yacc.c  */
#line 12489 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2215:

/* Line 1455 of yacc.c  */
#line 12499 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2216:

/* Line 1455 of yacc.c  */
#line 12509 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2217:

/* Line 1455 of yacc.c  */
#line 12522 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2218:

/* Line 1455 of yacc.c  */
#line 12537 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2219:

/* Line 1455 of yacc.c  */
#line 12550 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2220:

/* Line 1455 of yacc.c  */
#line 12563 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2221:

/* Line 1455 of yacc.c  */
#line 12575 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2222:

/* Line 1455 of yacc.c  */
#line 12580 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2223:

/* Line 1455 of yacc.c  */
#line 12588 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2224:

/* Line 1455 of yacc.c  */
#line 12593 "sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2225:

/* Line 1455 of yacc.c  */
#line 12601 "sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2226:

/* Line 1455 of yacc.c  */
#line 12628 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); }
    break;

  case 2227:

/* Line 1455 of yacc.c  */
#line 12630 "sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2228:

/* Line 1455 of yacc.c  */
#line 12635 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2232:

/* Line 1455 of yacc.c  */
#line 12649 "sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2234:

/* Line 1455 of yacc.c  */
#line 12678 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2235:

/* Line 1455 of yacc.c  */
#line 12682 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2236:

/* Line 1455 of yacc.c  */
#line 12686 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2237:

/* Line 1455 of yacc.c  */
#line 12690 "sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2238:

/* Line 1455 of yacc.c  */
#line 12696 "sql_yacc.yy"
    {}
    break;

  case 2240:

/* Line 1455 of yacc.c  */
#line 12701 "sql_yacc.yy"
    {}
    break;

  case 2241:

/* Line 1455 of yacc.c  */
#line 12702 "sql_yacc.yy"
    {}
    break;

  case 2242:

/* Line 1455 of yacc.c  */
#line 12706 "sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2243:

/* Line 1455 of yacc.c  */
#line 12708 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2244:

/* Line 1455 of yacc.c  */
#line 12714 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2245:

/* Line 1455 of yacc.c  */
#line 12720 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2246:

/* Line 1455 of yacc.c  */
#line 12726 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2247:

/* Line 1455 of yacc.c  */
#line 12735 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2248:

/* Line 1455 of yacc.c  */
#line 12740 "sql_yacc.yy"
    {}
    break;

  case 2249:

/* Line 1455 of yacc.c  */
#line 12744 "sql_yacc.yy"
    {}
    break;

  case 2250:

/* Line 1455 of yacc.c  */
#line 12745 "sql_yacc.yy"
    {}
    break;

  case 2251:

/* Line 1455 of yacc.c  */
#line 12750 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 1); }
    break;

  case 2252:

/* Line 1455 of yacc.c  */
#line 12751 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2253:

/* Line 1455 of yacc.c  */
#line 12752 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2254:

/* Line 1455 of yacc.c  */
#line 12757 "sql_yacc.yy"
    { (yyval.num)= (YYTHD->variables.completion_type == 2); }
    break;

  case 2255:

/* Line 1455 of yacc.c  */
#line 12758 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2256:

/* Line 1455 of yacc.c  */
#line 12759 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2257:

/* Line 1455 of yacc.c  */
#line 12763 "sql_yacc.yy"
    {}
    break;

  case 2258:

/* Line 1455 of yacc.c  */
#line 12764 "sql_yacc.yy"
    {}
    break;

  case 2259:

/* Line 1455 of yacc.c  */
#line 12769 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2260:

/* Line 1455 of yacc.c  */
#line 12779 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            lex->tx_chain= (yyvsp[(3) - (4)].num); 
            lex->tx_release= (yyvsp[(4) - (4)].num);
          }
    break;

  case 2261:

/* Line 1455 of yacc.c  */
#line 12787 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2262:

/* Line 1455 of yacc.c  */
#line 12796 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2263:

/* Line 1455 of yacc.c  */
#line 12805 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2264:

/* Line 1455 of yacc.c  */
#line 12818 "sql_yacc.yy"
    {}
    break;

  case 2266:

/* Line 1455 of yacc.c  */
#line 12824 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result && 
               (lex->result->get_nest_level() == -1 ||
                lex->result->get_nest_level() == lex->nest_level))
              {
                /* 
                   Only the last SELECT can have INTO unless the INTO and UNION
                   are at different nest levels. In version 5.1 and above, INTO
                   will onle be allowed at top level.
                */
                my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
                MYSQL_YYABORT;
              }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* This counter shouldn't be incremented for UNION parts */
            Lex->nest_level--;
            if (mysql_new_select(lex, 0))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage=UNION_TYPE;
            if ((yyvsp[(2) - (2)].num)) /* UNION DISTINCT - remember position */
              lex->current_select->master_unit()->union_distinct=
                lex->current_select;
          }
    break;

  case 2267:

/* Line 1455 of yacc.c  */
#line 12854 "sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2268:

/* Line 1455 of yacc.c  */
#line 12864 "sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2269:

/* Line 1455 of yacc.c  */
#line 12865 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2270:

/* Line 1455 of yacc.c  */
#line 12866 "sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2271:

/* Line 1455 of yacc.c  */
#line 12870 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2272:

/* Line 1455 of yacc.c  */
#line 12886 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2275:

/* Line 1455 of yacc.c  */
#line 12899 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2276:

/* Line 1455 of yacc.c  */
#line 12900 "sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2277:

/* Line 1455 of yacc.c  */
#line 12901 "sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2278:

/* Line 1455 of yacc.c  */
#line 12905 "sql_yacc.yy"
    {
          (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
        }
    break;

  case 2279:

/* Line 1455 of yacc.c  */
#line 12912 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (5)].select_lex);
        }
    break;

  case 2280:

/* Line 1455 of yacc.c  */
#line 12917 "sql_yacc.yy"
    {
          (yyval.select_lex)= (yyvsp[(4) - (6)].select_lex);
        }
    break;

  case 2281:

/* Line 1455 of yacc.c  */
#line 12922 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2282:

/* Line 1455 of yacc.c  */
#line 12943 "sql_yacc.yy"
    {
            LEX *lex=Lex;
            /*
              Set the required lock level for the tables associated with the
              current sub-select. This will overwrite previous lock options set
              using st_select_lex::add_table_to_list in any of the following
              rules: single_multi, table_wild_one, load_data, table_alias_ref,
              table_factor.
              The default lock level is TL_READ_DEFAULT but it can be modified
              with query options specific for a certain (sub-)SELECT.
            */
            lex->current_select->
              set_lock_for_tables(lex->current_select->lock_option);

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2283:

/* Line 1455 of yacc.c  */
#line 12979 "sql_yacc.yy"
    {}
    break;

  case 2284:

/* Line 1455 of yacc.c  */
#line 12981 "sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1455 of yacc.c  */
#line 12983 "sql_yacc.yy"
    {}
    break;

  case 2299:

/* Line 1455 of yacc.c  */
#line 13016 "sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2300:

/* Line 1455 of yacc.c  */
#line 13030 "sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2301:

/* Line 1455 of yacc.c  */
#line 13043 "sql_yacc.yy"
    {}
    break;

  case 2302:

/* Line 1455 of yacc.c  */
#line 13045 "sql_yacc.yy"
    {}
    break;

  case 2303:

/* Line 1455 of yacc.c  */
#line 13047 "sql_yacc.yy"
    {}
    break;

  case 2304:

/* Line 1455 of yacc.c  */
#line 13052 "sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2305:

/* Line 1455 of yacc.c  */
#line 13057 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2306:

/* Line 1455 of yacc.c  */
#line 13059 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2307:

/* Line 1455 of yacc.c  */
#line 13061 "sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2308:

/* Line 1455 of yacc.c  */
#line 13066 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2309:

/* Line 1455 of yacc.c  */
#line 13068 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2310:

/* Line 1455 of yacc.c  */
#line 13070 "sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2311:

/* Line 1455 of yacc.c  */
#line 13075 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL, TL_OPTION_UPDATING))
              MYSQL_YYABORT;
          }
    break;

  case 2313:

/* Line 1455 of yacc.c  */
#line 13088 "sql_yacc.yy"
    {}
    break;

  case 2315:

/* Line 1455 of yacc.c  */
#line 13094 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2316:

/* Line 1455 of yacc.c  */
#line 13099 "sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2317:

/* Line 1455 of yacc.c  */
#line 13106 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2318:

/* Line 1455 of yacc.c  */
#line 13115 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2321:

/* Line 1455 of yacc.c  */
#line 13137 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2322:

/* Line 1455 of yacc.c  */
#line 13139 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2323:

/* Line 1455 of yacc.c  */
#line 13141 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2324:

/* Line 1455 of yacc.c  */
#line 13143 "sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2325:

/* Line 1455 of yacc.c  */
#line 13160 "sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2326:

/* Line 1455 of yacc.c  */
#line 13166 "sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2327:

/* Line 1455 of yacc.c  */
#line 13171 "sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2328:

/* Line 1455 of yacc.c  */
#line 13201 "sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE))
              MYSQL_YYABORT;
          }
    break;

  case 2329:

/* Line 1455 of yacc.c  */
#line 13234 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2330:

/* Line 1455 of yacc.c  */
#line 13252 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2331:

/* Line 1455 of yacc.c  */
#line 13275 "sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2332:

/* Line 1455 of yacc.c  */
#line 13307 "sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2333:

/* Line 1455 of yacc.c  */
#line 13311 "sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2334:

/* Line 1455 of yacc.c  */
#line 13319 "sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2335:

/* Line 1455 of yacc.c  */
#line 13342 "sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2336:

/* Line 1455 of yacc.c  */
#line 13351 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2337:

/* Line 1455 of yacc.c  */
#line 13407 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2338:

/* Line 1455 of yacc.c  */
#line 13431 "sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2339:

/* Line 1455 of yacc.c  */
#line 13440 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2340:

/* Line 1455 of yacc.c  */
#line 13448 "sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2341:

/* Line 1455 of yacc.c  */
#line 13456 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2342:

/* Line 1455 of yacc.c  */
#line 13470 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2343:

/* Line 1455 of yacc.c  */
#line 13474 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2344:

/* Line 1455 of yacc.c  */
#line 13478 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2345:

/* Line 1455 of yacc.c  */
#line 13482 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2346:

/* Line 1455 of yacc.c  */
#line 13486 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2347:

/* Line 1455 of yacc.c  */
#line 13490 "sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2348:

/* Line 1455 of yacc.c  */
#line 13497 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2349:

/* Line 1455 of yacc.c  */
#line 13504 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2350:

/* Line 1455 of yacc.c  */
#line 13511 "sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2351:

/* Line 1455 of yacc.c  */
#line 13520 "sql_yacc.yy"
    {}
    break;

  case 2352:

/* Line 1455 of yacc.c  */
#line 13521 "sql_yacc.yy"
    {}
    break;

  case 2353:

/* Line 1455 of yacc.c  */
#line 13525 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2354:

/* Line 1455 of yacc.c  */
#line 13526 "sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2355:

/* Line 1455 of yacc.c  */
#line 13527 "sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2356:

/* Line 1455 of yacc.c  */
#line 13531 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2357:

/* Line 1455 of yacc.c  */
#line 13532 "sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2358:

/* Line 1455 of yacc.c  */
#line 13537 "sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2359:

/* Line 1455 of yacc.c  */
#line 13539 "sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2361:

/* Line 1455 of yacc.c  */
#line 13544 "sql_yacc.yy"
    {}
    break;

  case 2362:

/* Line 1455 of yacc.c  */
#line 13545 "sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2363:

/* Line 1455 of yacc.c  */
#line 13550 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2364:

/* Line 1455 of yacc.c  */
#line 13560 "sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1455 of yacc.c  */
#line 35991 "sql_yacc.cc"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



