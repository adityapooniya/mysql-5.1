# This test demonstrates an assertion failure in ha_rollback_trans():
# DBUG_ASSERT(0);
# my_error(ER_COMMIT_NOT_ALLOWED_IN_SF_OR_TRG, MYF(0));
# 

drop table if exists t1;
create table t1 (a smallint primary key) engine=innodb;
insert into t1 (a) values (40);
insert into t1 (a) values (50);
select * from t1;

delimiter |;

--disable_warnings
drop procedure if exists t3_update_conn2|
--enable_warnings

create function t3_update_conn1() returns int
begin
  update t1 set a = 4 where a = 40;
  return 100;
end|

create function t3_update_conn2() returns int
begin
  update t1 set a = 5 where a = 50;
  return 200;
end|

delimiter ;|

connect (conn1,localhost,root,,test,$MASTER_MYPORT,$MASTER_MYSOCK);
connect (conn2,localhost,root,,test,$MASTER_MYPORT,$MASTER_MYSOCK);

connection conn1;
select * from t1;
begin;
update t1 set a = 5 where a = 50;
select * from t1;

connection conn2;
begin;
update t1 set a = 4 where a = 40;
select * from t1;

connection conn1;
-- Hangs waiting for conn2.
-- When the deadlock occurs, an assertion fails in ha_rollback_trans()
send select t3_update_conn1();

connection conn2;
-- This will cause a deadlock:
select t3_update_conn2();
select * from t1;

connection conn1;
reap;
select * from t1;

disconnect conn1;
disconnect conn2;
