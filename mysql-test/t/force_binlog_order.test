################################################################################
################################################################################

# requirements
--source include/have_debug_sync.inc
--source include/have_innodb.inc
--source include/have_log_bin.inc

# setup
connect(c1,127.0.0.1,root,,test,$MASTER_MYPORT,);
connect(c2,127.0.0.1,root,,test,$MASTER_MYPORT,);

--disable_query_log
call mtr.add_suppression("Group commit: current ticket stuck for [0-9]* seconds!");
--enable_query_log

--connection c1
--echo connection c1

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings

CREATE TABLE t1 (k INT NOT NULL, a INT NOT NULL, b INT NOT NULL, c INT NOT NULL, PRIMARY KEY(k)) ENGINE=InnoDB;
INSERT INTO t1 (k, a, b, c) VALUES (1, 0, 0, 0);
INSERT INTO t1 (k, a, b, c) VALUES (2, 0, 0, 0);


################################################################################
# first, verify that when force_binlog_order is off, transactions can indeed
# show up in binlog out-of-order when different rows are affected
################################################################################
# nuke binlogs and sync points
RESET MASTER;
SET DEBUG_SYNC= 'RESET';

SET GLOBAL innodb_prepare_commit_mutex=0;
SET GLOBAL force_binlog_order=0;

--connection c1
--echo connection c1
BEGIN;
UPDATE t1 SET a=10 WHERE k=1;
SET DEBUG_SYNC='after_innobase_xa_prepare SIGNAL c1_prepared WAIT_FOR c2_committed TIMEOUT 3';
--send COMMIT;

  --connection c2
  --echo connection c2
  SET DEBUG_SYNC='now WAIT_FOR c1_prepared TIMEOUT 3';
  BEGIN;
  UPDATE t1 SET a=20 WHERE k=2;
  COMMIT;
  SET DEBUG_SYNC='now SIGNAL c2_committed';

--connection c1
--echo connection c1
--reap;
SHOW BINLOG EVENTS LIMIT 2,1;


################################################################################
# repeat with autocommit
################################################################################
# nuke binlogs and sync points
RESET MASTER;
SET DEBUG_SYNC= 'RESET';

SET GLOBAL innodb_prepare_commit_mutex=0;
SET GLOBAL force_binlog_order=0;

--connection c1
--echo connection c1
SET DEBUG_SYNC='after_innobase_xa_prepare SIGNAL c1_prepared WAIT_FOR c2_committed TIMEOUT 3';
--send UPDATE t1 SET a=100 WHERE k=1;

  --connection c2
  --echo connection c2
  SET DEBUG_SYNC='now WAIT_FOR c1_prepared TIMEOUT 3';
  UPDATE t1 SET a=200 WHERE k=2;
  SET DEBUG_SYNC='now SIGNAL c2_committed';

--connection c1
--echo connection c1
--reap
SHOW BINLOG EVENTS LIMIT 2,1;


################################################################################
# next verify that these are back in order when force_binlog_order is
# enabled the debug_sync will time out, but that is a price we have to pay
################################################################################
# nuke binlogs and sync points
RESET MASTER;
SET DEBUG_SYNC= 'RESET';

SET GLOBAL innodb_prepare_commit_mutex=0;
SET GLOBAL force_binlog_order=1;

--connection c1
--echo connection c1
BEGIN;
UPDATE t1 SET a=10 WHERE k=1;
SET DEBUG_SYNC='after_innobase_xa_prepare SIGNAL c1_prepared WAIT_FOR c2_committed TIMEOUT 3';
--send COMMIT;

  --connection c2
  --echo connection c2
  SET DEBUG_SYNC='now WAIT_FOR c1_prepared TIMEOUT 3';
  BEGIN;
  UPDATE t1 SET a=20 WHERE k=2;
  COMMIT;
  SET DEBUG_SYNC='now SIGNAL c2_committed';

--connection c1
--echo connection c1
--reap;
SHOW BINLOG EVENTS LIMIT 2,1;


################################################################################
# repeat for autocommit
################################################################################
# nuke binlogs and sync points
RESET MASTER;
SET DEBUG_SYNC= 'RESET';

SET GLOBAL innodb_prepare_commit_mutex=0;
SET GLOBAL force_binlog_order=1;

--connection c1
--echo connection c1
SET DEBUG_SYNC='after_innobase_xa_prepare SIGNAL c1_prepared WAIT_FOR c2_committed TIMEOUT 3';
--send UPDATE t1 SET a=10 WHERE k=1;

  --connection c2
  --echo connection c2
  SET DEBUG_SYNC='now WAIT_FOR c1_prepared TIMEOUT 3';
  UPDATE t1 SET a=20 WHERE k=2;
  SET DEBUG_SYNC='now SIGNAL c2_committed';

--connection c1
--echo connection c1
--reap
SHOW BINLOG EVENTS LIMIT 2,1;


################################################################################
################################################################################

# final cleanup
DROP TABLE t1;
SET GLOBAL force_binlog_order=0;
SET GLOBAL innodb_prepare_commit_mutex=1;
SET DEBUG_SYNC= 'RESET';

# clean exit
--exit
