#
# test admission_control for check_client_interval_milliseconds when
# timeout disconnects with waiting query
#

--source include/have_debug_sync.inc

show global variables like "admission_control";

grant all on *.* to 'adminc'@'%' with max_concurrent_queries 1 max_user_connections 3;
select User, Host, max_user_connections, max_concurrent_queries from mysql.user where User = 'adminc';

#
# test with 2 concurrent queries
#

connect (ac1, localhost, adminc,,);
show grants;

connect (ac2, localhost, adminc,,);
select connection_id() into @cid2;
let $id2=`select @cid2`;

connect (ac3, localhost, adminc,,);
select connection_id() into @cid3;
let $id3=`select @cid3`;

# This blocks for two seconds without giving up admission_control entry
connection ac1;
SET DEBUG_SYNC='in_sleep_func SIGNAL i_am_sleeping';
send select sleep(2);

# This should timeout waiting to run
connection ac2;
SET DEBUG_SYNC='now WAIT_FOR i_am_sleeping';
SET DEBUG_SYNC='admission_control_enter_waiting SIGNAL i_am_waiting';
SET DEBUG_SYNC='admission_control_exit_killed_or_closed SIGNAL i_am_leaving';
send select sleep(1000);

# Kill the second connection
connection default;
SET DEBUG_SYNC='now WAIT_FOR i_am_waiting';
dirty_close ac2;
SET DEBUG_SYNC='now WAIT_FOR i_am_leaving';

# confirm this doesn't wait behind "select sleep(1000)"
# and that threads in admission_control_enter respond to disconnect

connection ac3;
select unix_timestamp() into @start_time;
select 1;
select unix_timestamp() into @end_time;
select (@end_time - @start_time) < 5;

# connection ac2;
# CR_SERVER_LOST
# --error 2013
# reap;

connection ac1;
reap;

connection default;
disconnect ac1;
disconnect ac3;
drop user 'adminc'@'%';
SET DEBUG_SYNC= 'RESET';

select User, Host, max_user_connections, max_concurrent_queries from mysql.user where User = 'adminc';
