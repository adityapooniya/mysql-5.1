#
# test transaction_control for max_concurrent_transactions for update statements
#
#
--source include/have_innodb_plugin.inc
--source include/have_debug_sync.inc

grant all on *.* to 'adminc'@'%' with max_concurrent_transactions 1 max_user_connections 100;
select User, Host, max_user_connections, max_concurrent_transactions from mysql.user where User = 'adminc';

--disable_warnings
drop table if exists tctest, tctest2;
--enable_warnings
flush statistics;

connect (tc0, localhost, adminc,,);
connect (tc1, localhost, adminc,,);
show grants;
create table tctest(id int, val int, primary key(id)) engine=innodb;
create table tctest2(id int, val int, primary key(id)) engine=innodb;

#
# create extra transaction because code allows new transactions until limit has been exceeded
# rather than reached
#
connection tc0;
begin;
insert into tctest2 values (99, 99);

--echo " "
--echo confirm transaction control limits concurrent transactions with auto-commit
--echo " "

connection default;
insert into tctest values (1, 0), (2, 0);

connection tc1;
SET DEBUG_SYNC='after_update_row_ok SIGNAL sleep_after_update WAIT_FOR wake_up';
--echo this blocks
send update tctest set val = 1 where id = 1;

connection default;
SET DEBUG_SYNC='now WAIT_FOR sleep_after_update';
select command, state, info from information_schema.processlist where user='adminc' order by command, info;
--query_vertical select TRANSACTIONS_SLOTS_INUSE from information_schema.user_statistics where user_name='adminc'

connect (tc2, localhost, adminc,,);
--echo this fails on max_concurrent_transactions
SET DEBUG_SYNC='transaction_control_limit_reached SIGNAL limit_reached';
send update tctest set val = 1 where id = 2;

connection default;
SET DEBUG_SYNC='now WAIT_FOR limit_reached';
--query_vertical select id, val from tctest
--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'
SET DEBUG_SYNC='now SIGNAL wake_up';

connection tc2;
--error ER_TRANSACTION_CONTROL_LIMIT
reap;
connection tc1;
reap;

--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'

--echo " "
--echo confirm transaction control limits concurrent transactions with BEGIN
--echo " "

SET DEBUG_SYNC='RESET';
connection tc1;
delete from tctest;
insert into tctest values (1, 0), (2, 0);

--echo this blocks
begin;
update tctest set val = 1 where id = 1;

--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'

connection tc2;
--echo this fails on max_concurrent_transactions
SET DEBUG_SYNC='transaction_control_limit_reached SIGNAL limit_reached';
send update tctest set val = 1 where id = 2;

connection default;
SET DEBUG_SYNC='now WAIT_FOR limit_reached';
--query_vertical select id, val from tctest
--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'

connection tc2;
--error ER_TRANSACTION_CONTROL_LIMIT
reap;

connection tc1;
commit;
--query_vertical select id from tctest;

--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'

--echo " "
--echo cleanup
--echo " "

connection tc0;
rollback;

SET DEBUG_SYNC='RESET';
connection default;
disconnect tc0;
disconnect tc1;
disconnect tc2;
drop user 'adminc'@'%';
drop table tctest;
drop table tctest2;

--query_vertical select TRANSACTIONS_SLOTS_INUSE, LIMIT_FAIL_TRANSACTIONS from information_schema.user_statistics where user_name='adminc'
select User, Host, max_user_connections, max_concurrent_transactions from mysql.user where User = 'adminc';
