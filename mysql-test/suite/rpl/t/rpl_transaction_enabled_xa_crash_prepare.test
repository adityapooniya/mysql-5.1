#
# Confirm crash recovery of prepared transaction on slave does not break rpl_transaction_enabled
#

source include/have_innodb.inc;
source include/have_debug.inc;
source include/master-slave.inc;

# Don't test this under valgrind, memory leaks will occur
--source include/not_valgrind.inc

--disable_warnings
drop table if exists t1;
--enable_warnings

# TODO: use a better suppression
call mtr.add_suppression(".*");

CREATE TABLE t1(a int primary key) engine=innodb;
sync_slave_with_master;

# Setup the mysqld to crash at certain point
connection slave;
SET GLOBAL debug="d,half_binlogged_transaction";

# Write file to make mysql-test-run.pl expect crash and restart
--exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.2.expect

connection master;

# The commit crashes the slave after prepare in innobase_xa_prepare. There
# was a bug where the prepared transaction would get replayed on crash
# recovery. If that happens for this test it stops replication with a
# duplicate key error.
BEGIN;
insert into t1 values(10);
COMMIT;
insert into t1 values(11);

# This has a race. If the slave crashes and recovers before the wait below 
# detects it then the script hangs here. Alas, I prefer that unlikely race
# over replacing this with a long sleep.
connection slave;
--source include/wait_until_disconnected.inc

# Call script that will poll the server waiting for it to be back online again
--enable_reconnect
--source include/wait_until_connected_again.inc

start slave;

connection master;
sync_slave_with_master;
select * from t1;

connection slave;
select * from t1;

SET GLOBAL INNODB_FILE_FORMAT_CHECK=`ANTELOPE`;
connection master;
DROP TABLE t1;
sync_slave_with_master;
stop slave;
