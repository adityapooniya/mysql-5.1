# Populate a table with 1000 records. Allow the replica to sync with the master.
# Run concurrent threads that run OLTP transactions on master.
# Kill the master database server at random points.
# Check the table against the replica.
# Reinvoke the threads. Threads save their state in a journal table that allows them
# to resume the state before the database crashed.

# create the directory for temporary log files.
--exec rm -rf /tmp/load_generator
--exec mkdir /tmp/load_generator

# Don't test this under valgrind, memory leaks will occur
--source include/not_valgrind.inc
--source include/have_innodb.inc
--source include/master-slave.inc

# This test takes rather long time so let us run it only in
# --big-test mode
--source include/big_test.inc

--connection master
# record the file format in order to restore in the end.
--let $file_format_save = `SELECT @@innodb_file_format`
--let $file_format_check_save = `SELECT @@innodb_file_format_check`
--let $background_checkpoint_save = `SELECT @@innodb_background_checkpoint`
--let $log_compressed_pages_save = `SELECT @@innodb_log_compressed_pages`
SET GLOBAL innodb_file_format='Barracuda';
SET GLOBAL innodb_log_compressed_pages=OFF;
# fewer checkpoints mean more time during recovery.
SET GLOBAL innodb_background_checkpoint=OFF;

--connection slave
SET GLOBAL innodb_file_format='Barracuda';
SET GLOBAL innodb_log_compressed_pages=ON;

--connection master
# since this test generates lot of errors in log, suppress checking errors
call mtr.add_suppression(".*");

DROP TABLE IF EXISTS t1, journal;

# create journal table for transactions to store their state
CREATE TABLE journal(xid INT PRIMARY KEY,
                     seed INT,
                     loop_num INT,
                     num_inserts INT,
                     num_updates INT,
                     num_deletes INT,
                     time_spent FLOAT)
ENGINE=INNODB;

# create the actual table
CREATE TABLE t1(id INT PRIMARY KEY,
                msg VARCHAR(255),
                KEY msg_i(msg))
ENGINE=INNODB
ROW_FORMAT=COMPRESSED
KEY_BLOCK_SIZE=1;

--sync_slave_with_master

--connection master
--let $num_records = 1000
--let $pid_file = `SELECT @@pid_file`
--let $num_crashes = 30
--let $num_workers = 20
# each worker will perform this many small transactions.
--let $num_transactions = 30000
# master will be killed after this many seconds for each crash.
--let $kill_db_after = 15
--let $crash_num = 0
--let $master_host = 127.0.0.1
--let $table = test
--let $user = root

while ($num_crashes)
{
  connection master;
  exec echo "restart" > $MYSQLTEST_VARDIR/tmp/mysqld.1.expect;
  if ($crash_num)
  {
    let $num_records = 0; # do not populate the table except for the first run.
  }
  let $exec =
python suite/innodb_plugin/t/load_generator.py $pid_file $kill_db_after
$num_records  $num_workers $num_transactions $user $master_host $MASTER_MYPORT
$table;
  exec $exec;
  # Turn on reconnect
  enable_reconnect;
  # Call script that will poll the server waiting for it to be back online again
  source include/wait_until_connected_again.inc;
  connection master;
  let $master_checksum = query_get_value(CHECKSUM TABLE t1, Checksum, 1);
  sync_slave_with_master;
  connection slave;
  let $slave_checksum=query_get_value(CHECKSUM TABLE t1, Checksum, 1);
  let $not_same = `SELECT $master_checksum-$slave_checksum`;
  if ($not_same)
  {
    let $msg =
The checksums of table t1 for master and slave do not match for $crash_num th
crash. This may happen if there is a corrupt recovery log or a bug in crash
recovery. You can take a look at the logs in /tmp/load_generator to see the
queries issued before the crash.;
    echo $msg;
    die;
  }
  dec $num_crashes;
  inc $crash_num;
}

# final cleanup
--connection master
DROP TABLE t1, journal;
# restore innodb_file_format and innodb_file_format_check
--eval SET GLOBAL innodb_file_format = \"$file_format_save\"
--eval SET GLOBAL innodb_file_format_check = \"$file_format_check_save\"
--eval SET GLOBAL innodb_background_checkpoint = $background_checkpoint_save
--eval SET GLOBAL innodb_log_compressed_pages = $log_compressed_pages_save

--connection slave
--eval SET GLOBAL innodb_file_format = \"$file_format_save\"
--eval SET GLOBAL innodb_file_format_check = \"$file_format_check_save\"
--eval SET GLOBAL innodb_background_checkpoint = $background_checkpoint_save
--eval SET GLOBAL innodb_log_compressed_pages = $log_compressed_pages_save

--exec rm -rf /tmp/load_generator
--exit
