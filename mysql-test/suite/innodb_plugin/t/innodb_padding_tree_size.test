#
# Testing system variables innodb_comp_fail_tree_size and innodb_comp_fail_samples.
#
--source include/not_embedded.inc
--source include/have_innodb.inc
--source include/big_test.inc
# record the file format in order to restore in the end.
--let $file_format_save = `SELECT @@innodb_file_format`
--let $file_format_check_save = `SELECT @@innodb_file_format_check`
--let $padding_tree_size_save = `SELECT @@innodb_padding_tree_size`
--let $padding_tree_samples_save = `SELECT @@innodb_padding_tree_samples`
--let $compression_level_save = `SELECT @@innodb_compression_level`

# first check whether the variable is set-able.
SET GLOBAL innodb_padding_tree_size = 0;
let $not_ok = `SELECT @@innodb_padding_tree_size`;
if ($not_ok) {
  die Can not set innodb_padding_tree_size to 0;
}

SET GLOBAL innodb_padding_tree_size = 1000;
let $not_ok = `SELECT @@innodb_padding_tree_size - 1000`;
if ($not_ok) {
  die Can not set innodb_padding_tree_size to 1000;
}

--disable_query_log
--disable_result_log

# test innodb_padding_tree_size = 0
SET GLOBAL innodb_padding_tree_size = 0;
let $padding_tree_samples = 0;
let $compression_level = 0;
let $num_tests = 10;
while ($num_tests)
{
  eval SET GLOBAL innodb_padding_tree_samples = $padding_tree_samples;
  eval SET GLOBAL innodb_compression_level = $compression_level;
  # create the table with compressed pages of size 1K.
  CREATE TABLE t1(id INT PRIMARY KEY, msg VARCHAR(255))
  ENGINE=INNODB
  ROW_FORMAT=COMPRESSED
  KEY_BLOCK_SIZE=1;

  let $num_inserts = 21;
  while ($num_inserts)
  {
    eval
INSERT INTO t1(id, msg)
VALUES ($num_inserts, REPEAT(PASSWORD($num_inserts), 5));
    dec $num_inserts;
  }

  # the padding size for t1 must be zero.
  --let $padding_size = `SELECT compress_padding FROM information_schema.table_statistics WHERE table_schema='test' AND table_name='t1'`
  if ($padding_size)
  {
    die Padding size for table t1 must have remained zero because innodb_padding_tree_size = 0;
  }
  # the padding savings should also be zero
  --let $padding_savings = `SELECT padding_savings FROM information_schema.table_statistics WHERE table_schema='test' AND table_name='t1'`
  if ($padding_savings)
  {
    die Padding savings for table t1 must have remained zero because innodb_padding_tree_size = 0;
  }
  DROP TABLE t1;
  dec $num_tests;
  let $padding_tree_samples = `SELECT $padding_tree_samples + 10`;
  inc $compression_level;
}

# Below tests are for code coverage for comp_fail_tree_size.
let $num_tests = 10;
let $padding_tree_size = 0;
let $padding_tree_samples = 50;
SET GLOBAL innodb_compression_level = 1;
eval SET GLOBAL innodb_padding_tree_samples = $padding_tree_samples;
while ($num_tests)
{
  inc $padding_tree_size;
  eval SET GLOBAL innodb_padding_tree_size=$padding_tree_size;
  # create the table with compressed pages of size 1K.
  CREATE TABLE t1(id INT PRIMARY KEY, msg VARCHAR(255))
  ENGINE=INNODB
  ROW_FORMAT=COMPRESSED
  KEY_BLOCK_SIZE=1;
  # In order to obtain $padding_tree_samples many compression failures
  # we need to fill that many pages
  let $num_inserts = `SELECT 21*$padding_tree_samples`;
  while ($num_inserts)
  {
    eval
INSERT INTO t1(id, msg)
VALUES ($num_inserts, REPEAT(PASSWORD($num_inserts), 5));
    dec $num_inserts;
  }
  DROP TABLE t1;
  inc $padding_tree_samples;
  dec $num_tests;
}


# restore innodb_file_format and innodb_file_format_check
eval SET GLOBAL innodb_file_format = \"$file_format_save\";
eval SET GLOBAL innodb_file_format_check = \"$file_format_check_save\";
eval SET GLOBAL innodb_padding_tree_size = $padding_tree_size_save;
eval SET GLOBAL innodb_padding_tree_samples = $padding_tree_samples_save;
eval SET GLOBAL innodb_compression_level = $compression_level_save;
