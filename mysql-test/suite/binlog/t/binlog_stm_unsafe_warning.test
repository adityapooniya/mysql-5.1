# BUG#42851: Spurious "Statement is not safe to log in statement
#            format." warnings
#
# WHY
# ===
#   
#   This test aims at checking that the fix that removes spurious
#   entries in the error log when the statement is filtered out from
#   binlog, is working.
#
# HOW
# ===
#
#   The test case is split into three assertions when issuing statements
#   containing LIMIT and ORDER BY:
#
#     i) issue statements in database that is not filtered => check
#        that warnings ARE shown;
#
#    ii) issue statements in database that is not filtered, but with
#        binlog disabled => check that warnings ARE NOT shown;
#
#   iii) issue statements in database that is filtered => check that
#        warnings ARE NOT shown.

-- source include/have_log_bin.inc
-- source include/have_binlog_format_statement.inc

-- echo ### NOT filtered database => assertion: warnings ARE shown

-- disable_warnings
DROP TABLE IF EXISTS t1;
-- enable_warnings

CREATE TABLE t1 (a int, b int, primary key (a));
INSERT INTO t1 VALUES (1,2), (2,3);
UPDATE t1 SET b='4' WHERE a=1 LIMIT 1;
UPDATE t1 SET b='5' WHERE a=2 ORDER BY a LIMIT 1;
DROP TABLE t1;

-- echo ### NOT filtered database => assertion: binlog disabled and warnings ARE NOT shown

SET SQL_LOG_BIN= 0;

-- disable_warnings
DROP TABLE IF EXISTS t1;
-- enable_warnings

CREATE TABLE t1 (a int, b int, primary key (a));
INSERT INTO t1 VALUES (1,2), (2,3);
UPDATE t1 SET b='4' WHERE a=1 LIMIT 1;
UPDATE t1 SET b='5' WHERE a=2 ORDER BY a LIMIT 1;
DROP TABLE t1;

SET SQL_LOG_BIN= 1;

-- echo ### FILTERED database => assertion: warnings ARE NOT shown

let $old_db= `SELECT DATABASE()`;

CREATE DATABASE b42851;
USE b42851;

-- disable_warnings
DROP TABLE IF EXISTS t1;
-- enable_warnings

CREATE TABLE t1 (a int, b int, primary key (a));
INSERT INTO t1 VALUES (1,2), (2,3);
UPDATE t1 SET b='4' WHERE a=1 LIMIT 1;
UPDATE t1 SET b='5' WHERE a=2 ORDER BY a LIMIT 1;
DROP TABLE t1;

# clean up
DROP DATABASE b42851;

eval USE $old_db;

--echo #
--echo # Bug#46265: Can not disable warning about unsafe statements for binary logging
--echo #

SET @old_log_warnings = @@log_warnings;

--disable_warnings
DROP TABLE IF EXISTS t1;
--enable_warnings
CREATE TABLE t1 (a VARCHAR(36), b VARCHAR(10));
SET GLOBAL LOG_WARNINGS = 0;
INSERT INTO t1 VALUES(UUID(), 'Bug#46265');
SET GLOBAL LOG_WARNINGS = 1;
INSERT INTO t1 VALUES(UUID(), 'Bug#46265');
SET GLOBAL LOG_WARNINGS = 2;
INSERT INTO t1 VALUES(UUID(), 'Bug#46265');
DROP TABLE t1;

SET GLOBAL log_warnings = @old_log_warnings;

let $log_error_= `SELECT @@GLOBAL.log_error`;
if(!`select LENGTH('$log_error_')`)
{
  # MySQL Server on windows is started with --console and thus
  # does not know the location of its .err log, use default location
  let $log_error_ = $MYSQLTEST_VARDIR/log/mysqld.1.err;
}
# Assign env variable LOG_ERROR
let LOG_ERROR=$log_error_;

--echo # Count the number of times the "Unsafe" message was printed
--echo # to the error log.

perl;
  use strict;
  my $log_error= $ENV{'LOG_ERROR'} or die "LOG_ERROR not set";
  open(FILE, "$log_error") or die("Unable to open $log_error: $!\n");
  my $count = () = grep(/Bug#46265/g,<FILE>);
  print "Occurrences: $count\n";
  close(FILE);
EOF

#
# BUG#42851
# This test verifies if the unsafe warnings will be written to error log 
# when --log-warnings is set to 2 or higher, and the 'SHOW WARNINGS'
# is not controlled by --log-warnings option.
#

set @save_log_warnings= @@global.log_warnings;
# create table
CREATE TABLE `t1` (
  `recNo` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `string` varchar(64) NOT NULL,
  `inUseBy` varchar(38) NOT NULL DEFAULT '',
  `tsLastUpdated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE
CURRENT_TIMESTAMP,
  PRIMARY KEY (`recNo`),
  KEY `tsLastUpdated` (`tsLastUpdated`),
  KEY `inUseBy` (`inUseBy`)
);
# insert test data
INSERT INTO t1 SET string='one';
INSERT INTO t1 SET string='two';
INSERT INTO t1 SET string='three';

--disable_warnings

set @@global.log_warnings= 0;
select @@global.log_warnings;
UPDATE t1 SET inUseBy='me' WHERE inUseBy='--log-warnings < 2' limit 1;
--echo # When the --log-warnings is set to 0, Test the unsafe
--echo # warning will be displayed by 'SHOW WARNINGS', but it will not 
--echo # be written to error log.
SHOW WARNINGS;

set @@global.log_warnings= 1;
select @@global.log_warnings;
UPDATE t1 SET inUseBy='me' WHERE inUseBy='--log-warnings < 2' limit 2;
--echo # When the --log-warnings is set to 1, Test the unsafe
--echo # warning will be displayed by 'SHOW WARNINGS', but it will not 
--echo # be written to error log.
SHOW WARNINGS;

set @@global.log_warnings= 2;
select @@global.log_warnings;
UPDATE t1 SET inUseBy='me' WHERE inUseBy='--log-warnings >= 2' limit 3;
--echo # When the --log-warnings is set to 2, Test the unsafe
--echo # warning will be displayed by 'SHOW WARNINGS', and it also will 
--echo # be written to error log.
SHOW WARNINGS;

set @@global.log_warnings= 3;
select @@global.log_warnings;
UPDATE t1 SET inUseBy='me' WHERE inUseBy='--log-warnings >= 2' limit 4;
--echo # When the --log-warnings is set to 3, Test the unsafe
--echo # warning will be displayed by 'SHOW WARNINGS', and it also will 
--echo # be written to error log.
SHOW WARNINGS;

set @@global.log_warnings= 500;
select @@global.log_warnings;
UPDATE t1 SET inUseBy='me' WHERE inUseBy='--log-warnings >= 2' limit 5;
--echo # When the --log-warnings is set to 500, Test the unsafe
--echo # warning will be displayed by 'SHOW WARNINGS', and it also will 
--echo # be written to error log.
SHOW WARNINGS;

--enable_warnings

set @@global.log_warnings= @save_log_warnings;
drop table t1;

--echo # Count the number of times the "Unsafe" message was printed to
--echo # the error log, when --log-warnings >= 2 and --log-warnings < 2.

perl;
  use strict;
  my $log_error= $ENV{'LOG_ERROR'} or die "LOG_ERROR not set";
  open(FILE, "$log_error") or die("Unable to open $log_error: $!\n");
  my $count1 = () = grep(/--log-warnings >= 2/g,<FILE>);
  print "When --log-warnings >= 2, Occurrences: $count1\n";
  my $count2 = () = grep(/--log-warnings < 2/g,<FILE>);
  print "When --log-warnings < 2, Occurrences: $count2\n";
  close(FILE);
EOF

